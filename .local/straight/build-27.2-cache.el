
:tanat

"27.2"

#s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("org-elpa" ("2022-02-13 13:58:40" nil (:local-repo nil :package "org-elpa" :type git)) "melpa" ("2022-02-13 13:58:40" nil (:type git :host github :repo "melpa/melpa" :build nil :package "melpa" :local-repo "melpa")) "gnu-elpa-mirror" ("2022-02-13 13:58:40" nil (:type git :host github :repo "emacs-straight/gnu-elpa-mirror" :build nil :package "gnu-elpa-mirror" :local-repo "gnu-elpa-mirror")) "el-get" ("2022-02-13 13:58:40" nil (:type git :host github :repo "dimitri/el-get" :build nil :files ("*.el" ("recipes" "recipes/el-get.rcp") "methods" "el-get-pkg.el") :flavor melpa :package "el-get" :local-repo "el-get")) "emacsmirror-mirror" ("2022-02-13 13:58:40" nil (:type git :host github :repo "emacs-straight/emacsmirror-mirror" :build nil :package "emacsmirror-mirror" :local-repo "emacsmirror-mirror")) "straight" ("2022-02-13 13:58:40" ("emacs") (:host github :repo "raxod502/straight.el" :branch "develop" :local-repo "straight.el" :files ("straight*.el") :package "straight" :type git)) "use-package" ("2022-02-13 13:58:40" ("emacs" "bind-key") (:type git :flavor melpa :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package" :package "use-package" :local-repo "use-package")) "bind-key" ("2022-02-13 13:58:40" nil (:flavor melpa :files ("bind-key.el" "bind-key-pkg.el") :package "bind-key" :local-repo "use-package" :type git :repo "jwiegley/use-package" :host github)) "auto-minor-mode" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host github :repo "joewreschnig/auto-minor-mode" :package "auto-minor-mode" :local-repo "auto-minor-mode")) "gcmh" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host gitlab :repo "koral/gcmh" :package "gcmh" :local-repo "gcmh")) "explain-pause-mode" ("2022-02-13 13:58:40" nil (:host github :repo "lastquestion/explain-pause-mode" :package "explain-pause-mode" :type git :local-repo "explain-pause-mode")) "all-the-icons" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :files (:defaults "data" "all-the-icons-pkg.el") :host github :repo "domtronn/all-the-icons.el" :package "all-the-icons" :local-repo "all-the-icons.el")) "hide-mode-line" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host github :repo "hlissner/emacs-hide-mode-line" :package "hide-mode-line" :local-repo "emacs-hide-mode-line")) "highlight-numbers" ("2022-02-13 13:58:40" ("emacs" "parent-mode") (:type git :flavor melpa :host github :repo "Fanael/highlight-numbers" :package "highlight-numbers" :local-repo "highlight-numbers")) "parent-mode" ("2022-02-13 13:58:40" nil (:type git :flavor melpa :host github :repo "Fanael/parent-mode" :package "parent-mode" :local-repo "parent-mode")) "rainbow-delimiters" ("2022-02-13 13:58:40" nil (:type git :flavor melpa :host github :repo "Fanael/rainbow-delimiters" :package "rainbow-delimiters" :local-repo "rainbow-delimiters")) "restart-emacs" ("2022-02-13 13:58:40" nil (:type git :flavor melpa :host github :repo "iqbalansari/restart-emacs" :package "restart-emacs" :local-repo "restart-emacs")) "better-jumper" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host github :repo "gilbertw1/better-jumper" :package "better-jumper" :local-repo "better-jumper")) "dtrt-indent" ("2022-02-13 13:58:40" nil (:type git :flavor melpa :host github :repo "jscheid/dtrt-indent" :package "dtrt-indent" :local-repo "dtrt-indent")) "helpful" ("2022-02-13 13:58:40" ("emacs" "dash" "s" "f" "elisp-refs") (:type git :flavor melpa :host github :repo "Wilfred/helpful" :package "helpful" :local-repo "helpful")) "dash" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :files ("dash.el" "dash.texi" "dash-pkg.el") :host github :repo "magnars/dash.el" :package "dash" :local-repo "dash.el")) "s" ("2022-02-13 13:58:40" nil (:type git :flavor melpa :files ("s.el" "s-pkg.el") :host github :repo "magnars/s.el" :package "s" :local-repo "s.el")) "f" ("2022-02-13 13:58:40" ("s" "dash") (:type git :flavor melpa :files ("f.el" "f-pkg.el") :host github :repo "rejeep/f.el" :package "f" :local-repo "f.el")) "elisp-refs" ("2022-02-13 13:58:40" ("dash" "s") (:type git :flavor melpa :files (:defaults (:exclude "elisp-refs-bench.el") "elisp-refs-pkg.el") :host github :repo "Wilfred/elisp-refs" :package "elisp-refs" :local-repo "elisp-refs")) "pcre2el" ("2022-02-13 13:58:40" ("emacs" "cl-lib") (:type git :flavor melpa :files ("pcre2el.el" "pcre2el-pkg.el") :host github :repo "joddie/pcre2el" :package "pcre2el" :local-repo "pcre2el")) "smartparens" ("2022-02-13 13:58:40" ("dash" "cl-lib") (:type git :flavor melpa :host github :repo "Fuco1/smartparens" :package "smartparens" :local-repo "smartparens")) "ws-butler" ("2022-02-13 13:58:40" ("emacs") (:host github :repo "hlissner/ws-butler" :flavor melpa :package "ws-butler" :type git :local-repo "ws-butler")) "projectile" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :files ("projectile.el" "projectile-pkg.el") :host github :repo "bbatsov/projectile" :package "projectile" :local-repo "projectile")) "project" ("2022-02-13 13:58:40" ("emacs" "xref") (:type git :host github :repo "emacs-straight/project" :files ("*" (:exclude ".git")) :package "project" :local-repo "project")) "xref" ("2022-02-13 13:58:40" ("emacs") (:type git :host github :repo "emacs-straight/xref" :files ("*" (:exclude ".git")) :package "xref" :local-repo "xref")) "general" ("2022-02-13 13:58:40" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "noctuid/general.el" :package "general" :local-repo "general.el")) "which-key" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host github :repo "justbur/emacs-which-key" :package "which-key" :local-repo "emacs-which-key")) "company" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :files (:defaults "icons" ("images/small" "doc/images/small/*.png") "company-pkg.el") :host github :repo "company-mode/company-mode" :package "company" :local-repo "company-mode")) "company-dict" ("2022-02-13 13:58:40" ("emacs" "company" "parent-mode") (:type git :flavor melpa :host github :repo "hlissner/emacs-company-dict" :package "company-dict" :local-repo "emacs-company-dict")) "helm" ("2022-02-13 13:58:40" ("emacs" "async" "popup" "helm-core") (:type git :flavor melpa :files ("*.el" "emacs-helm.sh" (:exclude "helm-lib.el" "helm-source.el" "helm-multi-match.el" "helm-core.el") "helm-pkg.el") :host github :repo "emacs-helm/helm" :package "helm" :local-repo "helm")) "async" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host github :repo "jwiegley/emacs-async" :package "async" :local-repo "emacs-async")) "popup" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :files ("popup.el" "popup-pkg.el") :host github :repo "auto-complete/popup-el" :package "popup" :local-repo "popup-el")) "helm-core" ("2022-02-13 13:58:40" ("emacs" "async") (:flavor melpa :files ("helm-core.el" "helm-lib.el" "helm-source.el" "helm-multi-match.el" "helm-core-pkg.el") :package "helm-core" :local-repo "helm" :type git :repo "emacs-helm/helm" :host github)) "helm-rg" ("2022-02-13 13:58:40" ("emacs" "cl-lib" "dash" "helm") (:type git :flavor melpa :host github :repo "cosmicexplorer/helm-rg" :package "helm-rg" :local-repo "helm-rg")) "helm-c-yasnippet" ("2022-02-13 13:58:40" ("emacs" "helm" "yasnippet") (:type git :flavor melpa :host github :repo "emacs-jp/helm-c-yasnippet" :package "helm-c-yasnippet" :local-repo "helm-c-yasnippet")) "yasnippet" ("2022-02-13 13:58:40" ("cl-lib") (:type git :flavor melpa :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet" :package "yasnippet" :local-repo "yasnippet")) "helm-company" ("2022-02-13 13:58:40" ("helm" "company") (:type git :flavor melpa :host github :repo "Sodel-the-Vociferous/helm-company" :package "helm-company" :local-repo "helm-company")) "helm-describe-modes" ("2022-02-13 13:58:40" ("helm" "cl-lib" "emacs") (:host github :repo "emacs-helm/helm-describe-modes" :flavor melpa :package "helm-describe-modes" :type git :local-repo "helm-describe-modes")) "helm-projectile" ("2022-02-13 13:58:40" ("helm" "projectile" "cl-lib") (:type git :flavor melpa :host github :repo "bbatsov/helm-projectile" :package "helm-projectile" :local-repo "helm-projectile")) "swiper-helm" ("2022-02-13 13:58:40" ("emacs" "swiper" "helm") (:type git :flavor melpa :host github :repo "abo-abo/swiper-helm" :package "swiper-helm" :local-repo "swiper-helm")) "swiper" ("2022-02-13 13:58:40" ("emacs" "ivy") (:type git :flavor melpa :files ("swiper.el" "swiper-pkg.el") :host github :repo "abo-abo/swiper" :package "swiper" :local-repo "swiper")) "ivy" ("2022-02-13 13:58:40" ("emacs") (:flavor melpa :files (:defaults (:exclude "swiper.el" "counsel.el" "ivy-hydra.el" "ivy-avy.el") "doc/ivy-help.org" "ivy-pkg.el") :package "ivy" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "helm-org" ("2022-02-13 13:58:40" ("helm" "emacs") (:type git :flavor melpa :files ("helm-org.el" "helm-org-pkg.el") :host github :repo "emacs-helm/helm-org" :package "helm-org" :local-repo "helm-org")) "helm-descbinds" ("2022-02-13 13:58:40" ("helm") (:type git :flavor melpa :host github :repo "emacs-helm/helm-descbinds" :package "helm-descbinds" :local-repo "helm-descbinds")) "ivy-hydra" ("2022-02-13 13:58:40" ("emacs" "ivy" "hydra") (:flavor melpa :files ("ivy-hydra.el" "ivy-hydra-pkg.el") :package "ivy-hydra" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "hydra" ("2022-02-13 13:58:40" ("cl-lib" "lv") (:type git :flavor melpa :files (:defaults (:exclude "lv.el") "hydra-pkg.el") :host github :repo "abo-abo/hydra" :package "hydra" :local-repo "hydra")) "lv" ("2022-02-13 13:58:40" nil (:flavor melpa :files ("lv.el" "lv-pkg.el") :package "lv" :local-repo "hydra" :type git :repo "abo-abo/hydra" :host github)) "ivy-avy" ("2022-02-13 13:58:40" ("emacs" "ivy" "avy") (:flavor melpa :files ("ivy-avy.el" "ivy-avy-pkg.el") :package "ivy-avy" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "avy" ("2022-02-13 13:58:40" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "abo-abo/avy" :package "avy" :local-repo "avy")) "counsel" ("2022-02-13 13:58:40" ("emacs" "ivy" "swiper") (:flavor melpa :files ("counsel.el" "counsel-pkg.el") :package "counsel" :local-repo "swiper" :type git :repo "abo-abo/swiper" :host github)) "amx" ("2022-02-13 13:58:40" ("emacs" "s") (:type git :flavor melpa :host github :repo "DarwinAwardWinner/amx" :package "amx" :local-repo "amx")) "counsel-projectile" ("2022-02-13 13:58:40" ("counsel" "projectile") (:type git :flavor melpa :host github :repo "ericdanan/counsel-projectile" :package "counsel-projectile" :local-repo "counsel-projectile")) "ivy-rich" ("2022-02-13 13:58:40" ("emacs" "ivy") (:type git :flavor melpa :files ("*.el" "ivy-rich-pkg.el") :host github :repo "Yevgnen/ivy-rich" :package "ivy-rich" :local-repo "ivy-rich")) "wgrep" ("2022-02-13 13:58:40" nil (:type git :flavor melpa :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo "Emacs-wgrep")) "doom-themes" ("2022-02-13 13:58:40" ("emacs" "cl-lib") (:type git :flavor melpa :files (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el" "doom-themes-pkg.el") :host github :repo "doomemacs/themes" :package "doom-themes" :local-repo "themes")) "solaire-mode" ("2022-02-13 13:58:40" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/emacs-solaire-mode" :package "solaire-mode" :local-repo "emacs-solaire-mode")) "hl-todo" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host github :repo "tarsius/hl-todo" :package "hl-todo" :local-repo "hl-todo")) "highlight-indent-guides" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host github :repo "DarthFennec/highlight-indent-guides" :package "highlight-indent-guides" :local-repo "highlight-indent-guides")) "minimap" ("2022-02-13 13:58:40" nil (:type git :host github :repo "emacs-straight/minimap" :files ("*" (:exclude ".git")) :package "minimap" :local-repo "minimap")) "doom-modeline" ("2022-02-13 13:58:40" ("emacs" "all-the-icons" "shrink-path" "dash") (:type git :flavor melpa :host github :repo "seagle0128/doom-modeline" :package "doom-modeline" :local-repo "doom-modeline")) "shrink-path" ("2022-02-13 13:58:40" ("emacs" "s" "dash" "f") (:type git :flavor melpa :host gitlab :repo "bennya/shrink-path.el" :package "shrink-path" :local-repo "shrink-path.el")) "anzu" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/anzu" :package "anzu" :local-repo "anzu")) "evil-anzu" ("2022-02-13 13:58:40" ("evil" "anzu") (:type git :flavor melpa :host github :repo "emacsorphanage/evil-anzu" :package "evil-anzu" :local-repo "evil-anzu")) "evil" ("2022-02-13 13:58:40" ("emacs" "goto-chg" "cl-lib") (:type git :flavor melpa :files (:defaults "doc/build/texinfo/evil.texi" (:exclude "evil-test-helpers.el") "evil-pkg.el") :host github :repo "emacs-evil/evil" :package "evil" :local-repo "evil")) "goto-chg" ("2022-02-13 13:58:40" ("emacs") (:type git :flavor melpa :host github :repo "emacs-evil/goto-chg" :package "goto-chg" :local-repo "goto-chg")) "evil-goggles" ("2022-02-13 13:58:41" ("emacs" "evil") (:type git :flavor melpa :host github :repo "edkolev/evil-goggles" :package "evil-goggles" :local-repo "evil-goggles")) "treemacs" ("2022-02-13 13:58:41" ("emacs" "cl-lib" "dash" "s" "ace-window" "pfuture" "hydra" "ht" "cfrs") (:type git :flavor melpa :files (:defaults "Changelog.org" "icons" "src/elisp/treemacs*.el" "src/scripts/treemacs*.py" (:exclude "src/extra/*") "treemacs-pkg.el") :host github :repo "Alexander-Miller/treemacs" :package "treemacs" :local-repo "treemacs")) "ace-window" ("2022-02-13 13:58:41" ("avy") (:type git :flavor melpa :host github :repo "abo-abo/ace-window" :package "ace-window" :local-repo "ace-window")) "pfuture" ("2022-02-13 13:58:41" ("emacs") (:type git :flavor melpa :host github :repo "Alexander-Miller/pfuture" :package "pfuture" :local-repo "pfuture")) "ht" ("2022-02-13 13:58:41" ("dash") (:type git :flavor melpa :files ("ht.el" "ht-pkg.el") :host github :repo "Wilfred/ht.el" :package "ht" :local-repo "ht.el")) "cfrs" ("2022-02-13 13:58:41" ("emacs" "dash" "s" "posframe") (:type git :flavor melpa :host github :repo "Alexander-Miller/cfrs" :package "cfrs" :local-repo "cfrs")) "posframe" ("2022-02-13 13:58:41" ("emacs") (:type git :flavor melpa :host github :repo "tumashu/posframe" :package "posframe" :local-repo "posframe")) "treemacs-evil" ("2022-02-13 13:58:41" ("emacs" "evil" "treemacs") (:flavor melpa :files ("src/extra/treemacs-evil.el" "treemacs-evil-pkg.el") :package "treemacs-evil" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "treemacs-projectile" ("2022-02-13 13:58:41" ("emacs" "projectile" "treemacs") (:flavor melpa :files ("src/extra/treemacs-projectile.el" "treemacs-projectile-pkg.el") :package "treemacs-projectile" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "treemacs-magit" ("2022-02-13 13:58:41" ("emacs" "treemacs" "pfuture" "magit") (:flavor melpa :files ("src/extra/treemacs-magit.el" "treemacs-magit-pkg.el") :package "treemacs-magit" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "magit" ("2022-02-13 13:58:41" ("emacs" "dash" "git-commit" "magit-section" "transient" "with-editor") (:flavor melpa :files ("lisp/magit" "lisp/magit*.el" "lisp/git-rebase.el" "docs/magit.texi" "docs/AUTHORS.md" "LICENSE" (:exclude "lisp/magit-libgit.el" "lisp/magit-libgit-pkg.el" "lisp/magit-section.el" "lisp/magit-section-pkg.el") "Documentation/magit.texi" "Documentation/AUTHORS.md" "magit-pkg.el") :package "magit" :local-repo "magit" :type git :repo "magit/magit" :host github)) "git-commit" ("2022-02-13 13:58:41" ("emacs" "dash" "transient" "with-editor") (:type git :flavor melpa :files ("lisp/git-commit.el" "lisp/git-commit-pkg.el" "git-commit-pkg.el") :host github :repo "magit/magit" :package "git-commit" :local-repo "magit")) "transient" ("2022-02-13 13:58:41" ("emacs") (:type git :flavor melpa :files ("lisp/transient.el" "docs/transient.texi" "transient-pkg.el") :host github :repo "magit/transient" :package "transient" :local-repo "transient")) "with-editor" ("2022-02-13 13:58:41" ("emacs") (:type git :flavor melpa :files ("lisp/with-editor.el" "docs/with-editor.texi" "with-editor.el" "with-editor.texi" "with-editor-pkg.el") :host github :repo "magit/with-editor" :package "with-editor" :local-repo "with-editor")) "magit-section" ("2022-02-13 13:58:41" ("emacs" "dash") (:flavor melpa :files ("lisp/magit-section.el" "lisp/magit-section-pkg.el" "docs/magit-section.texi" "Documentation/magit-section.texi" "magit-section-pkg.el") :package "magit-section" :local-repo "magit" :type git :repo "magit/magit" :host github)) "treemacs-persp" ("2022-02-13 13:58:41" ("emacs" "treemacs" "persp-mode" "dash") (:flavor melpa :files ("src/extra/treemacs-persp.el" "treemacs-persp-pkg.el") :package "treemacs-persp" :local-repo "treemacs" :type git :repo "Alexander-Miller/treemacs" :host github)) "persp-mode" ("2022-02-13 13:58:41" ("emacs") (:type git :flavor melpa :host github :repo "Bad-ptr/persp-mode.el" :package "persp-mode" :local-repo "persp-mode.el")) "git-gutter-fringe" ("2022-02-13 13:58:41" ("git-gutter" "fringe-helper" "cl-lib" "emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/git-gutter-fringe" :package "git-gutter-fringe" :local-repo "git-gutter-fringe")) "git-gutter" ("2022-02-13 13:58:41" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/git-gutter" :package "git-gutter" :local-repo "git-gutter")) "fringe-helper" ("2022-02-13 13:58:41" nil (:type git :flavor melpa :host github :repo "nschum/fringe-helper.el" :package "fringe-helper" :local-repo "fringe-helper.el")) "vi-tilde-fringe" ("2022-02-13 13:58:41" ("emacs") (:type git :flavor melpa :host github :repo "syl20bnr/vi-tilde-fringe" :package "vi-tilde-fringe" :local-repo "vi-tilde-fringe")) "evil-args" ("2022-02-13 13:58:41" ("evil") (:type git :flavor melpa :host github :repo "wcsmith/evil-args" :package "evil-args" :local-repo "evil-args")) "evil-easymotion" ("2022-02-13 13:58:41" ("emacs" "avy" "cl-lib") (:type git :flavor melpa :host github :repo "PythonNut/evil-easymotion" :package "evil-easymotion" :local-repo "evil-easymotion")) "evil-embrace" ("2022-02-13 13:58:41" ("emacs" "embrace" "evil-surround") (:type git :flavor melpa :host github :repo "cute-jumper/evil-embrace.el" :package "evil-embrace" :local-repo "evil-embrace.el")) "embrace" ("2022-02-13 13:58:41" ("cl-lib" "expand-region") (:type git :flavor melpa :host github :repo "cute-jumper/embrace.el" :package "embrace" :local-repo "embrace.el")) "expand-region" ("2022-02-13 13:58:41" nil (:type git :flavor melpa :host github :repo "magnars/expand-region.el" :package "expand-region" :local-repo "expand-region.el")) "evil-surround" ("2022-02-13 13:58:41" ("evil") (:type git :flavor melpa :host github :repo "emacs-evil/evil-surround" :package "evil-surround" :local-repo "evil-surround")) "evil-escape" ("2022-02-13 13:58:41" ("emacs" "evil" "cl-lib") (:host github :repo "hlissner/evil-escape" :flavor melpa :package "evil-escape" :type git :local-repo "evil-escape")) "evil-exchange" ("2022-02-13 13:58:41" ("evil" "cl-lib") (:type git :flavor melpa :host github :repo "Dewdrops/evil-exchange" :package "evil-exchange" :local-repo "evil-exchange")) "evil-indent-plus" ("2022-02-13 13:58:41" ("evil" "cl-lib") (:type git :flavor melpa :host github :repo "TheBB/evil-indent-plus" :package "evil-indent-plus" :local-repo "evil-indent-plus")) "evil-lion" ("2022-02-13 13:58:41" ("emacs" "evil") (:type git :flavor melpa :files ("evil-lion.el" "evil-lion-pkg.el") :host github :repo "edkolev/evil-lion" :package "evil-lion" :local-repo "evil-lion")) "evil-nerd-commenter" ("2022-02-13 13:58:41" ("emacs") (:type git :flavor melpa :host github :repo "redguardtoo/evil-nerd-commenter" :package "evil-nerd-commenter" :local-repo "evil-nerd-commenter")) "evil-numbers" ("2022-02-13 13:58:41" ("emacs" "evil") (:type git :flavor melpa :host github :repo "juliapath/evil-numbers" :package "evil-numbers" :local-repo "evil-numbers")) "evil-snipe" ("2022-02-13 13:58:41" ("emacs" "evil" "cl-lib") (:type git :flavor melpa :host github :repo "hlissner/evil-snipe" :package "evil-snipe" :local-repo "evil-snipe")) "evil-textobj-anyblock" ("2022-02-13 13:58:41" ("cl-lib" "evil") (:host github :repo "willghatch/evil-textobj-anyblock" :branch "fix-inner-block" :flavor melpa :package "evil-textobj-anyblock" :type git :local-repo "evil-textobj-anyblock")) "evil-traces" ("2022-02-13 13:58:41" ("emacs" "evil") (:type git :flavor melpa :host github :repo "mamapanda/evil-traces" :package "evil-traces" :local-repo "evil-traces")) "evil-visualstar" ("2022-02-13 13:58:41" ("evil") (:type git :flavor melpa :host github :repo "bling/evil-visualstar" :package "evil-visualstar" :local-repo "evil-visualstar")) "exato" ("2022-02-13 13:58:41" ("evil" "emacs") (:type git :flavor melpa :host github :repo "ninrod/exato" :package "exato" :local-repo "exato")) "evil-quick-diff" ("2022-02-13 13:58:41" ("evil" "cl-lib") (:host github :repo "rgrinberg/evil-quick-diff" :package "evil-quick-diff" :type git :local-repo "evil-quick-diff")) "evil-collection" ("2022-02-13 13:58:41" ("emacs" "evil" "annalist") (:type git :flavor melpa :files (:defaults "modes" "evil-collection-pkg.el") :host github :repo "emacs-evil/evil-collection" :package "evil-collection" :local-repo "evil-collection")) "annalist" ("2022-02-13 13:58:41" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "noctuid/annalist.el" :package "annalist" :local-repo "annalist.el")) "vimish-fold" ("2022-02-13 13:58:41" ("emacs" "cl-lib" "f") (:type git :flavor melpa :host github :repo "matsievskiysv/vimish-fold" :package "vimish-fold" :local-repo "vimish-fold")) "evil-vimish-fold" ("2022-02-13 13:58:43" ("emacs" "evil" "vimish-fold") (:type git :flavor melpa :host github :repo "alexmurray/evil-vimish-fold" :package "evil-vimish-fold" :local-repo "evil-vimish-fold")) "auto-yasnippet" ("2022-02-13 13:58:44" ("yasnippet") (:type git :flavor melpa :host github :repo "abo-abo/auto-yasnippet" :package "auto-yasnippet" :local-repo "auto-yasnippet")) "doom-snippets" ("2022-02-13 13:58:47" ("emacs" "cl-lib" "yasnippet") (:host github :repo "doomemacs/snippets" :files (:defaults "*") :package "doom-snippets" :type git :local-repo "snippets")) "adaptive-wrap" ("2022-02-13 13:58:47" nil (:type git :host github :repo "emacs-straight/adaptive-wrap" :files ("*" (:exclude ".git")) :package "adaptive-wrap" :local-repo "adaptive-wrap")) "diredfl" ("2022-02-13 13:58:49" ("emacs") (:type git :flavor melpa :host github :repo "purcell/diredfl" :package "diredfl" :local-repo "diredfl")) "dired-git-info" ("2022-02-13 13:58:50" ("emacs") (:type git :host github :repo "emacs-straight/dired-git-info" :files ("*" (:exclude ".git")) :package "dired-git-info" :local-repo "dired-git-info")) "diff-hl" ("2022-02-13 13:58:51" ("cl-lib" "emacs") (:type git :flavor melpa :host github :repo "dgutov/diff-hl" :package "diff-hl" :local-repo "diff-hl")) "dired-rsync" ("2022-02-13 13:58:52" ("s" "dash" "emacs") (:type git :flavor melpa :host github :repo "stsquad/dired-rsync" :package "dired-rsync" :local-repo "dired-rsync")) "fd-dired" ("2022-02-13 13:58:53" ("emacs") (:type git :flavor melpa :host github :repo "yqrashawn/fd-dired" :package "fd-dired" :local-repo "fd-dired")) "undo-fu" ("2022-02-13 13:58:55" ("emacs") (:type git :flavor melpa :host gitlab :repo "ideasman42/emacs-undo-fu" :package "undo-fu" :local-repo "emacs-undo-fu")) "undo-fu-session" ("2022-02-13 13:58:57" ("emacs") (:type git :flavor melpa :host gitlab :repo "ideasman42/emacs-undo-fu-session" :package "undo-fu-session" :local-repo "emacs-undo-fu-session")) "browse-at-remote" ("2022-02-13 13:58:58" ("f" "s" "cl-lib") (:type git :flavor melpa :host github :repo "rmuslimov/browse-at-remote" :package "browse-at-remote" :local-repo "browse-at-remote")) "git-timemachine" ("2022-02-13 13:59:00" ("emacs" "transient") (:type git :flavor melpa :host gitlab :repo "pidu/git-timemachine" :package "git-timemachine" :local-repo "git-timemachine")) "git-modes" ("2022-02-13 13:59:01" ("emacs") (:type git :flavor melpa :host github :repo "magit/git-modes" :package "git-modes" :local-repo "git-modes")) "vterm" ("2022-02-13 13:59:02" ("emacs") (:type git :flavor melpa :files ("*" (:exclude ".dir-locals.el" ".gitignore" ".clang-format" ".travis.yml") "vterm-pkg.el") :host github :repo "akermu/emacs-libvterm" :package "vterm" :local-repo "emacs-libvterm")) "flycheck" ("2022-02-13 13:59:07" ("dash" "pkg-info" "let-alist" "seq" "emacs") (:type git :flavor melpa :host github :repo "flycheck/flycheck" :package "flycheck" :local-repo "flycheck")) "pkg-info" ("2022-02-13 13:59:05" ("epl") (:type git :flavor melpa :host github :repo "emacsorphanage/pkg-info" :package "pkg-info" :local-repo "pkg-info")) "epl" ("2022-02-13 13:59:04" ("cl-lib") (:type git :flavor melpa :host github :repo "cask/epl" :package "epl" :local-repo "epl")) "flycheck-popup-tip" ("2022-02-13 13:59:08" ("flycheck" "popup" "emacs") (:type git :flavor melpa :host github :repo "flycheck/flycheck-popup-tip" :package "flycheck-popup-tip" :local-repo "flycheck-popup-tip")) "flyspell-correct" ("2022-02-13 13:59:09" ("emacs") (:type git :flavor melpa :files ("flyspell-correct.el" "flyspell-correct-ido.el" "flyspell-correct-pkg.el") :host github :repo "d12frosted/flyspell-correct" :package "flyspell-correct" :local-repo "flyspell-correct")) "flyspell-correct-ivy" ("2022-02-13 13:59:10" ("flyspell-correct" "ivy" "emacs") (:flavor melpa :files ("flyspell-correct-ivy.el" "flyspell-correct-ivy-pkg.el") :package "flyspell-correct-ivy" :local-repo "flyspell-correct" :type git :repo "d12frosted/flyspell-correct" :host github)) "flyspell-lazy" ("2022-02-13 13:59:11" nil (:type git :flavor melpa :host github :repo "rolandwalker/flyspell-lazy" :package "flyspell-lazy" :local-repo "flyspell-lazy")) "bibtex-completion" ("2022-02-13 13:59:15" ("parsebib" "s" "dash" "f" "cl-lib" "biblio" "emacs") (:type git :flavor melpa :files ("bibtex-completion.el" "bibtex-completion-pkg.el") :host github :repo "tmalsburg/helm-bibtex" :package "bibtex-completion" :local-repo "helm-bibtex")) "parsebib" ("2022-02-13 13:59:12" ("emacs") (:type git :flavor melpa :host github :repo "joostkremers/parsebib" :package "parsebib" :local-repo "parsebib")) "biblio" ("2022-02-13 13:59:14" ("emacs" "biblio-core") (:type git :flavor melpa :files (:defaults (:exclude "biblio-core.el") "biblio-pkg.el") :host github :repo "cpitclaudel/biblio.el" :package "biblio" :local-repo "biblio.el")) "biblio-core" ("2022-02-13 13:59:13" ("emacs" "let-alist" "seq" "dash") (:flavor melpa :files ("biblio-core.el" "biblio-core-pkg.el") :package "biblio-core" :local-repo "biblio.el" :type git :repo "cpitclaudel/biblio.el" :host github)) "ivy-bibtex" ("2022-02-13 13:59:16" ("bibtex-completion" "ivy" "cl-lib") (:flavor melpa :files ("ivy-bibtex.el" "ivy-bibtex-pkg.el") :package "ivy-bibtex" :local-repo "helm-bibtex" :type git :repo "tmalsburg/helm-bibtex" :host github)) "helm-bibtex" ("2022-02-13 13:59:17" ("bibtex-completion" "helm" "cl-lib" "emacs") (:flavor melpa :files ("helm-bibtex.el" "helm-bibtex-pkg.el") :package "helm-bibtex" :local-repo "helm-bibtex" :type git :repo "tmalsburg/helm-bibtex" :host github)) "citeproc" ("2022-02-13 13:59:38" ("emacs" "dash" "s" "f" "queue" "string-inflection" "org" "parsebib") (:type git :flavor melpa :host github :repo "andras-simonyi/citeproc-el" :package "citeproc" :local-repo "citeproc-el")) "queue" ("2022-02-13 13:59:18" ("cl-lib") (:type git :host github :repo "emacs-straight/queue" :files ("*" (:exclude ".git")) :package "queue" :local-repo "queue")) "string-inflection" ("2022-02-13 13:59:19" nil (:type git :flavor melpa :host github :repo "akicho8/string-inflection" :package "string-inflection" :local-repo "string-inflection")) "org" ("2022-02-13 13:59:36" ("emacs") (:host github :repo "emacs-straight/org-mode" :files (:defaults "etc") :depth 1 :build t :pre-build (with-temp-file "org-version.el" (let ((version (with-temp-buffer (insert-file-contents (doom-path "lisp/org.el") nil 0 1024) (if (re-search-forward "^;; Version: \\([^
-]+\\)" nil t) (match-string-no-properties 1) "Unknown")))) (insert (format "(defun org-release () %S)
" version) (format "(defun org-git-version (&rest _) \"%s-??-%s\")
" version (cdr (doom-call-process "git" "rev-parse" "--short" "HEAD"))) "(provide 'org-version)
"))) :local-repo "org" :package "org" :type git)) "quickrun" ("2022-02-13 13:59:39" ("emacs") (:type git :flavor melpa :host github :repo "emacsorphanage/quickrun" :package "quickrun" :local-repo "quickrun")) "eros" ("2022-02-13 13:59:40" ("emacs") (:type git :flavor melpa :host github :repo "xiongtx/eros" :package "eros" :local-repo "eros")) "dumb-jump" ("2022-02-13 13:59:41" ("emacs" "s" "dash" "popup") (:type git :flavor melpa :host github :repo "jacktasia/dumb-jump" :package "dumb-jump" :local-repo "dumb-jump")) "ivy-xref" ("2022-02-13 13:59:42" ("emacs" "ivy") (:type git :flavor melpa :host github :repo "alexmurray/ivy-xref" :package "ivy-xref" :local-repo "ivy-xref")) "helm-xref" ("2022-02-13 13:59:44" ("emacs" "helm") (:type git :flavor melpa :host github :repo "brotzeit/helm-xref" :package "helm-xref" :local-repo "helm-xref")) "request" ("2022-02-13 13:59:45" ("emacs") (:type git :flavor melpa :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request" :package "request" :local-repo "emacs-request")) "lsp-mode" ("2022-02-13 13:59:59" ("emacs" "dash" "f" "ht" "spinner" "markdown-mode" "lv") (:type git :flavor melpa :files (:defaults "clients/*.el" "lsp-mode-pkg.el") :host github :repo "emacs-lsp/lsp-mode" :package "lsp-mode" :local-repo "lsp-mode")) "spinner" ("2022-02-13 13:59:48" ("emacs") (:type git :host github :repo "emacs-straight/spinner" :files ("*" (:exclude ".git")) :package "spinner" :local-repo "spinner")) "markdown-mode" ("2022-02-13 13:59:50" ("emacs") (:type git :flavor melpa :host github :repo "jrblevin/markdown-mode" :package "markdown-mode" :local-repo "markdown-mode")) "lsp-ui" ("2022-02-13 14:00:02" ("emacs" "dash" "lsp-mode" "markdown-mode") (:type git :flavor melpa :files (:defaults "lsp-ui-doc.html" "resources" "lsp-ui-pkg.el") :host github :repo "emacs-lsp/lsp-ui" :package "lsp-ui" :local-repo "lsp-ui")) "lsp-ivy" ("2022-02-13 14:00:04" ("emacs" "dash" "lsp-mode" "ivy") (:type git :flavor melpa :host github :repo "emacs-lsp/lsp-ivy" :package "lsp-ivy" :local-repo "lsp-ivy")) "helm-lsp" ("2022-02-13 14:00:06" ("emacs" "dash" "lsp-mode" "helm") (:type git :flavor melpa :host github :repo "emacs-lsp/helm-lsp" :package "helm-lsp" :local-repo "helm-lsp")) "magit-gitflow" ("2022-02-13 14:00:09" ("magit" "magit-popup") (:type git :flavor melpa :host github :repo "jtatarik/magit-gitflow" :package "magit-gitflow" :local-repo "magit-gitflow")) "magit-popup" ("2022-02-13 14:00:08" ("emacs" "dash") (:type git :flavor melpa :host github :repo "magit/magit-popup" :package "magit-popup" :local-repo "magit-popup")) "magit-todos" ("2022-02-13 14:00:12" ("emacs" "async" "dash" "f" "hl-todo" "magit" "pcre2el" "s" "transient") (:type git :flavor melpa :host github :repo "alphapapa/magit-todos" :package "magit-todos" :local-repo "magit-todos")) "code-review" ("2022-02-13 14:01:23" ("emacs" "closql" "magit" "a" "ghub" "uuidgen" "deferred" "markdown-mode" "forge" "emojify") (:files ("graphql" "code-review*.el") :flavor melpa :repo "wandersoncferreira/code-review" :host github :package "code-review" :type git :local-repo "code-review")) "closql" ("2022-02-13 14:00:16" ("emacs" "emacsql-sqlite") (:type git :flavor melpa :host github :repo "emacscollective/closql" :package "closql" :local-repo "closql")) "emacsql-sqlite" ("2022-02-13 14:00:15" ("emacs" "emacsql") (:type git :flavor melpa :files ("emacsql-sqlite.el" "sqlite" "emacsql-sqlite-pkg.el") :host github :repo "skeeto/emacsql" :package "emacsql-sqlite" :local-repo "emacsql")) "emacsql" ("2022-02-13 14:00:15" ("emacs") (:flavor melpa :files ("emacsql.el" "emacsql-compiler.el" "emacsql-system.el" "README.md" "emacsql-pkg.el") :package "emacsql" :local-repo "emacsql" :type git :repo "skeeto/emacsql" :host github)) "a" ("2022-02-13 14:00:16" ("emacs") (:type git :flavor melpa :host github :repo "plexus/a.el" :package "a" :local-repo "a.el")) "ghub" ("2022-02-13 14:00:19" ("emacs" "let-alist" "treepy") (:type git :flavor melpa :files ("lisp/*.el" "docs/ghub.texi" "*.el" "*.texi" "ghub-pkg.el") :host github :repo "magit/ghub" :package "ghub" :local-repo "ghub")) "treepy" ("2022-02-13 14:00:18" ("emacs") (:type git :flavor melpa :host github :repo "volrath/treepy.el" :package "treepy" :local-repo "treepy.el")) "uuidgen" ("2022-02-13 14:00:20" nil (:type git :flavor melpa :host github :repo "kanru/uuidgen-el" :package "uuidgen" :local-repo "uuidgen-el")) "deferred" ("2022-02-13 14:00:21" ("emacs") (:type git :flavor melpa :files ("deferred.el" "deferred-pkg.el") :host github :repo "kiwanami/emacs-deferred" :package "deferred" :local-repo "emacs-deferred")) "forge" ("2022-02-13 14:01:18" ("emacs" "closql" "dash" "emacsql-sqlite" "ghub" "let-alist" "magit" "markdown-mode" "transient" "yaml") (:type git :flavor melpa :files ("lisp/*.el" "docs/forge.texi" "forge-pkg.el") :host github :repo "magit/forge" :package "forge" :local-repo "forge")) "yaml" ("2022-02-13 14:00:28" ("emacs") (:type git :flavor melpa :host github :repo "zkry/yaml.el" :package "yaml" :local-repo "yaml.el")) "emojify" ("2022-02-13 14:01:19" ("seq" "ht" "emacs") (:type git :flavor melpa :files (:defaults "data" "images" "emojify-pkg.el") :host github :repo "iqbalansari/emacs-emojify" :package "emojify" :local-repo "emacs-emojify")) "makefile-executor" ("2022-02-13 14:01:24" ("emacs" "dash" "f" "s") (:type git :flavor melpa :host github :repo "thiderman/makefile-executor.el" :package "makefile-executor" :local-repo "makefile-executor.el")) "pdf-tools" ("2022-02-13 14:01:28" ("emacs" "nadvice" "tablist" "let-alist") (:type git :flavor melpa :files ("lisp/*.el" "README" ("build" "Makefile") ("build" "server") (:exclude "lisp/tablist.el" "lisp/tablist-filter.el") "pdf-tools-pkg.el") :host github :repo "vedang/pdf-tools" :package "pdf-tools" :local-repo "pdf-tools")) "tablist" ("2022-02-13 14:01:25" ("emacs") (:type git :flavor melpa :host github :repo "politza/tablist" :package "tablist" :local-repo "tablist")) "saveplace-pdf-view" ("2022-02-13 14:01:29" ("emacs") (:type git :flavor melpa :host github :repo "nicolaisingh/saveplace-pdf-view" :package "saveplace-pdf-view" :local-repo "saveplace-pdf-view")) "xclip" ("2022-02-13 14:01:30" nil (:type git :host github :repo "emacs-straight/xclip" :files ("*" (:exclude ".git")) :package "xclip" :local-repo "xclip")) "evil-terminal-cursor-changer" ("2022-02-13 14:01:32" ("evil") (:host github :repo "kisaragi-hiu/evil-terminal-cursor-changer" :flavor melpa :package "evil-terminal-cursor-changer" :type git :local-repo "evil-terminal-cursor-changer")) "cmake-mode" ("2022-02-13 14:01:33" ("emacs") (:host github :repo "emacsmirror/cmake-mode" :files (:defaults "*") :flavor melpa :package "cmake-mode" :type git :local-repo "cmake-mode")) "cuda-mode" ("2022-02-13 14:01:34" nil (:type git :flavor melpa :host github :repo "chachi/cuda-mode" :package "cuda-mode" :local-repo "cuda-mode")) "demangle-mode" ("2022-02-13 14:01:35" ("cl-lib" "emacs") (:type git :flavor melpa :host github :repo "liblit/demangle-mode" :package "demangle-mode" :local-repo "demangle-mode")) "disaster" ("2022-02-13 14:01:36" nil (:type git :flavor melpa :files ("disaster.el" "disaster-pkg.el") :host github :repo "jart/disaster" :package "disaster" :local-repo "disaster")) "modern-cpp-font-lock" ("2022-02-13 14:01:37" nil (:type git :flavor melpa :host github :repo "ludwigpacifici/modern-cpp-font-lock" :package "modern-cpp-font-lock" :local-repo "modern-cpp-font-lock")) "opencl-mode" ("2022-02-13 14:01:39" nil (:type git :flavor melpa :host github :repo "salmanebah/opencl-mode" :package "opencl-mode" :local-repo "opencl-mode")) "glsl-mode" ("2022-02-13 14:01:40" nil (:type git :flavor melpa :host github :repo "jimhourihan/glsl-mode" :package "glsl-mode" :local-repo "glsl-mode")) "company-glsl" ("2022-02-13 14:01:41" ("company") (:host github :repo "Kaali/company-glsl" :flavor melpa :package "company-glsl" :type git :local-repo "company-glsl")) "irony" ("2022-02-13 14:01:43" ("cl-lib" "json") (:type git :flavor melpa :files ("*.el" "server" "irony-pkg.el") :host github :repo "Sarcasm/irony-mode" :package "irony" :local-repo "irony-mode")) "irony-eldoc" ("2022-02-13 14:01:44" ("emacs" "cl-lib" "irony") (:type git :flavor melpa :host github :repo "ikirill/irony-eldoc" :package "irony-eldoc" :local-repo "irony-eldoc")) "flycheck-irony" ("2022-02-13 14:01:45" ("emacs" "flycheck" "irony") (:type git :flavor melpa :host github :repo "Sarcasm/flycheck-irony" :package "flycheck-irony" :local-repo "flycheck-irony")) "company-irony" ("2022-02-13 14:01:46" ("emacs" "company" "irony" "cl-lib") (:type git :flavor melpa :host github :repo "Sarcasm/company-irony" :package "company-irony" :local-repo "company-irony")) "company-irony-c-headers" ("2022-02-13 14:01:47" ("cl-lib" "company" "irony") (:type git :flavor melpa :host github :repo "hotpxl/company-irony-c-headers" :package "company-irony-c-headers" :local-repo "company-irony-c-headers")) "rtags" ("2022-02-13 14:01:50" ("emacs") (:type git :flavor melpa :files ("src/rtags.el" "rtags-pkg.el") :host github :repo "Andersbakken/rtags" :package "rtags" :local-repo "rtags")) "ivy-rtags" ("2022-02-13 14:01:51" ("ivy" "rtags") (:flavor melpa :files ("src/ivy-rtags.el" "ivy-rtags-pkg.el") :package "ivy-rtags" :local-repo "rtags" :type git :repo "Andersbakken/rtags" :host github)) "helm-rtags" ("2022-02-13 14:01:52" ("helm" "rtags") (:flavor melpa :files ("src/helm-rtags.el" "helm-rtags-pkg.el") :package "helm-rtags" :local-repo "rtags" :type git :repo "Andersbakken/rtags" :host github)) "highlight-quoted" ("2022-02-13 14:01:53" ("emacs") (:type git :flavor melpa :host github :repo "Fanael/highlight-quoted" :package "highlight-quoted" :local-repo "highlight-quoted")) "macrostep" ("2022-02-13 14:01:54" ("cl-lib") (:type git :flavor melpa :host github :repo "joddie/macrostep" :package "macrostep" :local-repo "macrostep")) "overseer" ("2022-02-13 14:01:55" ("emacs" "dash" "pkg-info" "f") (:type git :flavor melpa :host github :repo "tonini/overseer.el" :package "overseer" :local-repo "overseer.el")) "elisp-def" ("2022-02-13 14:01:57" ("dash" "f" "s" "emacs") (:type git :flavor melpa :host github :repo "Wilfred/elisp-def" :package "elisp-def" :local-repo "elisp-def")) "elisp-demos" ("2022-02-13 14:01:58" ("emacs") (:type git :flavor melpa :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos" :package "elisp-demos" :local-repo "elisp-demos")) "flycheck-package" ("2022-02-13 14:02:00" ("emacs" "flycheck" "package-lint") (:type git :flavor melpa :host github :repo "purcell/flycheck-package" :package "flycheck-package" :local-repo "flycheck-package")) "package-lint" ("2022-02-13 14:02:00" ("cl-lib" "emacs" "let-alist") (:type git :flavor melpa :files (:defaults "data" (:exclude "*flymake.el") "package-lint-pkg.el") :host github :repo "purcell/package-lint" :package "package-lint" :local-repo "package-lint")) "flycheck-cask" ("2022-02-13 14:02:02" ("emacs" "flycheck" "dash") (:type git :flavor melpa :host github :repo "flycheck/flycheck-cask" :package "flycheck-cask" :local-repo "flycheck-cask")) "buttercup" ("2022-02-13 14:02:03" ("emacs") (:type git :flavor melpa :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup" :package "buttercup" :local-repo "emacs-buttercup")) "android-mode" ("2022-02-13 14:02:04" nil (:type git :flavor melpa :host github :repo "remvee/android-mode" :package "android-mode" :local-repo "android-mode")) "groovy-mode" ("2022-02-13 14:02:06" ("s" "emacs" "dash") (:type git :flavor melpa :files ("*groovy*.el" "groovy-mode-pkg.el") :host github :repo "Groovy-Emacs-Modes/groovy-emacs-modes" :package "groovy-mode" :local-repo "groovy-emacs-modes")) "lsp-java" ("2022-02-13 14:02:19" ("emacs" "lsp-mode" "markdown-mode" "dash" "f" "ht" "request" "treemacs" "dap-mode") (:type git :flavor melpa :files (:defaults "icons" "lsp-java-pkg.el") :host github :repo "emacs-lsp/lsp-java" :package "lsp-java" :local-repo "lsp-java")) "dap-mode" ("2022-02-13 14:02:16" ("emacs" "dash" "lsp-mode" "bui" "f" "s" "lsp-treemacs" "posframe" "ht") (:type git :flavor melpa :files (:defaults "icons" "dap-mode-pkg.el") :host github :repo "emacs-lsp/dap-mode" :package "dap-mode" :local-repo "dap-mode")) "bui" ("2022-02-13 14:02:08" ("emacs" "dash") (:type git :flavor melpa :host github :repo "alezost/bui.el" :package "bui" :local-repo "bui.el")) "lsp-treemacs" ("2022-02-13 14:02:13" ("emacs" "dash" "f" "ht" "treemacs" "lsp-mode") (:type git :flavor melpa :files (:defaults "icons" "lsp-treemacs-pkg.el") :host github :repo "emacs-lsp/lsp-treemacs" :package "lsp-treemacs" :local-repo "lsp-treemacs")) "rjsx-mode" ("2022-02-13 14:02:29" ("emacs" "js2-mode") (:type git :flavor melpa :host github :repo "felipeochoa/rjsx-mode" :package "rjsx-mode" :local-repo "rjsx-mode")) "js2-mode" ("2022-02-13 14:02:28" ("emacs" "cl-lib") (:type git :flavor melpa :host github :repo "mooz/js2-mode" :package "js2-mode" :local-repo "js2-mode")) "typescript-mode" ("2022-02-13 14:02:31" ("emacs") (:type git :flavor melpa :host github :repo "emacs-typescript/typescript.el" :package "typescript-mode" :local-repo "typescript.el")) "js2-refactor" ("2022-02-13 14:02:34" ("js2-mode" "s" "multiple-cursors" "dash" "s" "yasnippet") (:type git :flavor melpa :host github :repo "js-emacs/js2-refactor.el" :package "js2-refactor" :local-repo "js2-refactor.el")) "multiple-cursors" ("2022-02-13 14:02:33" ("cl-lib") (:type git :flavor melpa :host github :repo "magnars/multiple-cursors.el" :package "multiple-cursors" :local-repo "multiple-cursors.el")) "npm-mode" ("2022-02-13 14:02:35" ("emacs") (:type git :flavor melpa :host github :repo "mojochao/npm-mode" :package "npm-mode" :local-repo "npm-mode")) "add-node-modules-path" ("2022-02-13 14:02:36" nil (:type git :flavor melpa :host github :repo "codesuki/add-node-modules-path" :package "add-node-modules-path" :local-repo "add-node-modules-path")) "nodejs-repl" ("2022-02-13 14:02:37" nil (:type git :flavor melpa :host github :repo "abicky/nodejs-repl.el" :package "nodejs-repl" :local-repo "nodejs-repl.el")) "skewer-mode" ("2022-02-13 14:02:41" ("simple-httpd" "js2-mode" "emacs") (:type git :flavor melpa :files ("*.html" "*.js" "*.el" "skewer-mode-pkg.el") :host github :repo "skeeto/skewer-mode" :package "skewer-mode" :local-repo "skewer-mode")) "simple-httpd" ("2022-02-13 14:02:39" ("cl-lib") (:type git :flavor melpa :host github :repo "skeeto/emacs-web-server" :package "simple-httpd" :local-repo "emacs-web-server")) "tide" ("2022-02-13 14:02:44" ("emacs" "dash" "s" "flycheck" "typescript-mode" "cl-lib") (:type git :flavor melpa :files (:defaults "tsserver" "tide-pkg.el") :host github :repo "ananthakumaran/tide" :package "tide" :local-repo "tide")) "xref-js2" ("2022-02-13 14:02:46" ("emacs" "js2-mode") (:type git :flavor melpa :host github :repo "js-emacs/xref-js2" :package "xref-js2" :local-repo "xref-js2")) "auctex" ("2022-02-13 14:02:53" ("emacs") (:type git :host github :repo "emacs-straight/auctex" :files ("*" (:exclude ".git")) :package "auctex" :local-repo "auctex")) "latex-preview-pane" ("2022-02-13 14:02:54" nil (:type git :flavor melpa :files ("*.el" "*.txt" "latex-preview-pane-pkg.el") :host github :repo "jsinglet/latex-preview-pane" :package "latex-preview-pane" :local-repo "latex-preview-pane")) "evil-tex" ("2022-02-13 14:02:56" ("emacs" "evil" "auctex") (:type git :flavor melpa :host github :repo "iyefrat/evil-tex" :package "evil-tex" :local-repo "evil-tex")) "company-auctex" ("2022-02-13 14:02:57" ("yasnippet" "company" "auctex") (:type git :flavor melpa :host github :repo "alexeyr/company-auctex" :package "company-auctex" :local-repo "company-auctex")) "company-reftex" ("2022-02-13 14:02:59" ("emacs" "s" "company") (:type git :flavor melpa :host github :repo "TheBB/company-reftex" :package "company-reftex" :local-repo "company-reftex")) "company-math" ("2022-02-13 14:03:01" ("company" "math-symbol-lists") (:type git :flavor melpa :host github :repo "vspinu/company-math" :package "company-math" :local-repo "company-math")) "math-symbol-lists" ("2022-02-13 14:03:00" nil (:type git :flavor melpa :host github :repo "vspinu/math-symbol-lists" :package "math-symbol-lists" :local-repo "math-symbol-lists")) "markdown-toc" ("2022-02-13 14:03:02" ("s" "dash" "markdown-mode") (:type git :flavor melpa :host github :repo "ardumont/markdown-toc" :package "markdown-toc" :local-repo "markdown-toc")) "edit-indirect" ("2022-02-13 14:03:03" ("emacs") (:type git :flavor melpa :host github :repo "Fanael/edit-indirect" :package "edit-indirect" :local-repo "edit-indirect")) "evil-markdown" ("2022-02-13 14:03:04" nil (:host github :repo "Somelauw/evil-markdown" :package "evil-markdown" :type git :local-repo "evil-markdown")) "org-contrib" ("2022-02-13 14:03:08" ("emacs" "org") (:host github :repo "emacsmirror/org-contrib" :files (:defaults "lisp/*.el") :package "org-contrib" :type git :local-repo "org-contrib")) "htmlize" ("2022-02-13 14:03:09" nil (:type git :flavor melpa :host github :repo "hniksic/emacs-htmlize" :package "htmlize" :local-repo "emacs-htmlize")) "org-yt" ("2022-02-13 14:03:10" nil (:host github :repo "TobiasZawada/org-yt" :package "org-yt" :type git :local-repo "org-yt")) "ox-clip" ("2022-02-13 14:03:12" ("org" "htmlize") (:type git :flavor melpa :host github :repo "jkitchin/ox-clip" :package "ox-clip" :local-repo "ox-clip")) "toc-org" ("2022-02-13 14:03:13" nil (:type git :flavor melpa :host github :repo "snosov1/toc-org" :package "toc-org" :local-repo "toc-org")) "org-cliplink" ("2022-02-13 14:03:14" ("emacs") (:type git :flavor melpa :host github :repo "rexim/org-cliplink" :package "org-cliplink" :local-repo "org-cliplink")) "evil-org" ("2022-02-13 14:03:16" ("emacs" "evil") (:host github :repo "hlissner/evil-org-mode" :flavor melpa :package "evil-org" :type git :local-repo "evil-org-mode")) "org-pdftools" ("2022-02-13 14:03:19" ("emacs" "org" "pdf-tools" "org-noter") (:type git :flavor melpa :files ("org-pdftools.el" "org-pdftools-pkg.el") :host github :repo "fuxialexander/org-pdftools" :package "org-pdftools" :local-repo "org-pdftools")) "org-noter" ("2022-02-13 14:03:18" ("emacs" "cl-lib" "org") (:type git :flavor melpa :host github :repo "weirdNox/org-noter" :package "org-noter" :local-repo "org-noter")) "orgit" ("2022-02-13 14:03:21" ("emacs" "magit" "org") (:type git :flavor melpa :host github :repo "magit/orgit" :package "orgit" :local-repo "orgit")) "ob-async" ("2022-02-13 14:03:23" ("async" "org" "emacs" "dash") (:type git :flavor melpa :host github :repo "astahlman/ob-async" :package "ob-async" :local-repo "ob-async")) "psysh" ("2022-02-13 14:03:25" ("emacs" "s" "f" "php-runtime") (:type git :flavor melpa :host github :repo "emacs-php/psysh.el" :package "psysh" :local-repo "psysh.el")) "php-runtime" ("2022-02-13 14:03:24" ("emacs" "cl-lib" "f" "s") (:type git :flavor melpa :host github :repo "emacs-php/php-runtime.el" :package "php-runtime" :local-repo "php-runtime.el")) "php-extras" ("2022-02-13 14:03:29" ("php-mode") (:host github :repo "arnested/php-extras" :package "php-extras" :type git :local-repo "php-extras")) "php-mode" ("2022-02-13 14:03:28" ("emacs") (:type git :flavor melpa :files (:defaults "lisp/*.el" "php-mode-pkg.el") :host github :repo "emacs-php/php-mode" :package "php-mode" :local-repo "php-mode")) "php-refactor-mode" ("2022-02-13 14:03:30" nil (:type git :flavor melpa :host github :repo "keelerm84/php-refactor-mode.el" :package "php-refactor-mode" :local-repo "php-refactor-mode.el")) "phpunit" ("2022-02-13 14:03:31" ("s" "f" "pkg-info" "cl-lib" "emacs") (:type git :flavor melpa :host github :repo "nlamirault/phpunit.el" :package "phpunit" :local-repo "phpunit.el")) "composer" ("2022-02-13 14:03:32" ("emacs" "s" "f" "seq" "php-runtime") (:type git :flavor melpa :host github :repo "emacs-php/composer.el" :package "composer" :local-repo "composer.el")) "phpactor" ("2022-02-13 14:03:34" ("emacs" "f" "php-runtime" "composer" "async") (:type git :flavor melpa :files ("phpactor.el" "composer.json" "composer.lock" "phpactor-pkg.el") :host github :repo "emacs-php/phpactor.el" :package "phpactor" :local-repo "phpactor.el")) "company-phpactor" ("2022-02-13 14:03:34" ("emacs" "company" "phpactor") (:flavor melpa :files ("company-phpactor.el" "company-phpactor-pkg.el") :package "company-phpactor" :local-repo "phpactor.el" :type git :repo "emacs-php/phpactor.el" :host github)) "pip-requirements" ("2022-02-13 14:03:35" ("dash") (:type git :flavor melpa :host github :repo "Wilfred/pip-requirements.el" :package "pip-requirements" :local-repo "pip-requirements.el")) "anaconda-mode" ("2022-02-13 14:03:38" ("emacs" "pythonic" "dash" "s" "f") (:type git :flavor melpa :files (:defaults "anaconda-mode.py" "anaconda-mode-pkg.el") :host github :repo "pythonic-emacs/anaconda-mode" :package "anaconda-mode" :local-repo "anaconda-mode")) "pythonic" ("2022-02-13 14:03:37" ("emacs" "s" "f") (:type git :flavor melpa :host github :repo "pythonic-emacs/pythonic" :package "pythonic" :local-repo "pythonic")) "company-anaconda" ("2022-02-13 14:03:39" ("company" "anaconda-mode" "cl-lib" "dash" "s") (:type git :flavor melpa :host github :repo "pythonic-emacs/company-anaconda" :package "company-anaconda" :local-repo "company-anaconda")) "pipenv" ("2022-02-13 14:03:42" ("emacs" "s" "pyvenv") (:type git :flavor melpa :host github :repo "pwalsh/pipenv.el" :package "pipenv" :local-repo "pipenv.el")) "pyvenv" ("2022-02-13 14:03:41" nil (:type git :flavor melpa :host github :repo "jorgenschaefer/pyvenv" :package "pyvenv" :local-repo "pyvenv")) "nose" ("2022-02-13 14:03:43" nil (:type git :host github :repo "emacsattic/nose" :package "nose" :local-repo "nose")) "python-pytest" ("2022-02-13 14:03:44" ("emacs" "dash" "transient" "projectile" "s") (:type git :flavor melpa :host github :repo "wbolster/emacs-python-pytest" :package "python-pytest" :local-repo "emacs-python-pytest")) "pyimport" ("2022-02-13 14:03:46" ("dash" "s" "shut-up") (:type git :flavor melpa :host github :repo "Wilfred/pyimport" :package "pyimport" :local-repo "pyimport")) "shut-up" ("2022-02-13 14:03:46" ("cl-lib" "emacs") (:type git :flavor melpa :host github :repo "cask/shut-up" :package "shut-up" :local-repo "shut-up")) "py-isort" ("2022-02-13 14:03:47" nil (:type git :flavor melpa :host github :repo "paetzke/py-isort.el" :package "py-isort" :local-repo "py-isort.el")) "rustic" ("2022-02-13 14:03:51" ("emacs" "dash" "f" "let-alist" "markdown-mode" "project" "s" "seq" "spinner" "xterm-color") (:type git :flavor melpa :host github :repo "brotzeit/rustic" :package "rustic" :local-repo "rustic")) "xterm-color" ("2022-02-13 14:03:49" ("emacs") (:type git :flavor melpa :host github :repo "atomontage/xterm-color" :package "xterm-color" :local-repo "xterm-color")) "racer" ("2022-02-13 14:03:55" ("emacs" "rust-mode" "dash" "s" "f" "pos-tip") (:type git :flavor melpa :host github :repo "racer-rust/emacs-racer" :package "racer" :local-repo "emacs-racer")) "rust-mode" ("2022-02-13 14:03:53" ("emacs") (:type git :flavor melpa :host github :repo "rust-lang/rust-mode" :package "rust-mode" :local-repo "rust-mode")) "pos-tip" ("2022-02-13 14:03:54" nil (:type git :flavor melpa :host github :repo "pitkali/pos-tip" :package "pos-tip" :local-repo "pos-tip")) "company-shell" ("2022-02-13 14:03:56" ("emacs" "company" "dash" "cl-lib") (:type git :flavor melpa :files ("company-shell.el" "company-shell-pkg.el") :host github :repo "Alexander-Miller/company-shell" :package "company-shell" :local-repo "company-shell")) "calfw" ("2022-02-13 14:03:57" nil (:type git :flavor melpa :files ("calfw.el" "calfw-pkg.el") :host github :repo "kiwanami/emacs-calfw" :package "calfw" :local-repo "emacs-calfw")) "calfw-org" ("2022-02-13 14:03:58" nil (:flavor melpa :files ("calfw-org.el" "calfw-org-pkg.el") :package "calfw-org" :local-repo "emacs-calfw" :type git :repo "kiwanami/emacs-calfw" :host github)) "calfw-cal" ("2022-02-13 14:03:59" nil (:flavor melpa :files ("calfw-cal.el" "calfw-cal-pkg.el") :package "calfw-cal" :local-repo "emacs-calfw" :type git :repo "kiwanami/emacs-calfw" :host github)) "calfw-ical" ("2022-02-13 14:03:59" nil (:flavor melpa :files ("calfw-ical.el" "calfw-ical-pkg.el") :package "calfw-ical" :local-repo "emacs-calfw" :type git :repo "kiwanami/emacs-calfw" :host github)) "org-gcal" ("2022-02-13 14:04:05" ("request" "request-deferred" "alert" "persist" "emacs" "org") (:type git :flavor melpa :host github :repo "kidd/org-gcal.el" :package "org-gcal" :local-repo "org-gcal.el")) "request-deferred" ("2022-02-13 14:04:01" ("emacs" "deferred" "request") (:flavor melpa :files ("request-deferred.el" "request-deferred-pkg.el") :package "request-deferred" :local-repo "emacs-request" :type git :repo "tkf/emacs-request" :host github)) "alert" ("2022-02-13 14:04:03" ("gntp" "log4e" "cl-lib") (:type git :flavor melpa :host github :repo "jwiegley/alert" :package "alert" :local-repo "alert")) "gntp" ("2022-02-13 14:04:02" nil (:type git :flavor melpa :host github :repo "tekai/gntp.el" :package "gntp" :local-repo "gntp.el")) "log4e" ("2022-02-13 14:04:03" nil (:type git :flavor melpa :host github :repo "aki2o/log4e" :package "log4e" :local-repo "log4e")) "persist" ("2022-02-13 14:04:04" nil (:type git :host github :repo "emacs-straight/persist" :files ("*" (:exclude ".git")) :package "persist" :local-repo "persist")) "drag-stuff" ("2022-02-13 14:04:07" nil (:type git :flavor melpa :host github :repo "rejeep/drag-stuff.el" :package "drag-stuff" :local-repo "drag-stuff.el")) "link-hint" ("2022-02-13 14:04:08" ("avy" "emacs") (:type git :flavor melpa :host github :repo "noctuid/link-hint.el" :package "link-hint" :local-repo "link-hint.el")) "org-superstar" ("2022-02-13 14:04:09" ("org" "emacs") (:type git :flavor melpa :host github :repo "integral-dw/org-superstar-mode" :package "org-superstar" :local-repo "org-superstar-mode")) "olivetti" ("2022-02-13 14:04:10" ("emacs") (:type git :flavor melpa :host github :repo "rnkn/olivetti" :package "olivetti" :local-repo "olivetti")) "evil-better-visual-line" ("2022-02-13 14:04:11" ("evil") (:type git :flavor melpa :host github :repo "YourFin/evil-better-visual-line" :package "evil-better-visual-line" :local-repo "evil-better-visual-line")) "org-variable-pitch" ("2022-02-13 14:04:12" ("emacs") (:type git :flavor melpa :files ("org-variable-pitch.el" "org-variable-pitch-pkg.el") :host github :repo "cadadr/elisp" :package "org-variable-pitch" :local-repo "elisp")) "mixed-pitch" ("2022-02-13 14:04:14" ("emacs") (:type git :flavor melpa :host gitlab :repo "jabranham/mixed-pitch" :package "mixed-pitch" :local-repo "mixed-pitch")) "org-roam" ("2022-02-13 14:04:18" ("emacs" "dash" "org" "emacsql" "emacsql-sqlite" "magit-section") (:type git :flavor melpa :files (:defaults "extensions/*" "org-roam-pkg.el") :host github :repo "org-roam/org-roam" :package "org-roam" :local-repo "org-roam")) "org-roam-ui" ("2022-02-13 14:04:21" ("emacs" "org-roam" "simple-httpd" "websocket") (:type git :flavor melpa :files (:defaults "out" "org-roam-ui-pkg.el") :host github :repo "org-roam/org-roam-ui" :package "org-roam-ui" :local-repo "org-roam-ui")) "websocket" ("2022-02-13 14:04:20" ("cl-lib") (:type git :flavor melpa :host github :repo "ahyatt/emacs-websocket" :package "websocket" :local-repo "emacs-websocket")) "org-roam-bibtex" ("2022-02-13 14:04:24" ("emacs" "org-roam" "bibtex-completion") (:type git :flavor melpa :host github :repo "org-roam/org-roam-bibtex" :package "org-roam-bibtex" :local-repo "org-roam-bibtex")) "org-ref" ("2022-02-13 14:04:29" ("org" "dash" "s" "f" "htmlize" "hydra" "avy" "parsebib" "bibtex-completion" "citeproc") (:type git :flavor melpa :files (:defaults "org-ref.org" "org-ref.bib" "citeproc" "org-ref-pkg.el") :host github :repo "jkitchin/org-ref" :package "org-ref" :local-repo "org-ref")) "org-noter-pdftools" ("2022-02-13 14:04:30" ("emacs" "org" "pdf-tools" "org-pdftools" "org-noter") (:flavor melpa :files ("org-noter-pdftools.el" "org-noter-pdftools-pkg.el") :package "org-noter-pdftools" :local-repo "org-pdftools" :type git :repo "fuxialexander/org-pdftools" :host github)) "org-super-agenda" ("2022-02-13 14:04:33" ("emacs" "s" "dash" "org" "ht" "ts") (:type git :flavor melpa :host github :repo "alphapapa/org-super-agenda" :package "org-super-agenda" :local-repo "org-super-agenda")) "ts" ("2022-02-13 14:04:32" ("emacs" "dash" "s") (:type git :flavor melpa :host github :repo "alphapapa/ts.el" :package "ts" :local-repo "ts.el")) "ox-pandoc" ("2022-02-13 14:04:34" ("org" "emacs" "dash" "ht") (:type git :flavor melpa :host github :repo "emacsorphanage/ox-pandoc" :package "ox-pandoc" :local-repo "ox-pandoc")) "org-autolist" ("2022-02-13 14:04:35" nil (:type git :flavor melpa :host github :repo "calvinwyoung/org-autolist" :package "org-autolist" :local-repo "org-autolist")) "org-ref-prettify" ("2022-02-13 14:04:38" ("emacs" "org-ref" "bibtex-completion") (:type git :flavor melpa :host github :repo "alezost/org-ref-prettify.el" :package "org-ref-prettify" :local-repo "org-ref-prettify.el"))))

#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ())

#s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (org-elpa #s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 12 "auto-minor-mode" nil "gcmh" nil "explain-pause-mode" nil "straight" nil "use-package" nil "all-the-icons" nil "hide-mode-line" nil "highlight-numbers" nil "rainbow-delimiters" nil "restart-emacs" nil "better-jumper" nil "dtrt-indent" nil "helpful" nil "pcre2el" nil "smartparens" nil "ws-butler" nil "projectile" nil "project" nil "general" nil "which-key" nil "company" nil "company-dict" nil "helm" nil "helm-rg" nil "helm-c-yasnippet" nil "helm-company" nil "helm-describe-modes" nil "helm-projectile" nil "swiper-helm" nil "helm-org" nil "helm-descbinds" nil "swiper" nil "amx" nil "counsel-projectile" nil "ivy-rich" nil "wgrep" nil "doom-themes" nil "solaire-mode" nil "hl-todo" nil "hydra" nil "highlight-indent-guides" nil "minimap" nil "doom-modeline" nil "anzu" nil "evil-anzu" nil "evil-goggles" nil "treemacs" nil "git-gutter-fringe" nil "vi-tilde-fringe" nil "persp-mode" nil "evil" nil "evil-args" nil "evil-easymotion" nil "evil-embrace" nil "evil-escape" nil "evil-exchange" nil "evil-indent-plus" nil "evil-lion" nil "evil-nerd-commenter" nil "evil-numbers" nil "evil-snipe" nil "evil-surround" nil "evil-textobj-anyblock" nil "evil-traces" nil "evil-visualstar" nil "exato" nil "evil-quick-diff" nil "evil-collection" nil "yasnippet" nil "vimish-fold" nil "evil-vimish-fold" nil "auto-yasnippet" nil "doom-snippets" nil "adaptive-wrap" nil "diredfl" nil "dired-git-info" nil "diff-hl" nil "dired-rsync" nil "fd-dired" nil "undo-fu" nil "undo-fu-session" nil "browse-at-remote" nil "git-commit" nil "git-timemachine" nil "git-modes" nil "vterm" nil "flycheck" nil "flycheck-popup-tip" nil "flyspell-correct" nil "flyspell-lazy" nil "bibtex-completion" nil "ivy-bibtex" nil "helm-bibtex" nil "citeproc" nil "quickrun" nil "eros" nil "dumb-jump" nil "ivy-xref" nil "helm-xref" nil "request" nil "lsp-mode" nil "lsp-ui" nil "lsp-ivy" nil "helm-lsp" nil "magit" nil "magit-gitflow" nil "magit-todos" nil "code-review" nil "makefile-executor" nil "pdf-tools" nil "saveplace-pdf-view" nil "xclip" nil "evil-terminal-cursor-changer" nil "cmake-mode" nil "cuda-mode" nil "demangle-mode" nil "disaster" nil "modern-cpp-font-lock" nil "opencl-mode" nil "glsl-mode" nil "company-glsl" nil "irony" nil "irony-eldoc" nil "flycheck-irony" nil "company-irony" nil "company-irony-c-headers" nil "rtags" nil "highlight-quoted" nil "macrostep" nil "overseer" nil "elisp-def" nil "elisp-demos" nil "flycheck-package" nil "flycheck-cask" nil "buttercup" nil "android-mode" nil "groovy-mode" nil "lsp-java" nil "rjsx-mode" nil "typescript-mode" nil "js2-refactor" nil "npm-mode" nil "add-node-modules-path" nil "nodejs-repl" nil "skewer-mode" nil "tide" nil "xref-js2" nil "auctex" nil "latex-preview-pane" nil "evil-tex" nil "company-auctex" nil "company-reftex" nil "company-math" nil "markdown-mode" nil "markdown-toc" nil "edit-indirect" nil "evil-markdown" nil "org" (org :type git :repo "emacs-straight/org-mode" :local-repo "org" :depth 1 :pre-build (with-temp-file "org-version.el" (let ((version (with-temp-buffer (insert-file-contents (doom-path "lisp/org.el") nil 0 1024) (if (re-search-forward "^;; Version: \\([^
-]+\\)" nil t) (match-string-no-properties 1) "Unknown")))) (insert (format "(defun org-release () %S)
" version) (format "(defun org-git-version (&rest _) \"%s-??-%s\")
" version (cdr (doom-call-process "git" "rev-parse" "--short" "HEAD"))) "(provide 'org-version)
"))) :build t :files (:defaults "etc") :host github) "org-contrib" (org-contrib :type git :includes (ob-arduino ob-clojure-literate ob-csharp ob-eukleides ob-fomus ob-julia ob-mathematica ob-mathomatic ob-oz ob-php ob-redis ob-sclang ob-smiles ob-spice ob-stata ob-tcl ob-vbnet ol-bookmark ol-elisp-symbol ol-git-link ol-man ol-mew ol-notmuch ol-vm ol-wl org-annotate-file org-attach-embedded-images org-bibtex-extras org-checklist org-choose org-collector org-contacts org-contribdir org-depend org-effectiveness org-eldoc org-eval org-eval-light org-expiry org-interactive-query org-invoice org-learn org-license org-mac-iCal org-mac-link org-mairix org-notify org-panel org-passwords org-registry org-screen org-screenshot org-secretary org-static-mathjax org-sudoku orgtbl-sqlinsert org-toc org-track org-velocity org-wikinodes ox-bibtex ox-confluence ox-deck ox-extra ox-freemind ox-groff ox-koma-letter ox-rss ox-s5 ox-taskjuggler) :repo "emacsmirror/org-contrib" :files (:defaults "lisp/*.el") :host github) "avy" nil "htmlize" nil "org-yt" nil "ox-clip" nil "toc-org" nil "org-cliplink" nil "evil-org" nil "org-pdftools" nil "orgit" nil "ob-async" nil "psysh" nil "php-extras" nil "php-mode" nil "php-refactor-mode" nil "phpunit" nil "composer" nil "phpactor" nil "company-phpactor" nil "async" nil "pip-requirements" nil "anaconda-mode" nil "company-anaconda" nil "pipenv" nil "pyvenv" nil "nose" nil "python-pytest" nil "pyimport" nil "py-isort" nil "rustic" nil "racer" nil "company-shell" nil "calfw" nil "calfw-org" nil "calfw-cal" nil "calfw-ical" nil "org-gcal" nil "drag-stuff" nil "link-hint" nil "pkg-info" nil "epl" nil "seq" nil "parsebib" nil "biblio" nil "biblio-core" nil "queue" nil "string-inflection" nil "spinner" nil "magit-popup" nil "closql" nil "emacsql-sqlite" nil "emacsql" nil "a" nil "ghub" nil "treepy" nil "uuidgen" nil "deferred" nil "forge" nil "yaml" nil "emojify" nil "tablist" nil "json" nil "package-lint" nil "dap-mode" nil "bui" nil "lsp-treemacs" nil "js2-mode" nil "multiple-cursors" nil "simple-httpd" nil "math-symbol-lists" nil "php-runtime" nil "pythonic" nil "shut-up" nil "xterm-color" nil "rust-mode" nil "pos-tip" nil "request-deferred" nil "alert" nil "gntp" nil "log4e" nil "persist" nil "websocket" nil "ts" nil)) melpa #s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "auto-minor-mode" (auto-minor-mode :type git :flavor melpa :host github :repo "joewreschnig/auto-minor-mode") "gcmh" (gcmh :type git :flavor melpa :host gitlab :repo "koral/gcmh") "explain-pause-mode" nil "straight" nil "use-package" (use-package :type git :flavor melpa :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package") "all-the-icons" (all-the-icons :type git :flavor melpa :files (:defaults "data" "all-the-icons-pkg.el") :host github :repo "domtronn/all-the-icons.el") "hide-mode-line" (hide-mode-line :type git :flavor melpa :host github :repo "hlissner/emacs-hide-mode-line") "highlight-numbers" (highlight-numbers :type git :flavor melpa :host github :repo "Fanael/highlight-numbers") "rainbow-delimiters" (rainbow-delimiters :type git :flavor melpa :host github :repo "Fanael/rainbow-delimiters") "restart-emacs" (restart-emacs :type git :flavor melpa :host github :repo "iqbalansari/restart-emacs") "better-jumper" (better-jumper :type git :flavor melpa :host github :repo "gilbertw1/better-jumper") "dtrt-indent" (dtrt-indent :type git :flavor melpa :host github :repo "jscheid/dtrt-indent") "helpful" (helpful :type git :flavor melpa :host github :repo "Wilfred/helpful") "pcre2el" (pcre2el :type git :flavor melpa :files ("pcre2el.el" "pcre2el-pkg.el") :host github :repo "joddie/pcre2el") "smartparens" (smartparens :type git :flavor melpa :host github :repo "Fuco1/smartparens") "ws-butler" (ws-butler :type git :flavor melpa :host github :repo "hlissner/ws-butler") "projectile" (projectile :type git :flavor melpa :files ("projectile.el" "projectile-pkg.el") :host github :repo "bbatsov/projectile") "project" nil "general" (general :type git :flavor melpa :host github :repo "noctuid/general.el") "which-key" (which-key :type git :flavor melpa :host github :repo "justbur/emacs-which-key") "company" (company :type git :flavor melpa :files (:defaults "icons" ("images/small" "doc/images/small/*.png") "company-pkg.el") :host github :repo "company-mode/company-mode") "company-dict" (company-dict :type git :flavor melpa :host github :repo "hlissner/emacs-company-dict") "helm" (helm :type git :flavor melpa :files ("*.el" "emacs-helm.sh" (:exclude "helm-lib.el" "helm-source.el" "helm-multi-match.el" "helm-core.el") "helm-pkg.el") :host github :repo "emacs-helm/helm") "helm-rg" (helm-rg :type git :flavor melpa :host github :repo "cosmicexplorer/helm-rg") "helm-c-yasnippet" (helm-c-yasnippet :type git :flavor melpa :host github :repo "emacs-jp/helm-c-yasnippet") "helm-company" (helm-company :type git :flavor melpa :host github :repo "Sodel-the-Vociferous/helm-company") "helm-describe-modes" (helm-describe-modes :type git :flavor melpa :host github :repo "emacs-helm/helm-describe-modes") "helm-projectile" (helm-projectile :type git :flavor melpa :host github :repo "bbatsov/helm-projectile") "swiper-helm" (swiper-helm :type git :flavor melpa :host github :repo "abo-abo/swiper-helm") "helm-org" (helm-org :type git :flavor melpa :files ("helm-org.el" "helm-org-pkg.el") :host github :repo "emacs-helm/helm-org") "helm-descbinds" (helm-descbinds :type git :flavor melpa :host github :repo "emacs-helm/helm-descbinds") "swiper" (swiper :type git :flavor melpa :files ("swiper.el" "swiper-pkg.el") :host github :repo "abo-abo/swiper") "amx" (amx :type git :flavor melpa :host github :repo "DarwinAwardWinner/amx") "counsel-projectile" (counsel-projectile :type git :flavor melpa :host github :repo "ericdanan/counsel-projectile") "ivy-rich" (ivy-rich :type git :flavor melpa :files ("*.el" "ivy-rich-pkg.el") :host github :repo "Yevgnen/ivy-rich") "wgrep" (wgrep :type git :flavor melpa :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep") "doom-themes" (doom-themes :type git :flavor melpa :files (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el" "doom-themes-pkg.el") :host github :repo "doomemacs/themes") "solaire-mode" (solaire-mode :type git :flavor melpa :host github :repo "hlissner/emacs-solaire-mode") "hl-todo" (hl-todo :type git :flavor melpa :host github :repo "tarsius/hl-todo") "hydra" (hydra :type git :flavor melpa :files (:defaults (:exclude "lv.el") "hydra-pkg.el") :host github :repo "abo-abo/hydra") "highlight-indent-guides" (highlight-indent-guides :type git :flavor melpa :host github :repo "DarthFennec/highlight-indent-guides") "minimap" nil "doom-modeline" (doom-modeline :type git :flavor melpa :host github :repo "seagle0128/doom-modeline") "anzu" (anzu :type git :flavor melpa :host github :repo "emacsorphanage/anzu") "evil-anzu" (evil-anzu :type git :flavor melpa :host github :repo "emacsorphanage/evil-anzu") "evil-goggles" (evil-goggles :type git :flavor melpa :host github :repo "edkolev/evil-goggles") "treemacs" (treemacs :type git :flavor melpa :files (:defaults "Changelog.org" "icons" "src/elisp/treemacs*.el" "src/scripts/treemacs*.py" (:exclude "src/extra/*") "treemacs-pkg.el") :host github :repo "Alexander-Miller/treemacs") "git-gutter-fringe" (git-gutter-fringe :type git :flavor melpa :host github :repo "emacsorphanage/git-gutter-fringe") "vi-tilde-fringe" (vi-tilde-fringe :type git :flavor melpa :host github :repo "syl20bnr/vi-tilde-fringe") "persp-mode" (persp-mode :type git :flavor melpa :host github :repo "Bad-ptr/persp-mode.el") "evil" (evil :type git :flavor melpa :files (:defaults "doc/build/texinfo/evil.texi" (:exclude "evil-test-helpers.el") "evil-pkg.el") :host github :repo "emacs-evil/evil") "evil-args" (evil-args :type git :flavor melpa :host github :repo "wcsmith/evil-args") "evil-easymotion" (evil-easymotion :type git :flavor melpa :host github :repo "PythonNut/evil-easymotion") "evil-embrace" (evil-embrace :type git :flavor melpa :host github :repo "cute-jumper/evil-embrace.el") "evil-escape" (evil-escape :type git :flavor melpa :host github :repo "hlissner/evil-escape") "evil-exchange" (evil-exchange :type git :flavor melpa :host github :repo "Dewdrops/evil-exchange") "evil-indent-plus" (evil-indent-plus :type git :flavor melpa :host github :repo "TheBB/evil-indent-plus") "evil-lion" (evil-lion :type git :flavor melpa :files ("evil-lion.el" "evil-lion-pkg.el") :host github :repo "edkolev/evil-lion") "evil-nerd-commenter" (evil-nerd-commenter :type git :flavor melpa :host github :repo "redguardtoo/evil-nerd-commenter") "evil-numbers" (evil-numbers :type git :flavor melpa :host github :repo "juliapath/evil-numbers") "evil-snipe" (evil-snipe :type git :flavor melpa :host github :repo "hlissner/evil-snipe") "evil-surround" (evil-surround :type git :flavor melpa :host github :repo "emacs-evil/evil-surround") "evil-textobj-anyblock" (evil-textobj-anyblock :type git :flavor melpa :host github :repo "willghatch/evil-textobj-anyblock" :branch "fix-inner-block") "evil-traces" (evil-traces :type git :flavor melpa :host github :repo "mamapanda/evil-traces") "evil-visualstar" (evil-visualstar :type git :flavor melpa :host github :repo "bling/evil-visualstar") "exato" (exato :type git :flavor melpa :host github :repo "ninrod/exato") "evil-quick-diff" nil "evil-collection" (evil-collection :type git :flavor melpa :files (:defaults "modes" "evil-collection-pkg.el") :host github :repo "emacs-evil/evil-collection") "yasnippet" (yasnippet :type git :flavor melpa :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet") "vimish-fold" (vimish-fold :type git :flavor melpa :host github :repo "matsievskiysv/vimish-fold") "evil-vimish-fold" (evil-vimish-fold :type git :flavor melpa :host github :repo "alexmurray/evil-vimish-fold") "auto-yasnippet" (auto-yasnippet :type git :flavor melpa :host github :repo "abo-abo/auto-yasnippet") "doom-snippets" nil "adaptive-wrap" nil "diredfl" (diredfl :type git :flavor melpa :host github :repo "purcell/diredfl") "dired-git-info" nil "diff-hl" (diff-hl :type git :flavor melpa :host github :repo "dgutov/diff-hl") "dired-rsync" (dired-rsync :type git :flavor melpa :host github :repo "stsquad/dired-rsync") "fd-dired" (fd-dired :type git :flavor melpa :host github :repo "yqrashawn/fd-dired") "undo-fu" (undo-fu :type git :flavor melpa :host gitlab :repo "ideasman42/emacs-undo-fu") "undo-fu-session" (undo-fu-session :type git :flavor melpa :host gitlab :repo "ideasman42/emacs-undo-fu-session") "browse-at-remote" (browse-at-remote :type git :flavor melpa :host github :repo "rmuslimov/browse-at-remote") "git-commit" (git-commit :type git :flavor melpa :files ("lisp/git-commit.el" "lisp/git-commit-pkg.el" "git-commit-pkg.el") :host github :repo "magit/magit") "git-timemachine" (git-timemachine :type git :flavor melpa :host gitlab :repo "pidu/git-timemachine") "git-modes" (git-modes :type git :flavor melpa :host github :repo "magit/git-modes") "vterm" (vterm :type git :flavor melpa :files ("*" (:exclude ".dir-locals.el" ".gitignore" ".clang-format" ".travis.yml") "vterm-pkg.el") :host github :repo "akermu/emacs-libvterm") "flycheck" (flycheck :type git :flavor melpa :host github :repo "flycheck/flycheck") "flycheck-popup-tip" (flycheck-popup-tip :type git :flavor melpa :host github :repo "flycheck/flycheck-popup-tip") "flyspell-correct" (flyspell-correct :type git :flavor melpa :files ("flyspell-correct.el" "flyspell-correct-ido.el" "flyspell-correct-pkg.el") :host github :repo "d12frosted/flyspell-correct") "flyspell-lazy" (flyspell-lazy :type git :flavor melpa :host github :repo "rolandwalker/flyspell-lazy") "bibtex-completion" (bibtex-completion :type git :flavor melpa :files ("bibtex-completion.el" "bibtex-completion-pkg.el") :host github :repo "tmalsburg/helm-bibtex") "ivy-bibtex" (ivy-bibtex :type git :flavor melpa :files ("ivy-bibtex.el" "ivy-bibtex-pkg.el") :host github :repo "tmalsburg/helm-bibtex") "helm-bibtex" (helm-bibtex :type git :flavor melpa :files ("helm-bibtex.el" "helm-bibtex-pkg.el") :host github :repo "tmalsburg/helm-bibtex") "citeproc" (citeproc :type git :flavor melpa :host github :repo "andras-simonyi/citeproc-el") "quickrun" (quickrun :type git :flavor melpa :host github :repo "emacsorphanage/quickrun") "eros" (eros :type git :flavor melpa :host github :repo "xiongtx/eros") "dumb-jump" (dumb-jump :type git :flavor melpa :host github :repo "jacktasia/dumb-jump") "ivy-xref" (ivy-xref :type git :flavor melpa :host github :repo "alexmurray/ivy-xref") "helm-xref" (helm-xref :type git :flavor melpa :host github :repo "brotzeit/helm-xref") "request" (request :type git :flavor melpa :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request") "lsp-mode" (lsp-mode :type git :flavor melpa :files (:defaults "clients/*.el" "lsp-mode-pkg.el") :host github :repo "emacs-lsp/lsp-mode") "lsp-ui" (lsp-ui :type git :flavor melpa :files (:defaults "lsp-ui-doc.html" "resources" "lsp-ui-pkg.el") :host github :repo "emacs-lsp/lsp-ui") "lsp-ivy" (lsp-ivy :type git :flavor melpa :host github :repo "emacs-lsp/lsp-ivy") "helm-lsp" (helm-lsp :type git :flavor melpa :host github :repo "emacs-lsp/helm-lsp") "magit" (magit :type git :flavor melpa :files ("lisp/magit" "lisp/magit*.el" "lisp/git-rebase.el" "docs/magit.texi" "docs/AUTHORS.md" "LICENSE" (:exclude "lisp/magit-libgit.el" "lisp/magit-libgit-pkg.el" "lisp/magit-section.el" "lisp/magit-section-pkg.el") "Documentation/magit.texi" "Documentation/AUTHORS.md" "magit-pkg.el") :host github :repo "magit/magit") "magit-gitflow" (magit-gitflow :type git :flavor melpa :host github :repo "jtatarik/magit-gitflow") "magit-todos" (magit-todos :type git :flavor melpa :host github :repo "alphapapa/magit-todos") "code-review" (code-review :type git :flavor melpa :host github :repo "wandersoncferreira/code-review" :files ("graphql" "code-review*.el")) "makefile-executor" (makefile-executor :type git :flavor melpa :host github :repo "thiderman/makefile-executor.el") "pdf-tools" (pdf-tools :type git :flavor melpa :files ("lisp/*.el" "README" ("build" "Makefile") ("build" "server") (:exclude "lisp/tablist.el" "lisp/tablist-filter.el") "pdf-tools-pkg.el") :host github :repo "vedang/pdf-tools") "saveplace-pdf-view" (saveplace-pdf-view :type git :flavor melpa :host github :repo "nicolaisingh/saveplace-pdf-view") "xclip" nil "evil-terminal-cursor-changer" (evil-terminal-cursor-changer :type git :flavor melpa :host github :repo "kisaragi-hiu/evil-terminal-cursor-changer") "cmake-mode" (cmake-mode :type git :flavor melpa :files (:defaults "*") :repo "emacsmirror/cmake-mode" :host github) "cuda-mode" (cuda-mode :type git :flavor melpa :host github :repo "chachi/cuda-mode") "demangle-mode" (demangle-mode :type git :flavor melpa :host github :repo "liblit/demangle-mode") "disaster" (disaster :type git :flavor melpa :files ("disaster.el" "disaster-pkg.el") :host github :repo "jart/disaster") "modern-cpp-font-lock" (modern-cpp-font-lock :type git :flavor melpa :host github :repo "ludwigpacifici/modern-cpp-font-lock") "opencl-mode" (opencl-mode :type git :flavor melpa :host github :repo "salmanebah/opencl-mode") "glsl-mode" (glsl-mode :type git :flavor melpa :host github :repo "jimhourihan/glsl-mode") "company-glsl" (company-glsl :type git :flavor melpa :host github :repo "Kaali/company-glsl") "irony" (irony :type git :flavor melpa :files ("*.el" "server" "irony-pkg.el") :host github :repo "Sarcasm/irony-mode") "irony-eldoc" (irony-eldoc :type git :flavor melpa :host github :repo "ikirill/irony-eldoc") "flycheck-irony" (flycheck-irony :type git :flavor melpa :host github :repo "Sarcasm/flycheck-irony") "company-irony" (company-irony :type git :flavor melpa :host github :repo "Sarcasm/company-irony") "company-irony-c-headers" (company-irony-c-headers :type git :flavor melpa :host github :repo "hotpxl/company-irony-c-headers") "rtags" (rtags :type git :flavor melpa :files ("src/rtags.el" "rtags-pkg.el") :host github :repo "Andersbakken/rtags") "highlight-quoted" (highlight-quoted :type git :flavor melpa :host github :repo "Fanael/highlight-quoted") "macrostep" (macrostep :type git :flavor melpa :host github :repo "joddie/macrostep") "overseer" (overseer :type git :flavor melpa :host github :repo "tonini/overseer.el") "elisp-def" (elisp-def :type git :flavor melpa :host github :repo "Wilfred/elisp-def") "elisp-demos" (elisp-demos :type git :flavor melpa :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos") "flycheck-package" (flycheck-package :type git :flavor melpa :host github :repo "purcell/flycheck-package") "flycheck-cask" (flycheck-cask :type git :flavor melpa :host github :repo "flycheck/flycheck-cask") "buttercup" (buttercup :type git :flavor melpa :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup") "android-mode" (android-mode :type git :flavor melpa :host github :repo "remvee/android-mode") "groovy-mode" (groovy-mode :type git :flavor melpa :files ("*groovy*.el" "groovy-mode-pkg.el") :host github :repo "Groovy-Emacs-Modes/groovy-emacs-modes") "lsp-java" (lsp-java :type git :flavor melpa :files (:defaults "icons" "lsp-java-pkg.el") :host github :repo "emacs-lsp/lsp-java") "rjsx-mode" (rjsx-mode :type git :flavor melpa :host github :repo "felipeochoa/rjsx-mode") "typescript-mode" (typescript-mode :type git :flavor melpa :host github :repo "emacs-typescript/typescript.el") "js2-refactor" (js2-refactor :type git :flavor melpa :host github :repo "js-emacs/js2-refactor.el") "npm-mode" (npm-mode :type git :flavor melpa :host github :repo "mojochao/npm-mode") "add-node-modules-path" (add-node-modules-path :type git :flavor melpa :host github :repo "codesuki/add-node-modules-path") "nodejs-repl" (nodejs-repl :type git :flavor melpa :host github :repo "abicky/nodejs-repl.el") "skewer-mode" (skewer-mode :type git :flavor melpa :files ("*.html" "*.js" "*.el" "skewer-mode-pkg.el") :host github :repo "skeeto/skewer-mode") "tide" (tide :type git :flavor melpa :files (:defaults "tsserver" "tide-pkg.el") :host github :repo "ananthakumaran/tide") "xref-js2" (xref-js2 :type git :flavor melpa :host github :repo "js-emacs/xref-js2") "auctex" nil "latex-preview-pane" (latex-preview-pane :type git :flavor melpa :files ("*.el" "*.txt" "latex-preview-pane-pkg.el") :host github :repo "jsinglet/latex-preview-pane") "evil-tex" (evil-tex :type git :flavor melpa :host github :repo "iyefrat/evil-tex") "company-auctex" (company-auctex :type git :flavor melpa :host github :repo "alexeyr/company-auctex") "company-reftex" (company-reftex :type git :flavor melpa :host github :repo "TheBB/company-reftex") "company-math" (company-math :type git :flavor melpa :host github :repo "vspinu/company-math") "markdown-mode" (markdown-mode :type git :flavor melpa :host github :repo "jrblevin/markdown-mode") "markdown-toc" (markdown-toc :type git :flavor melpa :host github :repo "ardumont/markdown-toc") "edit-indirect" (edit-indirect :type git :flavor melpa :host github :repo "Fanael/edit-indirect") "evil-markdown" nil "avy" (avy :type git :flavor melpa :host github :repo "abo-abo/avy") "htmlize" (htmlize :type git :flavor melpa :host github :repo "hniksic/emacs-htmlize") "org-yt" nil "ox-clip" (ox-clip :type git :flavor melpa :host github :repo "jkitchin/ox-clip") "toc-org" (toc-org :type git :flavor melpa :host github :repo "snosov1/toc-org") "org-cliplink" (org-cliplink :type git :flavor melpa :host github :repo "rexim/org-cliplink") "evil-org" (evil-org :type git :flavor melpa :host github :repo "hlissner/evil-org-mode") "org-pdftools" (org-pdftools :type git :flavor melpa :files ("org-pdftools.el" "org-pdftools-pkg.el") :host github :repo "fuxialexander/org-pdftools") "orgit" (orgit :type git :flavor melpa :host github :repo "magit/orgit") "ob-async" (ob-async :type git :flavor melpa :host github :repo "astahlman/ob-async") "psysh" (psysh :type git :flavor melpa :host github :repo "emacs-php/psysh.el") "php-extras" nil "php-mode" (php-mode :type git :flavor melpa :files (:defaults "lisp/*.el" "php-mode-pkg.el") :host github :repo "emacs-php/php-mode") "php-refactor-mode" (php-refactor-mode :type git :flavor melpa :host github :repo "keelerm84/php-refactor-mode.el") "phpunit" (phpunit :type git :flavor melpa :host github :repo "nlamirault/phpunit.el") "composer" (composer :type git :flavor melpa :host github :repo "emacs-php/composer.el") "phpactor" (phpactor :type git :flavor melpa :files ("phpactor.el" "composer.json" "composer.lock" "phpactor-pkg.el") :host github :repo "emacs-php/phpactor.el") "company-phpactor" (company-phpactor :type git :flavor melpa :files ("company-phpactor.el" "company-phpactor-pkg.el") :host github :repo "emacs-php/phpactor.el") "async" (async :type git :flavor melpa :host github :repo "jwiegley/emacs-async") "pip-requirements" (pip-requirements :type git :flavor melpa :host github :repo "Wilfred/pip-requirements.el") "anaconda-mode" (anaconda-mode :type git :flavor melpa :files (:defaults "anaconda-mode.py" "anaconda-mode-pkg.el") :host github :repo "pythonic-emacs/anaconda-mode") "company-anaconda" (company-anaconda :type git :flavor melpa :host github :repo "pythonic-emacs/company-anaconda") "pipenv" (pipenv :type git :flavor melpa :host github :repo "pwalsh/pipenv.el") "pyvenv" (pyvenv :type git :flavor melpa :host github :repo "jorgenschaefer/pyvenv") "nose" nil "python-pytest" (python-pytest :type git :flavor melpa :host github :repo "wbolster/emacs-python-pytest") "pyimport" (pyimport :type git :flavor melpa :host github :repo "Wilfred/pyimport") "py-isort" (py-isort :type git :flavor melpa :host github :repo "paetzke/py-isort.el") "rustic" (rustic :type git :flavor melpa :host github :repo "brotzeit/rustic") "racer" (racer :type git :flavor melpa :host github :repo "racer-rust/emacs-racer") "company-shell" (company-shell :type git :flavor melpa :files ("company-shell.el" "company-shell-pkg.el") :host github :repo "Alexander-Miller/company-shell") "calfw" (calfw :type git :flavor melpa :files ("calfw.el" "calfw-pkg.el") :host github :repo "kiwanami/emacs-calfw") "calfw-org" (calfw-org :type git :flavor melpa :files ("calfw-org.el" "calfw-org-pkg.el") :host github :repo "kiwanami/emacs-calfw") "calfw-cal" (calfw-cal :type git :flavor melpa :files ("calfw-cal.el" "calfw-cal-pkg.el") :host github :repo "kiwanami/emacs-calfw") "calfw-ical" (calfw-ical :type git :flavor melpa :files ("calfw-ical.el" "calfw-ical-pkg.el") :host github :repo "kiwanami/emacs-calfw") "org-gcal" (org-gcal :type git :flavor melpa :host github :repo "kidd/org-gcal.el") "drag-stuff" (drag-stuff :type git :flavor melpa :host github :repo "rejeep/drag-stuff.el") "link-hint" (link-hint :type git :flavor melpa :host github :repo "noctuid/link-hint.el") "pkg-info" (pkg-info :type git :flavor melpa :host github :repo "emacsorphanage/pkg-info") "epl" (epl :type git :flavor melpa :host github :repo "cask/epl") "seq" nil "parsebib" (parsebib :type git :flavor melpa :host github :repo "joostkremers/parsebib") "biblio" (biblio :type git :flavor melpa :files (:defaults (:exclude "biblio-core.el") "biblio-pkg.el") :host github :repo "cpitclaudel/biblio.el") "biblio-core" (biblio-core :type git :flavor melpa :files ("biblio-core.el" "biblio-core-pkg.el") :host github :repo "cpitclaudel/biblio.el") "queue" nil "string-inflection" (string-inflection :type git :flavor melpa :host github :repo "akicho8/string-inflection") "spinner" nil "magit-popup" (magit-popup :type git :flavor melpa :host github :repo "magit/magit-popup") "closql" (closql :type git :flavor melpa :host github :repo "emacscollective/closql") "emacsql-sqlite" (emacsql-sqlite :type git :flavor melpa :files ("emacsql-sqlite.el" "sqlite" "emacsql-sqlite-pkg.el") :host github :repo "skeeto/emacsql") "emacsql" (emacsql :type git :flavor melpa :files ("emacsql.el" "emacsql-compiler.el" "emacsql-system.el" "README.md" "emacsql-pkg.el") :host github :repo "skeeto/emacsql") "a" (a :type git :flavor melpa :host github :repo "plexus/a.el") "ghub" (ghub :type git :flavor melpa :files ("lisp/*.el" "docs/ghub.texi" "*.el" "*.texi" "ghub-pkg.el") :host github :repo "magit/ghub") "treepy" (treepy :type git :flavor melpa :host github :repo "volrath/treepy.el") "uuidgen" (uuidgen :type git :flavor melpa :host github :repo "kanru/uuidgen-el") "deferred" (deferred :type git :flavor melpa :files ("deferred.el" "deferred-pkg.el") :host github :repo "kiwanami/emacs-deferred") "forge" (forge :type git :flavor melpa :files ("lisp/*.el" "docs/forge.texi" "forge-pkg.el") :host github :repo "magit/forge") "yaml" (yaml :type git :flavor melpa :host github :repo "zkry/yaml.el") "emojify" (emojify :type git :flavor melpa :files (:defaults "data" "images" "emojify-pkg.el") :host github :repo "iqbalansari/emacs-emojify") "tablist" (tablist :type git :flavor melpa :host github :repo "politza/tablist") "json" nil "package-lint" (package-lint :type git :flavor melpa :files (:defaults "data" (:exclude "*flymake.el") "package-lint-pkg.el") :host github :repo "purcell/package-lint") "dap-mode" (dap-mode :type git :flavor melpa :files (:defaults "icons" "dap-mode-pkg.el") :host github :repo "emacs-lsp/dap-mode") "bui" (bui :type git :flavor melpa :host github :repo "alezost/bui.el") "lsp-treemacs" (lsp-treemacs :type git :flavor melpa :files (:defaults "icons" "lsp-treemacs-pkg.el") :host github :repo "emacs-lsp/lsp-treemacs") "js2-mode" (js2-mode :type git :flavor melpa :host github :repo "mooz/js2-mode") "multiple-cursors" (multiple-cursors :type git :flavor melpa :host github :repo "magnars/multiple-cursors.el") "simple-httpd" (simple-httpd :type git :flavor melpa :host github :repo "skeeto/emacs-web-server") "math-symbol-lists" (math-symbol-lists :type git :flavor melpa :host github :repo "vspinu/math-symbol-lists") "php-runtime" (php-runtime :type git :flavor melpa :host github :repo "emacs-php/php-runtime.el") "pythonic" (pythonic :type git :flavor melpa :host github :repo "pythonic-emacs/pythonic") "shut-up" (shut-up :type git :flavor melpa :host github :repo "cask/shut-up") "xterm-color" (xterm-color :type git :flavor melpa :host github :repo "atomontage/xterm-color") "rust-mode" (rust-mode :type git :flavor melpa :host github :repo "rust-lang/rust-mode") "pos-tip" (pos-tip :type git :flavor melpa :host github :repo "pitkali/pos-tip") "request-deferred" (request-deferred :type git :flavor melpa :files ("request-deferred.el" "request-deferred-pkg.el") :host github :repo "tkf/emacs-request") "alert" (alert :type git :flavor melpa :host github :repo "jwiegley/alert") "gntp" (gntp :type git :flavor melpa :host github :repo "tekai/gntp.el") "log4e" (log4e :type git :flavor melpa :host github :repo "aki2o/log4e") "persist" nil "websocket" (websocket :type git :flavor melpa :host github :repo "ahyatt/emacs-websocket") "ts" (ts :type git :flavor melpa :host github :repo "alphapapa/ts.el"))) gnu-elpa-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 3 "explain-pause-mode" nil "straight" nil "project" (project :type git :host github :repo "emacs-straight/project" :files ("*" (:exclude ".git"))) "minimap" (minimap :type git :host github :repo "emacs-straight/minimap" :files ("*" (:exclude ".git"))) "evil-quick-diff" nil "doom-snippets" nil "adaptive-wrap" (adaptive-wrap :type git :host github :repo "emacs-straight/adaptive-wrap" :files ("*" (:exclude ".git"))) "dired-git-info" (dired-git-info :type git :host github :repo "emacs-straight/dired-git-info" :files ("*" (:exclude ".git"))) "xclip" (xclip :type git :host github :repo "emacs-straight/xclip" :files ("*" (:exclude ".git"))) "auctex" (auctex :type git :host github :repo "emacs-straight/auctex" :files ("*" (:exclude ".git"))) "evil-markdown" nil "org-yt" nil "php-extras" nil "nose" nil "seq" nil "queue" (queue :type git :host github :repo "emacs-straight/queue" :files ("*" (:exclude ".git"))) "spinner" (spinner :type git :host github :repo "emacs-straight/spinner" :files ("*" (:exclude ".git"))) "json" nil "persist" (persist :type git :host github :repo "emacs-straight/persist" :files ("*" (:exclude ".git"))))) el-get #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 1 "explain-pause-mode" nil "straight" nil "evil-quick-diff" nil "doom-snippets" nil "evil-markdown" nil "org-yt" nil "php-extras" nil "nose" nil "seq" nil "json" nil)) emacsmirror-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "explain-pause-mode" (explain-pause-mode :type git :host github :repo "lastquestion/explain-pause-mode") "straight" (straight :type git :host github :repo "raxod502/straight.el" :branch "develop" :local-repo "straight.el" :files ("straight*.el")) "evil-quick-diff" nil "doom-snippets" nil "evil-markdown" nil "org-yt" nil "php-extras" nil "nose" (nose :type git :host github :repo "emacsattic/nose") "seq" nil "json" nil))))

("org-elpa" "melpa" "gnu-elpa-mirror" "el-get" "emacsmirror-mirror" "straight" "use-package" "auto-minor-mode" "gcmh" "explain-pause-mode" "all-the-icons" "hide-mode-line" "highlight-numbers" "rainbow-delimiters" "restart-emacs" "better-jumper" "dtrt-indent" "helpful" "pcre2el" "smartparens" "ws-butler" "projectile" "project" "general" "which-key" "company" "company-dict" "helm" "helm-rg" "helm-c-yasnippet" "helm-company" "helm-describe-modes" "helm-projectile" "swiper-helm" "helm-org" "helm-descbinds" "swiper" "ivy" "ivy-hydra" "ivy-avy" "counsel" "amx" "counsel-projectile" "ivy-rich" "wgrep" "doom-themes" "solaire-mode" "hl-todo" "hydra" "highlight-indent-guides" "minimap" "doom-modeline" "anzu" "evil-anzu" "evil-goggles" "treemacs" "treemacs-evil" "treemacs-projectile" "treemacs-magit" "treemacs-persp" "git-gutter-fringe" "vi-tilde-fringe" "persp-mode" "evil" "evil-args" "evil-easymotion" "evil-embrace" "evil-escape" "evil-exchange" "evil-indent-plus" "evil-lion" "evil-nerd-commenter" "evil-numbers" "evil-snipe" "evil-surround" "evil-textobj-anyblock" "evil-traces" "evil-visualstar" "exato" "evil-quick-diff" "evil-collection" "yasnippet" "vimish-fold" "evil-vimish-fold" "auto-yasnippet" "doom-snippets" "adaptive-wrap" "diredfl" "dired-git-info" "diff-hl" "dired-rsync" "fd-dired" "undo-fu" "undo-fu-session" "browse-at-remote" "git-commit" "git-timemachine" "git-modes" "vterm" "flycheck" "flycheck-popup-tip" "flyspell-correct" "flyspell-correct-ivy" "flyspell-lazy" "bibtex-completion" "ivy-bibtex" "helm-bibtex" "citeproc" "quickrun" "eros" "dumb-jump" "ivy-xref" "helm-xref" "request" "lsp-mode" "lsp-ui" "lsp-ivy" "helm-lsp" "magit" "magit-gitflow" "magit-todos" "code-review" "makefile-executor" "pdf-tools" "saveplace-pdf-view" "xclip" "evil-terminal-cursor-changer" "cmake-mode" "cuda-mode" "demangle-mode" "disaster" "modern-cpp-font-lock" "opencl-mode" "glsl-mode" "company-glsl" "irony" "irony-eldoc" "flycheck-irony" "company-irony" "company-irony-c-headers" "rtags" "ivy-rtags" "helm-rtags" "highlight-quoted" "macrostep" "overseer" "elisp-def" "elisp-demos" "flycheck-package" "flycheck-cask" "buttercup" "android-mode" "groovy-mode" "lsp-java" "rjsx-mode" "typescript-mode" "js2-refactor" "npm-mode" "add-node-modules-path" "nodejs-repl" "skewer-mode" "tide" "xref-js2" "auctex" "latex-preview-pane" "evil-tex" "company-auctex" "company-reftex" "company-math" "markdown-mode" "markdown-toc" "edit-indirect" "evil-markdown" "org" "org-contrib" "avy" "htmlize" "org-yt" "ox-clip" "toc-org" "org-cliplink" "evil-org" "org-pdftools" "orgit" "ob-async" "psysh" "php-extras" "php-mode" "php-refactor-mode" "phpunit" "composer" "phpactor" "company-phpactor" "async" "pip-requirements" "anaconda-mode" "company-anaconda" "pipenv" "pyvenv" "nose" "python-pytest" "pyimport" "py-isort" "rustic" "racer" "company-shell" "calfw" "calfw-org" "calfw-cal" "calfw-ical" "org-gcal" "drag-stuff" "link-hint" "org-superstar" "olivetti" "evil-better-visual-line" "org-variable-pitch" "mixed-pitch" "org-roam" "org-roam-ui" "org-roam-bibtex" "org-ref" "org-noter" "org-noter-pdftools" "org-super-agenda" "ox-pandoc" "org-autolist" "org-ref-prettify" "emacs" "bind-key" "parent-mode" "dash" "s" "f" "elisp-refs" "cl-lib" "xref" "popup" "helm-core" "lv" "shrink-path" "goto-chg" "ace-window" "pfuture" "ht" "cfrs" "posframe" "transient" "with-editor" "magit-section" "git-gutter" "fringe-helper" "embrace" "expand-region" "annalist" "pkg-info" "epl" "let-alist" "seq" "parsebib" "biblio" "biblio-core" "queue" "string-inflection" "spinner" "magit-popup" "closql" "emacsql-sqlite" "emacsql" "a" "ghub" "treepy" "uuidgen" "deferred" "forge" "yaml" "emojify" "nadvice" "tablist" "json" "package-lint" "dap-mode" "bui" "lsp-treemacs" "js2-mode" "multiple-cursors" "simple-httpd" "math-symbol-lists" "php-runtime" "pythonic" "shut-up" "xterm-color" "rust-mode" "pos-tip" "request-deferred" "alert" "gntp" "log4e" "persist" "websocket" "ts")

t

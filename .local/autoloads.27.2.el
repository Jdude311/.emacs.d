;; -*- lexical-binding: t; coding: utf-8; no-native-compile: t -*-
;; This file is autogenerated by 'doom sync', DO NOT EDIT IT!!
(unless (equal doom-version "21.12.0-alpha") (signal 'doom-error (list "The installed version of Doom has changed since last 'doom sync' ran" "Run 'doom sync' to bring Doom up to speed")))(set 'doom-modules '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ((:completion . company) (:flags nil :path "/home/jadench/.emacs.d/modules/completion/company/") (:completion . helm) (:flags nil :path "/home/jadench/.emacs.d/modules/completion/helm/") (:completion . ivy) (:flags nil :path "/home/jadench/.emacs.d/modules/completion/ivy/") (:ui . doom) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/doom/") (:ui . doom-dashboard) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/doom-dashboard/") (:ui . doom-quit) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/doom-quit/") (:ui . hl-todo) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/hl-todo/") (:ui . hydra) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/hydra/") (:ui . indent-guides) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/indent-guides/") (:ui . ligatures) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/ligatures/") (:ui . minimap) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/minimap/") (:ui . modeline) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/modeline/") (:ui . ophints) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/ophints/") (:ui . popup) (:flags (+defaults) :path "/home/jadench/.emacs.d/modules/ui/popup/") (:ui . treemacs) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/treemacs/") (:ui . vc-gutter) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/vc-gutter/") (:ui . vi-tilde-fringe) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/vi-tilde-fringe/") (:ui . workspaces) (:flags nil :path "/home/jadench/.emacs.d/modules/ui/workspaces/") (:editor . evil) (:flags (+everywhere) :path "/home/jadench/.emacs.d/modules/editor/evil/") (:editor . file-templates) (:flags nil :path "/home/jadench/.emacs.d/modules/editor/file-templates/") (:editor . fold) (:flags nil :path "/home/jadench/.emacs.d/modules/editor/fold/") (:editor . snippets) (:flags nil :path "/home/jadench/.emacs.d/modules/editor/snippets/") (:editor . word-wrap) (:flags nil :path "/home/jadench/.emacs.d/modules/editor/word-wrap/") (:emacs . dired) (:flags nil :path "/home/jadench/.emacs.d/modules/emacs/dired/") (:emacs . electric) (:flags nil :path "/home/jadench/.emacs.d/modules/emacs/electric/") (:emacs . undo) (:flags nil :path "/home/jadench/.emacs.d/modules/emacs/undo/") (:emacs . vc) (:flags nil :path "/home/jadench/.emacs.d/modules/emacs/vc/") (:term . vterm) (:flags nil :path "/home/jadench/.emacs.d/modules/term/vterm/") (:checkers . syntax) (:flags nil :path "/home/jadench/.emacs.d/modules/checkers/syntax/") (:checkers . spell) (:flags (+flyspell) :path "/home/jadench/.emacs.d/modules/checkers/spell/") (:tools . biblio) (:flags nil :path "/home/jadench/.emacs.d/modules/tools/biblio/") (:tools . eval) (:flags (+overlay) :path "/home/jadench/.emacs.d/modules/tools/eval/") (:tools . lookup) (:flags nil :path "/home/jadench/.emacs.d/modules/tools/lookup/") (:tools . lsp) (:flags nil :path "/home/jadench/.emacs.d/modules/tools/lsp/") (:tools . magit) (:flags nil :path "/home/jadench/.emacs.d/modules/tools/magit/") (:tools . make) (:flags nil :path "/home/jadench/.emacs.d/modules/tools/make/") (:tools . pdf) (:flags nil :path "/home/jadench/.emacs.d/modules/tools/pdf/") (:os . tty) (:flags nil :path "/home/jadench/.emacs.d/modules/os/tty/") (:lang . cc) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/cc/") (:lang . emacs-lisp) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/emacs-lisp/") (:lang . java) (:flags (+lsp) :path "/home/jadench/.emacs.d/modules/lang/java/") (:lang . javascript) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/javascript/") (:lang . latex) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/latex/") (:lang . markdown) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/markdown/") (:lang . org) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/org/") (:lang . php) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/php/") (:lang . python) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/python/") (:lang . rust) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/rust/") (:lang . sh) (:flags nil :path "/home/jadench/.emacs.d/modules/lang/sh/") (:app . calendar) (:flags nil :path "/home/jadench/.emacs.d/modules/app/calendar/") (:config . literate) (:flags nil :path "/home/jadench/.emacs.d/modules/config/literate/") (:config . default) (:flags (+bindings +smartparens) :path "/home/jadench/.emacs.d/modules/config/default/"))))(set 'doom-disabled-packages 'nil)(set 'load-path '("/home/jadench/.emacs.d/.local/straight/build-27.2/ts" "/home/jadench/.emacs.d/.local/straight/build-27.2/websocket" "/home/jadench/.emacs.d/.local/straight/build-27.2/persist" "/home/jadench/.emacs.d/.local/straight/build-27.2/log4e" "/home/jadench/.emacs.d/.local/straight/build-27.2/gntp" "/home/jadench/.emacs.d/.local/straight/build-27.2/alert" "/home/jadench/.emacs.d/.local/straight/build-27.2/request-deferred" "/home/jadench/.emacs.d/.local/straight/build-27.2/pos-tip" "/home/jadench/.emacs.d/.local/straight/build-27.2/rust-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/xterm-color" "/home/jadench/.emacs.d/.local/straight/build-27.2/shut-up" "/home/jadench/.emacs.d/.local/straight/build-27.2/pythonic" "/home/jadench/.emacs.d/.local/straight/build-27.2/php-runtime" "/home/jadench/.emacs.d/.local/straight/build-27.2/math-symbol-lists" "/home/jadench/.emacs.d/.local/straight/build-27.2/simple-httpd" "/home/jadench/.emacs.d/.local/straight/build-27.2/multiple-cursors" "/home/jadench/.emacs.d/.local/straight/build-27.2/js2-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-treemacs" "/home/jadench/.emacs.d/.local/straight/build-27.2/bui" "/home/jadench/.emacs.d/.local/straight/build-27.2/dap-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/package-lint" "/home/jadench/.emacs.d/.local/straight/build-27.2/tablist" "/home/jadench/.emacs.d/.local/straight/build-27.2/emojify" "/home/jadench/.emacs.d/.local/straight/build-27.2/yaml" "/home/jadench/.emacs.d/.local/straight/build-27.2/forge" "/home/jadench/.emacs.d/.local/straight/build-27.2/deferred" "/home/jadench/.emacs.d/.local/straight/build-27.2/uuidgen" "/home/jadench/.emacs.d/.local/straight/build-27.2/treepy" "/home/jadench/.emacs.d/.local/straight/build-27.2/ghub" "/home/jadench/.emacs.d/.local/straight/build-27.2/a" "/home/jadench/.emacs.d/.local/straight/build-27.2/emacsql" "/home/jadench/.emacs.d/.local/straight/build-27.2/emacsql-sqlite" "/home/jadench/.emacs.d/.local/straight/build-27.2/closql" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit-popup" "/home/jadench/.emacs.d/.local/straight/build-27.2/spinner" "/home/jadench/.emacs.d/.local/straight/build-27.2/string-inflection" "/home/jadench/.emacs.d/.local/straight/build-27.2/queue" "/home/jadench/.emacs.d/.local/straight/build-27.2/biblio-core" "/home/jadench/.emacs.d/.local/straight/build-27.2/biblio" "/home/jadench/.emacs.d/.local/straight/build-27.2/parsebib" "/home/jadench/.emacs.d/.local/straight/build-27.2/epl" "/home/jadench/.emacs.d/.local/straight/build-27.2/pkg-info" "/home/jadench/.emacs.d/.local/straight/build-27.2/annalist" "/home/jadench/.emacs.d/.local/straight/build-27.2/expand-region" "/home/jadench/.emacs.d/.local/straight/build-27.2/embrace" "/home/jadench/.emacs.d/.local/straight/build-27.2/fringe-helper" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-gutter" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit-section" "/home/jadench/.emacs.d/.local/straight/build-27.2/with-editor" "/home/jadench/.emacs.d/.local/straight/build-27.2/transient" "/home/jadench/.emacs.d/.local/straight/build-27.2/posframe" "/home/jadench/.emacs.d/.local/straight/build-27.2/cfrs" "/home/jadench/.emacs.d/.local/straight/build-27.2/ht" "/home/jadench/.emacs.d/.local/straight/build-27.2/pfuture" "/home/jadench/.emacs.d/.local/straight/build-27.2/ace-window" "/home/jadench/.emacs.d/.local/straight/build-27.2/goto-chg" "/home/jadench/.emacs.d/.local/straight/build-27.2/shrink-path" "/home/jadench/.emacs.d/.local/straight/build-27.2/lv" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-core" "/home/jadench/.emacs.d/.local/straight/build-27.2/popup" "/home/jadench/.emacs.d/.local/straight/build-27.2/xref" "/home/jadench/.emacs.d/.local/straight/build-27.2/elisp-refs" "/home/jadench/.emacs.d/.local/straight/build-27.2/f" "/home/jadench/.emacs.d/.local/straight/build-27.2/s" "/home/jadench/.emacs.d/.local/straight/build-27.2/dash" "/home/jadench/.emacs.d/.local/straight/build-27.2/parent-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/bind-key" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-ref-prettify" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-autolist" "/home/jadench/.emacs.d/.local/straight/build-27.2/ox-pandoc" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-super-agenda" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-noter-pdftools" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-noter" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-ref" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-roam-bibtex" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-roam-ui" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-roam" "/home/jadench/.emacs.d/.local/straight/build-27.2/mixed-pitch" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-variable-pitch" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-better-visual-line" "/home/jadench/.emacs.d/.local/straight/build-27.2/olivetti" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-superstar" "/home/jadench/.emacs.d/.local/straight/build-27.2/link-hint" "/home/jadench/.emacs.d/.local/straight/build-27.2/drag-stuff" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-gcal" "/home/jadench/.emacs.d/.local/straight/build-27.2/calfw-ical" "/home/jadench/.emacs.d/.local/straight/build-27.2/calfw-cal" "/home/jadench/.emacs.d/.local/straight/build-27.2/calfw-org" "/home/jadench/.emacs.d/.local/straight/build-27.2/calfw" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-shell" "/home/jadench/.emacs.d/.local/straight/build-27.2/racer" "/home/jadench/.emacs.d/.local/straight/build-27.2/rustic" "/home/jadench/.emacs.d/.local/straight/build-27.2/py-isort" "/home/jadench/.emacs.d/.local/straight/build-27.2/pyimport" "/home/jadench/.emacs.d/.local/straight/build-27.2/python-pytest" "/home/jadench/.emacs.d/.local/straight/build-27.2/nose" "/home/jadench/.emacs.d/.local/straight/build-27.2/pyvenv" "/home/jadench/.emacs.d/.local/straight/build-27.2/pipenv" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-anaconda" "/home/jadench/.emacs.d/.local/straight/build-27.2/anaconda-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/pip-requirements" "/home/jadench/.emacs.d/.local/straight/build-27.2/async" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-phpactor" "/home/jadench/.emacs.d/.local/straight/build-27.2/phpactor" "/home/jadench/.emacs.d/.local/straight/build-27.2/composer" "/home/jadench/.emacs.d/.local/straight/build-27.2/phpunit" "/home/jadench/.emacs.d/.local/straight/build-27.2/php-refactor-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/php-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/php-extras" "/home/jadench/.emacs.d/.local/straight/build-27.2/psysh" "/home/jadench/.emacs.d/.local/straight/build-27.2/ob-async" "/home/jadench/.emacs.d/.local/straight/build-27.2/orgit" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-pdftools" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-org" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-cliplink" "/home/jadench/.emacs.d/.local/straight/build-27.2/toc-org" "/home/jadench/.emacs.d/.local/straight/build-27.2/ox-clip" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-yt" "/home/jadench/.emacs.d/.local/straight/build-27.2/htmlize" "/home/jadench/.emacs.d/.local/straight/build-27.2/avy" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-contrib" "/home/jadench/.emacs.d/.local/straight/build-27.2/org" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-markdown" "/home/jadench/.emacs.d/.local/straight/build-27.2/edit-indirect" "/home/jadench/.emacs.d/.local/straight/build-27.2/markdown-toc" "/home/jadench/.emacs.d/.local/straight/build-27.2/markdown-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-math" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-reftex" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-auctex" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-tex" "/home/jadench/.emacs.d/.local/straight/build-27.2/latex-preview-pane" "/home/jadench/.emacs.d/.local/straight/build-27.2/auctex/" "/home/jadench/.emacs.d/.local/straight/build-27.2/auctex" "/home/jadench/.emacs.d/.local/straight/build-27.2/xref-js2" "/home/jadench/.emacs.d/.local/straight/build-27.2/tide" "/home/jadench/.emacs.d/.local/straight/build-27.2/skewer-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/nodejs-repl" "/home/jadench/.emacs.d/.local/straight/build-27.2/add-node-modules-path" "/home/jadench/.emacs.d/.local/straight/build-27.2/npm-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/js2-refactor" "/home/jadench/.emacs.d/.local/straight/build-27.2/typescript-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/rjsx-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-java" "/home/jadench/.emacs.d/.local/straight/build-27.2/groovy-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/android-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/buttercup" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck-cask" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck-package" "/home/jadench/.emacs.d/.local/straight/build-27.2/elisp-demos" "/home/jadench/.emacs.d/.local/straight/build-27.2/elisp-def" "/home/jadench/.emacs.d/.local/straight/build-27.2/overseer" "/home/jadench/.emacs.d/.local/straight/build-27.2/macrostep" "/home/jadench/.emacs.d/.local/straight/build-27.2/highlight-quoted" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-rtags" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-rtags" "/home/jadench/.emacs.d/.local/straight/build-27.2/rtags" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-irony-c-headers" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-irony" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck-irony" "/home/jadench/.emacs.d/.local/straight/build-27.2/irony-eldoc" "/home/jadench/.emacs.d/.local/straight/build-27.2/irony" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-glsl" "/home/jadench/.emacs.d/.local/straight/build-27.2/glsl-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/opencl-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/modern-cpp-font-lock" "/home/jadench/.emacs.d/.local/straight/build-27.2/disaster" "/home/jadench/.emacs.d/.local/straight/build-27.2/demangle-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/cuda-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/cmake-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-terminal-cursor-changer" "/home/jadench/.emacs.d/.local/straight/build-27.2/xclip" "/home/jadench/.emacs.d/.local/straight/build-27.2/saveplace-pdf-view" "/home/jadench/.emacs.d/.local/straight/build-27.2/pdf-tools" "/home/jadench/.emacs.d/.local/straight/build-27.2/makefile-executor" "/home/jadench/.emacs.d/.local/straight/build-27.2/code-review" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit-todos" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit-gitflow" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-lsp" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-ivy" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-ui" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/request" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-xref" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-xref" "/home/jadench/.emacs.d/.local/straight/build-27.2/dumb-jump" "/home/jadench/.emacs.d/.local/straight/build-27.2/eros" "/home/jadench/.emacs.d/.local/straight/build-27.2/quickrun" "/home/jadench/.emacs.d/.local/straight/build-27.2/citeproc" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-bibtex" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-bibtex" "/home/jadench/.emacs.d/.local/straight/build-27.2/bibtex-completion" "/home/jadench/.emacs.d/.local/straight/build-27.2/flyspell-lazy" "/home/jadench/.emacs.d/.local/straight/build-27.2/flyspell-correct-ivy" "/home/jadench/.emacs.d/.local/straight/build-27.2/flyspell-correct" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck-popup-tip" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck" "/home/jadench/.emacs.d/.local/straight/build-27.2/vterm" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-modes" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-timemachine" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-commit" "/home/jadench/.emacs.d/.local/straight/build-27.2/browse-at-remote" "/home/jadench/.emacs.d/.local/straight/build-27.2/undo-fu-session" "/home/jadench/.emacs.d/.local/straight/build-27.2/undo-fu" "/home/jadench/.emacs.d/.local/straight/build-27.2/fd-dired" "/home/jadench/.emacs.d/.local/straight/build-27.2/dired-rsync" "/home/jadench/.emacs.d/.local/straight/build-27.2/diff-hl" "/home/jadench/.emacs.d/.local/straight/build-27.2/dired-git-info" "/home/jadench/.emacs.d/.local/straight/build-27.2/diredfl" "/home/jadench/.emacs.d/.local/straight/build-27.2/adaptive-wrap" "/home/jadench/.emacs.d/.local/straight/build-27.2/doom-snippets" "/home/jadench/.emacs.d/.local/straight/build-27.2/auto-yasnippet" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-vimish-fold" "/home/jadench/.emacs.d/.local/straight/build-27.2/vimish-fold" "/home/jadench/.emacs.d/.local/straight/build-27.2/yasnippet" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-collection" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-quick-diff" "/home/jadench/.emacs.d/.local/straight/build-27.2/exato" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-visualstar" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-traces" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-textobj-anyblock" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-surround" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-snipe" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-numbers" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-nerd-commenter" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-lion" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-indent-plus" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-exchange" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-escape" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-embrace" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-easymotion" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-args" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil" "/home/jadench/.emacs.d/.local/straight/build-27.2/persp-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/vi-tilde-fringe" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-gutter-fringe" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs-persp" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs-magit" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs-projectile" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs-evil" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-goggles" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-anzu" "/home/jadench/.emacs.d/.local/straight/build-27.2/anzu" "/home/jadench/.emacs.d/.local/straight/build-27.2/doom-modeline" "/home/jadench/.emacs.d/.local/straight/build-27.2/minimap" "/home/jadench/.emacs.d/.local/straight/build-27.2/highlight-indent-guides" "/home/jadench/.emacs.d/.local/straight/build-27.2/hydra" "/home/jadench/.emacs.d/.local/straight/build-27.2/hl-todo" "/home/jadench/.emacs.d/.local/straight/build-27.2/solaire-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/doom-themes" "/home/jadench/.emacs.d/.local/straight/build-27.2/wgrep" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-rich" "/home/jadench/.emacs.d/.local/straight/build-27.2/counsel-projectile" "/home/jadench/.emacs.d/.local/straight/build-27.2/amx" "/home/jadench/.emacs.d/.local/straight/build-27.2/counsel" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-avy" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-hydra" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy" "/home/jadench/.emacs.d/.local/straight/build-27.2/swiper" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-descbinds" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-org" "/home/jadench/.emacs.d/.local/straight/build-27.2/swiper-helm" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-projectile" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-describe-modes" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-company" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-c-yasnippet" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-rg" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-dict" "/home/jadench/.emacs.d/.local/straight/build-27.2/company" "/home/jadench/.emacs.d/.local/straight/build-27.2/which-key" "/home/jadench/.emacs.d/.local/straight/build-27.2/general" "/home/jadench/.emacs.d/.local/straight/build-27.2/project" "/home/jadench/.emacs.d/.local/straight/build-27.2/projectile" "/home/jadench/.emacs.d/.local/straight/build-27.2/ws-butler" "/home/jadench/.emacs.d/.local/straight/build-27.2/smartparens" "/home/jadench/.emacs.d/.local/straight/build-27.2/pcre2el" "/home/jadench/.emacs.d/.local/straight/build-27.2/helpful" "/home/jadench/.emacs.d/.local/straight/build-27.2/dtrt-indent" "/home/jadench/.emacs.d/.local/straight/build-27.2/better-jumper" "/home/jadench/.emacs.d/.local/straight/build-27.2/restart-emacs" "/home/jadench/.emacs.d/.local/straight/build-27.2/rainbow-delimiters" "/home/jadench/.emacs.d/.local/straight/build-27.2/highlight-numbers" "/home/jadench/.emacs.d/.local/straight/build-27.2/hide-mode-line" "/home/jadench/.emacs.d/.local/straight/build-27.2/all-the-icons" "/home/jadench/.emacs.d/.local/straight/build-27.2/use-package" "/home/jadench/.emacs.d/.local/straight/build-27.2/straight" "/home/jadench/.emacs.d/.local/straight/build-27.2/explain-pause-mode" "/home/jadench/.emacs.d/.local/straight/build-27.2/gcmh" "/home/jadench/.emacs.d/.local/straight/build-27.2/auto-minor-mode" "/home/jadench/.emacs.d/.local/straight/repos/use-package" "/home/jadench/.emacs.d/.local/straight/repos/straight.el" "/home/jadench/.emacs.d/core/" "/usr/share/emacs/27.2/site-lisp" "/usr/share/emacs/site-lisp" "/usr/share/emacs/site-lisp/use-package" "/usr/share/emacs/27.2/lisp" "/usr/share/emacs/27.2/lisp/vc" "/usr/share/emacs/27.2/lisp/url" "/usr/share/emacs/27.2/lisp/textmodes" "/usr/share/emacs/27.2/lisp/progmodes" "/usr/share/emacs/27.2/lisp/play" "/usr/share/emacs/27.2/lisp/org" "/usr/share/emacs/27.2/lisp/nxml" "/usr/share/emacs/27.2/lisp/net" "/usr/share/emacs/27.2/lisp/mh-e" "/usr/share/emacs/27.2/lisp/mail" "/usr/share/emacs/27.2/lisp/leim" "/usr/share/emacs/27.2/lisp/language" "/usr/share/emacs/27.2/lisp/international" "/usr/share/emacs/27.2/lisp/image" "/usr/share/emacs/27.2/lisp/gnus" "/usr/share/emacs/27.2/lisp/eshell" "/usr/share/emacs/27.2/lisp/erc" "/usr/share/emacs/27.2/lisp/emulation" "/usr/share/emacs/27.2/lisp/emacs-lisp" "/usr/share/emacs/27.2/lisp/cedet" "/usr/share/emacs/27.2/lisp/calendar" "/usr/share/emacs/27.2/lisp/calc" "/usr/share/emacs/27.2/lisp/obsolete" "/usr/share/emacs/27.2/lisp/vc" "/usr/share/emacs/27.2/lisp/url" "/usr/share/emacs/27.2/lisp/textmodes" "/usr/share/emacs/27.2/lisp/progmodes" "/usr/share/emacs/27.2/lisp/play" "/usr/share/emacs/27.2/lisp/org" "/usr/share/emacs/27.2/lisp/nxml" "/usr/share/emacs/27.2/lisp/net" "/usr/share/emacs/27.2/lisp/mh-e" "/usr/share/emacs/27.2/lisp/mail" "/usr/share/emacs/27.2/lisp/leim" "/usr/share/emacs/27.2/lisp/language" "/usr/share/emacs/27.2/lisp/international" "/usr/share/emacs/27.2/lisp/image" "/usr/share/emacs/27.2/lisp/gnus" "/usr/share/emacs/27.2/lisp/eshell" "/usr/share/emacs/27.2/lisp/erc" "/usr/share/emacs/27.2/lisp/emulation" "/usr/share/emacs/27.2/lisp/emacs-lisp" "/usr/share/emacs/27.2/lisp/cedet" "/usr/share/emacs/27.2/lisp/calendar" "/usr/share/emacs/27.2/lisp/calc" "/usr/share/emacs/27.2/lisp/obsolete"))(set 'auto-mode-alist '(("\\.rs\\'" . rust-mode) ("\\.rs\\'" . rustic-mode) ("requirements\\.in" . pip-requirements-mode) ("requirements[^z-a]*\\.txt\\'" . pip-requirements-mode) ("\\.pip\\'" . pip-requirements-mode) ("\\.\\(?:php[s345]?\\|phtml\\)\\'" . php-mode-maybe) ("\\.\\(?:php\\.inc\\|stub\\)\\'" . php-mode) ("/\\.php_cs\\(?:\\.dist\\)?\\'" . php-mode) ("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode) ("\\.hva\\'" . latex-mode) ("\\.ts\\'" . typescript-mode) ("\\.jsx\\'" . rjsx-mode) ("Jenkinsfile" . groovy-mode) ("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode) ("\\.glsl\\'" . glsl-mode) ("\\.geom\\'" . glsl-mode) ("\\.frag\\'" . glsl-mode) ("\\.vert\\'" . glsl-mode) ("\\.cuh\\'" . cuda-mode) ("\\.cu\\'" . cuda-mode) ("\\.cmake\\'" . cmake-mode) ("CMakeLists\\.txt\\'" . cmake-mode) ("/git-rebase-todo\\'" . git-rebase-mode) ("/git/ignore\\'" . gitignore-mode) ("/info/exclude\\'" . gitignore-mode) ("/\\.gitignore\\'" . gitignore-mode) ("/etc/gitconfig\\'" . gitconfig-mode) ("/\\.gitmodules\\'" . gitconfig-mode) ("/git/config\\'" . gitconfig-mode) ("/modules/.*/config\\'" . gitconfig-mode) ("/\\.git/config\\'" . gitconfig-mode) ("/\\.gitconfig\\'" . gitconfig-mode) ("/git/attributes\\'" . gitattributes-mode) ("/info/attributes\\'" . gitattributes-mode) ("/\\.gitattributes\\'" . gitattributes-mode) ("\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'" nil epa-file) ("\\.elc\\'" . elisp-byte-code-mode) ("\\.zst\\'" nil jka-compr) ("\\.dz\\'" nil jka-compr) ("\\.xz\\'" nil jka-compr) ("\\.lzma\\'" nil jka-compr) ("\\.lz\\'" nil jka-compr) ("\\.g?z\\'" nil jka-compr) ("\\.bz2\\'" nil jka-compr) ("\\.Z\\'" nil jka-compr) ("\\.vr[hi]?\\'" . vera-mode) ("\\(?:\\.\\(?:rbw?\\|ru\\|rake\\|thor\\|jbuilder\\|rabl\\|gemspec\\|podspec\\)\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Puppet\\|Berks\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . ruby-mode) ("\\.re?st\\'" . rst-mode) ("\\.py[iw]?\\'" . python-mode) ("\\.m\\'" . octave-maybe-mode) ("\\.less\\'" . less-css-mode) ("\\.scss\\'" . scss-mode) ("\\.awk\\'" . awk-mode) ("\\.\\(u?lpc\\|pike\\|pmod\\(\\.in\\)?\\)\\'" . pike-mode) ("\\.idl\\'" . idl-mode) ("\\.java\\'" . java-mode) ("\\.m\\'" . objc-mode) ("\\.ii\\'" . c++-mode) ("\\.i\\'" . c-mode) ("\\.lex\\'" . c-mode) ("\\.y\\(acc\\)?\\'" . c-mode) ("\\.h\\'" . c-or-c++-mode) ("\\.c\\'" . c-mode) ("\\.\\(CC?\\|HH?\\)\\'" . c++-mode) ("\\.[ch]\\(pp\\|xx\\|\\+\\+\\)\\'" . c++-mode) ("\\.\\(cc\\|hh\\)\\'" . c++-mode) ("\\.\\(bat\\|cmd\\)\\'" . bat-mode) ("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs]\\.dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) ("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\(acinclude\\|aclocal\\|acsite\\)\\.m4\\'" . autoconf-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js[mx]?\\'" . javascript-mode) ("\\.har\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?va?h?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("/\\.\\(authinfo\\|netrc\\)\\'" . authinfo-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("/\\.redshift\\.conf\\'" . conf-windows-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:asound\\|enigma\\|fetchmail\\|gltron\\|gtk\\|hxplayer\\|mairix\\|mbsync\\|msmtp\\|net\\|neverball\\|nvidia-settings-\\|offlineimap\\|qt/.+\\|realplayer\\|reportbug\\|rtorrent\\.\\|screen\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|mpdconf\\|notmuch-config\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode) ("\\.art\\'" . image-mode) ("\\.avs\\'" . image-mode) ("\\.bmp\\'" . image-mode) ("\\.cmyk\\'" . image-mode) ("\\.cmyka\\'" . image-mode) ("\\.crw\\'" . image-mode) ("\\.dcr\\'" . image-mode) ("\\.dcx\\'" . image-mode) ("\\.dng\\'" . image-mode) ("\\.dpx\\'" . image-mode) ("\\.fax\\'" . image-mode) ("\\.hrz\\'" . image-mode) ("\\.icb\\'" . image-mode) ("\\.icc\\'" . image-mode) ("\\.icm\\'" . image-mode) ("\\.ico\\'" . image-mode) ("\\.icon\\'" . image-mode) ("\\.jbg\\'" . image-mode) ("\\.jbig\\'" . image-mode) ("\\.jng\\'" . image-mode) ("\\.jnx\\'" . image-mode) ("\\.miff\\'" . image-mode) ("\\.mng\\'" . image-mode) ("\\.mvg\\'" . image-mode) ("\\.otb\\'" . image-mode) ("\\.p7\\'" . image-mode) ("\\.pcx\\'" . image-mode) ("\\.pdb\\'" . image-mode) ("\\.pfa\\'" . image-mode) ("\\.pfb\\'" . image-mode) ("\\.picon\\'" . image-mode) ("\\.pict\\'" . image-mode) ("\\.rgb\\'" . image-mode) ("\\.rgba\\'" . image-mode) ("\\.tga\\'" . image-mode) ("\\.wbmp\\'" . image-mode) ("\\.webp\\'" . image-mode) ("\\.wmf\\'" . image-mode) ("\\.wpg\\'" . image-mode) ("\\.xcf\\'" . image-mode) ("\\.xmp\\'" . image-mode) ("\\.xwd\\'" . image-mode) ("\\.yuv\\'" . image-mode) ("\\.tgz\\'" . tar-mode) ("\\.tbz2?\\'" . tar-mode) ("\\.txz\\'" . tar-mode) ("\\.tzst\\'" . tar-mode) ("\\.drv\\'" . latex-mode)))(set 'interpreter-mode-alist '(("php\\(?:-?[34578]\\(?:\\.[0-9]+\\)*\\)?" . php-mode) ("groovy" . groovy-mode) ("ruby1.8" . ruby-mode) ("ruby1.9" . ruby-mode) ("jruby" . ruby-mode) ("rbx" . ruby-mode) ("ruby" . ruby-mode) ("python[0-9.]*" . python-mode) ("rhino" . js-mode) ("gjs" . js-mode) ("nodejs" . js-mode) ("node" . js-mode) ("gawk" . awk-mode) ("nawk" . awk-mode) ("mawk" . awk-mode) ("awk" . awk-mode) ("pike" . pike-mode) ("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode)))(set 'Info-directory-list '("/home/jadench/.emacs.d/.local/straight/build-27.2/org-ref-prettify/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-autolist/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ox-pandoc/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-super-agenda/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ts/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-noter-pdftools/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-ref/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-roam-bibtex/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-roam-ui/" "/home/jadench/.emacs.d/.local/straight/build-27.2/websocket/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-roam/" "/home/jadench/.emacs.d/.local/straight/build-27.2/mixed-pitch/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-variable-pitch/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-better-visual-line/" "/home/jadench/.emacs.d/.local/straight/build-27.2/olivetti/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-superstar/" "/home/jadench/.emacs.d/.local/straight/build-27.2/link-hint/" "/home/jadench/.emacs.d/.local/straight/build-27.2/drag-stuff/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-gcal/" "/home/jadench/.emacs.d/.local/straight/build-27.2/persist/" "/home/jadench/.emacs.d/.local/straight/build-27.2/alert/" "/home/jadench/.emacs.d/.local/straight/build-27.2/log4e/" "/home/jadench/.emacs.d/.local/straight/build-27.2/gntp/" "/home/jadench/.emacs.d/.local/straight/build-27.2/request-deferred/" "/home/jadench/.emacs.d/.local/straight/build-27.2/calfw-ical/" "/home/jadench/.emacs.d/.local/straight/build-27.2/calfw-cal/" "/home/jadench/.emacs.d/.local/straight/build-27.2/calfw-org/" "/home/jadench/.emacs.d/.local/straight/build-27.2/calfw/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-shell/" "/home/jadench/.emacs.d/.local/straight/build-27.2/racer/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pos-tip/" "/home/jadench/.emacs.d/.local/straight/build-27.2/rust-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/rustic/" "/home/jadench/.emacs.d/.local/straight/build-27.2/xterm-color/" "/home/jadench/.emacs.d/.local/straight/build-27.2/py-isort/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pyimport/" "/home/jadench/.emacs.d/.local/straight/build-27.2/shut-up/" "/home/jadench/.emacs.d/.local/straight/build-27.2/python-pytest/" "/home/jadench/.emacs.d/.local/straight/build-27.2/nose/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pipenv/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pyvenv/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-anaconda/" "/home/jadench/.emacs.d/.local/straight/build-27.2/anaconda-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pythonic/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pip-requirements/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-phpactor/" "/home/jadench/.emacs.d/.local/straight/build-27.2/phpactor/" "/home/jadench/.emacs.d/.local/straight/build-27.2/composer/" "/home/jadench/.emacs.d/.local/straight/build-27.2/phpunit/" "/home/jadench/.emacs.d/.local/straight/build-27.2/php-refactor-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/php-extras/" "/home/jadench/.emacs.d/.local/straight/build-27.2/php-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/psysh/" "/home/jadench/.emacs.d/.local/straight/build-27.2/php-runtime/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ob-async/" "/home/jadench/.emacs.d/.local/straight/build-27.2/orgit/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-pdftools/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-noter/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-org/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-cliplink/" "/home/jadench/.emacs.d/.local/straight/build-27.2/toc-org/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ox-clip/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-yt/" "/home/jadench/.emacs.d/.local/straight/build-27.2/htmlize/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org-contrib/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-markdown/" "/home/jadench/.emacs.d/.local/straight/build-27.2/edit-indirect/" "/home/jadench/.emacs.d/.local/straight/build-27.2/markdown-toc/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-math/" "/home/jadench/.emacs.d/.local/straight/build-27.2/math-symbol-lists/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-reftex/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-auctex/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-tex/" "/home/jadench/.emacs.d/.local/straight/build-27.2/latex-preview-pane/" "/home/jadench/.emacs.d/.local/straight/build-27.2/auctex/" "/home/jadench/.emacs.d/.local/straight/build-27.2/xref-js2/" "/home/jadench/.emacs.d/.local/straight/build-27.2/tide/" "/home/jadench/.emacs.d/.local/straight/build-27.2/skewer-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/simple-httpd/" "/home/jadench/.emacs.d/.local/straight/build-27.2/nodejs-repl/" "/home/jadench/.emacs.d/.local/straight/build-27.2/add-node-modules-path/" "/home/jadench/.emacs.d/.local/straight/build-27.2/npm-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/js2-refactor/" "/home/jadench/.emacs.d/.local/straight/build-27.2/multiple-cursors/" "/home/jadench/.emacs.d/.local/straight/build-27.2/typescript-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/rjsx-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/js2-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-java/" "/home/jadench/.emacs.d/.local/straight/build-27.2/dap-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-treemacs/" "/home/jadench/.emacs.d/.local/straight/build-27.2/bui/" "/home/jadench/.emacs.d/.local/straight/build-27.2/groovy-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/android-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/buttercup/" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck-cask/" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck-package/" "/home/jadench/.emacs.d/.local/straight/build-27.2/package-lint/" "/home/jadench/.emacs.d/.local/straight/build-27.2/elisp-demos/" "/home/jadench/.emacs.d/.local/straight/build-27.2/elisp-def/" "/home/jadench/.emacs.d/.local/straight/build-27.2/overseer/" "/home/jadench/.emacs.d/.local/straight/build-27.2/macrostep/" "/home/jadench/.emacs.d/.local/straight/build-27.2/highlight-quoted/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-rtags/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-rtags/" "/home/jadench/.emacs.d/.local/straight/build-27.2/rtags/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-irony-c-headers/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-irony/" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck-irony/" "/home/jadench/.emacs.d/.local/straight/build-27.2/irony-eldoc/" "/home/jadench/.emacs.d/.local/straight/build-27.2/irony/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-glsl/" "/home/jadench/.emacs.d/.local/straight/build-27.2/glsl-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/opencl-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/modern-cpp-font-lock/" "/home/jadench/.emacs.d/.local/straight/build-27.2/disaster/" "/home/jadench/.emacs.d/.local/straight/build-27.2/demangle-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/cuda-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/cmake-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-terminal-cursor-changer/" "/home/jadench/.emacs.d/.local/straight/build-27.2/xclip/" "/home/jadench/.emacs.d/.local/straight/build-27.2/saveplace-pdf-view/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pdf-tools/" "/home/jadench/.emacs.d/.local/straight/build-27.2/tablist/" "/home/jadench/.emacs.d/.local/straight/build-27.2/makefile-executor/" "/home/jadench/.emacs.d/.local/straight/build-27.2/code-review/" "/home/jadench/.emacs.d/.local/straight/build-27.2/emojify/" "/home/jadench/.emacs.d/.local/straight/build-27.2/forge/" "/home/jadench/.emacs.d/.local/straight/build-27.2/yaml/" "/home/jadench/.emacs.d/.local/straight/build-27.2/deferred/" "/home/jadench/.emacs.d/.local/straight/build-27.2/uuidgen/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ghub/" "/home/jadench/.emacs.d/.local/straight/build-27.2/treepy/" "/home/jadench/.emacs.d/.local/straight/build-27.2/a/" "/home/jadench/.emacs.d/.local/straight/build-27.2/closql/" "/home/jadench/.emacs.d/.local/straight/build-27.2/emacsql-sqlite/" "/home/jadench/.emacs.d/.local/straight/build-27.2/emacsql/" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit-todos/" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit-gitflow/" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit-popup/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-lsp/" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-ivy/" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-ui/" "/home/jadench/.emacs.d/.local/straight/build-27.2/lsp-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/markdown-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/spinner/" "/home/jadench/.emacs.d/.local/straight/build-27.2/request/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-xref/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-xref/" "/home/jadench/.emacs.d/.local/straight/build-27.2/dumb-jump/" "/home/jadench/.emacs.d/.local/straight/build-27.2/eros/" "/home/jadench/.emacs.d/.local/straight/build-27.2/quickrun/" "/home/jadench/.emacs.d/.local/straight/build-27.2/citeproc/" "/home/jadench/.emacs.d/.local/straight/build-27.2/org/" "/home/jadench/.emacs.d/.local/straight/build-27.2/string-inflection/" "/home/jadench/.emacs.d/.local/straight/build-27.2/queue/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-bibtex/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-bibtex/" "/home/jadench/.emacs.d/.local/straight/build-27.2/bibtex-completion/" "/home/jadench/.emacs.d/.local/straight/build-27.2/biblio/" "/home/jadench/.emacs.d/.local/straight/build-27.2/biblio-core/" "/home/jadench/.emacs.d/.local/straight/build-27.2/parsebib/" "/home/jadench/.emacs.d/.local/straight/build-27.2/flyspell-lazy/" "/home/jadench/.emacs.d/.local/straight/build-27.2/flyspell-correct-ivy/" "/home/jadench/.emacs.d/.local/straight/build-27.2/flyspell-correct/" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck-popup-tip/" "/home/jadench/.emacs.d/.local/straight/build-27.2/flycheck/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pkg-info/" "/home/jadench/.emacs.d/.local/straight/build-27.2/epl/" "/home/jadench/.emacs.d/.local/straight/build-27.2/vterm/" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-modes/" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-timemachine/" "/home/jadench/.emacs.d/.local/straight/build-27.2/browse-at-remote/" "/home/jadench/.emacs.d/.local/straight/build-27.2/undo-fu-session/" "/home/jadench/.emacs.d/.local/straight/build-27.2/undo-fu/" "/home/jadench/.emacs.d/.local/straight/build-27.2/fd-dired/" "/home/jadench/.emacs.d/.local/straight/build-27.2/dired-rsync/" "/home/jadench/.emacs.d/.local/straight/build-27.2/diff-hl/" "/home/jadench/.emacs.d/.local/straight/build-27.2/dired-git-info/" "/home/jadench/.emacs.d/.local/straight/build-27.2/diredfl/" "/home/jadench/.emacs.d/.local/straight/build-27.2/adaptive-wrap/" "/home/jadench/.emacs.d/.local/straight/build-27.2/doom-snippets/" "/home/jadench/.emacs.d/.local/straight/build-27.2/auto-yasnippet/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-vimish-fold/" "/home/jadench/.emacs.d/.local/straight/build-27.2/vimish-fold/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-collection/" "/home/jadench/.emacs.d/.local/straight/build-27.2/annalist/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-quick-diff/" "/home/jadench/.emacs.d/.local/straight/build-27.2/exato/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-visualstar/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-traces/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-textobj-anyblock/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-snipe/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-numbers/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-nerd-commenter/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-lion/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-indent-plus/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-exchange/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-escape/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-embrace/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-surround/" "/home/jadench/.emacs.d/.local/straight/build-27.2/embrace/" "/home/jadench/.emacs.d/.local/straight/build-27.2/expand-region/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-easymotion/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-args/" "/home/jadench/.emacs.d/.local/straight/build-27.2/vi-tilde-fringe/" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-gutter-fringe/" "/home/jadench/.emacs.d/.local/straight/build-27.2/fringe-helper/" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-gutter/" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs-persp/" "/home/jadench/.emacs.d/.local/straight/build-27.2/persp-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs-magit/" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit/" "/home/jadench/.emacs.d/.local/straight/build-27.2/magit-section/" "/home/jadench/.emacs.d/.local/straight/build-27.2/git-commit/" "/home/jadench/.emacs.d/.local/straight/build-27.2/with-editor/" "/home/jadench/.emacs.d/.local/straight/build-27.2/transient/" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs-projectile/" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs-evil/" "/home/jadench/.emacs.d/.local/straight/build-27.2/treemacs/" "/home/jadench/.emacs.d/.local/straight/build-27.2/cfrs/" "/home/jadench/.emacs.d/.local/straight/build-27.2/posframe/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ht/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pfuture/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ace-window/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-goggles/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil-anzu/" "/home/jadench/.emacs.d/.local/straight/build-27.2/evil/" "/home/jadench/.emacs.d/.local/straight/build-27.2/goto-chg/" "/home/jadench/.emacs.d/.local/straight/build-27.2/anzu/" "/home/jadench/.emacs.d/.local/straight/build-27.2/doom-modeline/" "/home/jadench/.emacs.d/.local/straight/build-27.2/shrink-path/" "/home/jadench/.emacs.d/.local/straight/build-27.2/minimap/" "/home/jadench/.emacs.d/.local/straight/build-27.2/highlight-indent-guides/" "/home/jadench/.emacs.d/.local/straight/build-27.2/hl-todo/" "/home/jadench/.emacs.d/.local/straight/build-27.2/solaire-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/doom-themes/" "/home/jadench/.emacs.d/.local/straight/build-27.2/wgrep/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-rich/" "/home/jadench/.emacs.d/.local/straight/build-27.2/counsel-projectile/" "/home/jadench/.emacs.d/.local/straight/build-27.2/amx/" "/home/jadench/.emacs.d/.local/straight/build-27.2/counsel/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-avy/" "/home/jadench/.emacs.d/.local/straight/build-27.2/avy/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy-hydra/" "/home/jadench/.emacs.d/.local/straight/build-27.2/hydra/" "/home/jadench/.emacs.d/.local/straight/build-27.2/lv/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-descbinds/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-org/" "/home/jadench/.emacs.d/.local/straight/build-27.2/swiper-helm/" "/home/jadench/.emacs.d/.local/straight/build-27.2/swiper/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ivy/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-projectile/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-describe-modes/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-company/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-c-yasnippet/" "/home/jadench/.emacs.d/.local/straight/build-27.2/yasnippet/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-rg/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helm-core/" "/home/jadench/.emacs.d/.local/straight/build-27.2/popup/" "/home/jadench/.emacs.d/.local/straight/build-27.2/async/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company-dict/" "/home/jadench/.emacs.d/.local/straight/build-27.2/company/" "/home/jadench/.emacs.d/.local/straight/build-27.2/which-key/" "/home/jadench/.emacs.d/.local/straight/build-27.2/general/" "/home/jadench/.emacs.d/.local/straight/build-27.2/project/" "/home/jadench/.emacs.d/.local/straight/build-27.2/xref/" "/home/jadench/.emacs.d/.local/straight/build-27.2/projectile/" "/home/jadench/.emacs.d/.local/straight/build-27.2/ws-butler/" "/home/jadench/.emacs.d/.local/straight/build-27.2/smartparens/" "/home/jadench/.emacs.d/.local/straight/build-27.2/pcre2el/" "/home/jadench/.emacs.d/.local/straight/build-27.2/helpful/" "/home/jadench/.emacs.d/.local/straight/build-27.2/elisp-refs/" "/home/jadench/.emacs.d/.local/straight/build-27.2/f/" "/home/jadench/.emacs.d/.local/straight/build-27.2/s/" "/home/jadench/.emacs.d/.local/straight/build-27.2/dash/" "/home/jadench/.emacs.d/.local/straight/build-27.2/dtrt-indent/" "/home/jadench/.emacs.d/.local/straight/build-27.2/better-jumper/" "/home/jadench/.emacs.d/.local/straight/build-27.2/restart-emacs/" "/home/jadench/.emacs.d/.local/straight/build-27.2/rainbow-delimiters/" "/home/jadench/.emacs.d/.local/straight/build-27.2/highlight-numbers/" "/home/jadench/.emacs.d/.local/straight/build-27.2/parent-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/hide-mode-line/" "/home/jadench/.emacs.d/.local/straight/build-27.2/all-the-icons/" "/home/jadench/.emacs.d/.local/straight/build-27.2/explain-pause-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/gcmh/" "/home/jadench/.emacs.d/.local/straight/build-27.2/auto-minor-mode/" "/home/jadench/.emacs.d/.local/straight/build-27.2/use-package/" "/home/jadench/.emacs.d/.local/straight/build-27.2/bind-key/" "/home/jadench/.emacs.d/.local/straight/build-27.2/straight/" "/usr/share/info/" "/usr/share/info/"))(defvar doom-real-buffer-functions '(doom-dired-buffer-p) "A list of predicate functions run to determine if a buffer is real, unlike
`doom-unreal-buffer-functions'. They are passed one argument: the buffer to be
tested.

Should any of its function returns non-nil, the rest of the functions are
ignored and the buffer is considered real.

See `doom-real-buffer-p' for more information.")(defvar doom-unreal-buffer-functions '(minibufferp doom-special-buffer-p doom-non-file-visiting-buffer-p) "A list of predicate functions run to determine if a buffer is *not* real,
unlike `doom-real-buffer-functions'. They are passed one argument: the buffer to
be tested.

Should any of these functions return non-nil, the rest of the functions are
ignored and the buffer is considered unreal.

See `doom-real-buffer-p' for more information.")(defvar-local doom-real-buffer-p nil "If non-nil, this buffer should be considered real no matter what. See
`doom-real-buffer-p' for more information.")(defvar doom-fallback-buffer-name "*scratch*" "The name of the buffer to fall back to if no other buffers exist (will create
it if it doesn't exist).")(autoload 'doom-buffer-frame-predicate "/home/jadench/.emacs.d/core/autoload/buffers" "To be used as the default frame buffer-predicate parameter. Returns nil if
BUF should be skipped over by functions like `next-buffer' and `other-buffer'.

(fn BUF)" nil nil)(autoload 'doom-fallback-buffer "/home/jadench/.emacs.d/core/autoload/buffers" "Returns the fallback buffer, creating it if necessary. By default this is the
scratch buffer. See `doom-fallback-buffer-name' to change this." nil nil)(defalias 'doom-buffer-list #'buffer-list)(autoload 'doom-project-buffer-list "/home/jadench/.emacs.d/core/autoload/buffers" "Return a list of buffers belonging to the specified PROJECT.

If PROJECT is nil, default to the current project.

If no project is active, return all buffers.

(fn &optional PROJECT)" nil nil)(autoload 'doom-open-projects "/home/jadench/.emacs.d/core/autoload/buffers" "Return a list of projects with open buffers." nil nil)(autoload 'doom-dired-buffer-p "/home/jadench/.emacs.d/core/autoload/buffers" "Returns non-nil if BUF is a dired buffer.

(fn BUF)" nil nil)(autoload 'doom-special-buffer-p "/home/jadench/.emacs.d/core/autoload/buffers" "Returns non-nil if BUF's name starts and ends with an *.

(fn BUF)" nil nil)(autoload 'doom-temp-buffer-p "/home/jadench/.emacs.d/core/autoload/buffers" "Returns non-nil if BUF is temporary.

(fn BUF)" nil nil)(autoload 'doom-visible-buffer-p "/home/jadench/.emacs.d/core/autoload/buffers" "Return non-nil if BUF is visible.

(fn BUF)" nil nil)(autoload 'doom-buried-buffer-p "/home/jadench/.emacs.d/core/autoload/buffers" "Return non-nil if BUF is not visible.

(fn BUF)" nil nil)(autoload 'doom-non-file-visiting-buffer-p "/home/jadench/.emacs.d/core/autoload/buffers" "Returns non-nil if BUF does not have a value for `buffer-file-name'.

(fn BUF)" nil nil)(autoload 'doom-real-buffer-list "/home/jadench/.emacs.d/core/autoload/buffers" "Return a list of buffers that satisfy `doom-real-buffer-p'.

(fn &optional BUFFER-LIST)" nil nil)(autoload 'doom-real-buffer-p "/home/jadench/.emacs.d/core/autoload/buffers" "Returns t if BUFFER-OR-NAME is a 'real' buffer.

A real buffer is a useful buffer; a first class citizen in Doom. Real ones
should get special treatment, because we will be spending most of our time in
them. Unreal ones should be low-profile and easy to cast aside, so we can focus
on real ones.

The exact criteria for a real buffer is:

  1. A non-nil value for the buffer-local value of the `doom-real-buffer-p'
     variable OR
  2. Any function in `doom-real-buffer-functions' returns non-nil OR
  3. None of the functions in `doom-unreal-buffer-functions' must return
     non-nil.

If BUFFER-OR-NAME is omitted or nil, the current buffer is tested.

(fn BUFFER-OR-NAME)" nil nil)(autoload 'doom-unreal-buffer-p "/home/jadench/.emacs.d/core/autoload/buffers" "Return t if BUFFER-OR-NAME is an 'unreal' buffer.

See `doom-real-buffer-p' for details on what that means.

(fn BUFFER-OR-NAME)" nil nil)(autoload 'doom-buffers-in-mode "/home/jadench/.emacs.d/core/autoload/buffers" "Return a list of buffers whose `major-mode' is `eq' to MODE(S).

If DERIVED-P, test with `derived-mode-p', otherwise use `eq'.

(fn MODES &optional BUFFER-LIST DERIVED-P)" nil nil)(autoload 'doom-visible-windows "/home/jadench/.emacs.d/core/autoload/buffers" "Return a list of the visible, non-popup (dedicated) windows.

(fn &optional WINDOW-LIST)" nil nil)(autoload 'doom-visible-buffers "/home/jadench/.emacs.d/core/autoload/buffers" "Return a list of visible buffers (i.e. not buried).

(fn &optional BUFFER-LIST)" nil nil)(autoload 'doom-buried-buffers "/home/jadench/.emacs.d/core/autoload/buffers" "Get a list of buffers that are buried.

(fn &optional BUFFER-LIST)" nil nil)(autoload 'doom-matching-buffers "/home/jadench/.emacs.d/core/autoload/buffers" "Get a list of all buffers that match the regex PATTERN.

(fn PATTERN &optional BUFFER-LIST)" nil nil)(autoload 'doom-set-buffer-real "/home/jadench/.emacs.d/core/autoload/buffers" "Forcibly mark BUFFER as FLAG (non-nil = real).

See `doom-real-buffer-p' for an explanation for real buffers.

(fn BUFFER FLAG)" nil nil)(autoload 'doom-kill-buffer-and-windows "/home/jadench/.emacs.d/core/autoload/buffers" "Kill the buffer and delete all the windows it's displayed in.

(fn BUFFER)" nil nil)(autoload 'doom-fixup-windows "/home/jadench/.emacs.d/core/autoload/buffers" "Ensure that each of WINDOWS is showing a real buffer or the fallback buffer.

(fn WINDOWS)" nil nil)(autoload 'doom-kill-buffer-fixup-windows "/home/jadench/.emacs.d/core/autoload/buffers" "Kill the BUFFER and ensure all the windows it was displayed in have switched
to a real buffer or the fallback buffer.

(fn BUFFER)" nil nil)(autoload 'doom-kill-buffers-fixup-windows "/home/jadench/.emacs.d/core/autoload/buffers" "Kill the BUFFERS and ensure all the windows they were displayed in have
switched to a real buffer or the fallback buffer.

(fn BUFFERS)" nil nil)(autoload 'doom-kill-matching-buffers "/home/jadench/.emacs.d/core/autoload/buffers" "Kill all buffers (in current workspace OR in BUFFER-LIST) that match the
regex PATTERN. Returns the number of killed buffers.

(fn PATTERN &optional BUFFER-LIST)" nil nil)(autoload 'doom-mark-buffer-as-real-h "/home/jadench/.emacs.d/core/autoload/buffers" "Hook function that marks the current buffer as real.

See `doom-real-buffer-p' for an explanation for real buffers." nil nil)(autoload 'doom/save-and-kill-buffer "/home/jadench/.emacs.d/core/autoload/buffers" "Save the current buffer to file, then kill it." t nil)(autoload 'doom/kill-this-buffer-in-all-windows "/home/jadench/.emacs.d/core/autoload/buffers" "Kill BUFFER globally and ensure all windows previously showing this buffer
have switched to a real buffer or the fallback buffer.

If DONT-SAVE, don't prompt to save modified buffers (discarding their changes).

(fn BUFFER &optional DONT-SAVE)" t nil)(autoload 'doom/kill-all-buffers "/home/jadench/.emacs.d/core/autoload/buffers" "Kill all buffers and closes their windows.

If the prefix arg is passed, doesn't close windows and only kill buffers that
belong to the current project.

(fn &optional BUFFER-LIST INTERACTIVE)" t nil)(autoload 'doom/kill-other-buffers "/home/jadench/.emacs.d/core/autoload/buffers" "Kill all other buffers (besides the current one).

If the prefix arg is passed, kill only buffers that belong to the current
project.

(fn &optional BUFFER-LIST INTERACTIVE)" t nil)(autoload 'doom/kill-matching-buffers "/home/jadench/.emacs.d/core/autoload/buffers" "Kill buffers that match PATTERN in BUFFER-LIST.

If the prefix arg is passed, only kill matching buffers in the current project.

(fn PATTERN &optional BUFFER-LIST INTERACTIVE)" t nil)(autoload 'doom/kill-buried-buffers "/home/jadench/.emacs.d/core/autoload/buffers" "Kill buffers that are buried.

If PROJECT-P (universal argument), only kill buried buffers belonging to the
current project.

(fn &optional BUFFER-LIST INTERACTIVE)" t nil)(autoload 'doom/kill-project-buffers "/home/jadench/.emacs.d/core/autoload/buffers" "Kill buffers for the specified PROJECT.

(fn PROJECT &optional INTERACTIVE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/buffers" '("doom--message-or-count")))(defvar doom-reloading-p nil "TODO")(autoload 'doom/open-private-config "/home/jadench/.emacs.d/core/autoload/config" "Browse your `doom-private-dir'." t nil)(autoload 'doom/find-file-in-private-config "/home/jadench/.emacs.d/core/autoload/config" "Search for a file in `doom-private-dir'." t nil)(autoload 'doom/goto-private-init-file "/home/jadench/.emacs.d/core/autoload/config" "Open your private init.el file.
And jumps to your `doom!' block." t nil)(autoload 'doom/goto-private-config-file "/home/jadench/.emacs.d/core/autoload/config" "Open your private config.el file." t nil)(autoload 'doom/goto-private-packages-file "/home/jadench/.emacs.d/core/autoload/config" "Open your private packages.el file." t nil)(autoload 'doom/reload "/home/jadench/.emacs.d/core/autoload/config" "Reloads your private config.

This is experimental! It will try to do as `bin/doom sync' does, but from within
this Emacs session. i.e. it reload autoloads files (if necessary), reloads your
package list, and lastly, reloads your private config.el.

Runs `doom-after-reload-hook' afterwards." t nil)(autoload 'doom/reload-autoloads "/home/jadench/.emacs.d/core/autoload/config" "Reload only `doom-autoloads-file' and `doom-package-autoload-file'.

This is much faster and safer than `doom/reload', but not as comprehensive. This
reloads your package and module visibility, but does not install new packages or
remove orphaned ones. It also doesn't reload your private config.

It is useful to only pull in changes performed by 'doom sync' on the command
line." t nil)(autoload 'doom/reload-env "/home/jadench/.emacs.d/core/autoload/config" "Reloads your envvar file.

DOES NOT REGENERATE IT. You must run 'doom env' in your shell OUTSIDE of Emacs.
Doing so from within Emacs will taint your shell environment.

An envvar file contains a snapshot of your shell environment, which can be
imported into Emacs." t nil)(autoload 'doom/upgrade "/home/jadench/.emacs.d/core/autoload/config" "Run 'doom upgrade' then prompt to restart Emacs." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/config" '("doom-")))(defvar doom-debug-variables '(async-debug debug-on-error doom-debug-p garbage-collection-messages gcmh-verbose init-file-debug jka-compr-verbose url-debug use-package-verbose (message-log-max . 16384)) "A list of variable to toggle on `doom-debug-mode'.

Each entry can be a variable symbol or a cons cell whose CAR is the variable
symbol and CDR is the value to set it to when `doom-debug-mode' is activated.")(defvar doom-debug-mode nil "Non-nil if Doom-Debug mode is enabled.
See the `doom-debug-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `doom-debug-mode'.")(autoload 'doom-debug-mode "/home/jadench/.emacs.d/core/autoload/debug" "Toggle `debug-on-error' and `doom-debug-p' for verbose logging.

If called interactively, enable Doom-Debug mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'doom-run-all-startup-hooks-h "/home/jadench/.emacs.d/core/autoload/debug" "Run all startup Emacs hooks. Meant to be executed after starting Emacs with
-q or -Q, for example:

  emacs -Q -l init.el -f doom-run-all-startup-hooks-h" nil nil)(autoload 'doom-info "/home/jadench/.emacs.d/core/autoload/debug" "Returns diagnostic information about the current Emacs session in markdown,
ready to be pasted in a bug report on github." nil nil)(autoload 'doom/version "/home/jadench/.emacs.d/core/autoload/debug" "Display the running version of Doom core, module sources, and Emacs." t nil)(autoload 'doom/info "/home/jadench/.emacs.d/core/autoload/debug" "Collects some debug information about your Emacs session, formats it and
copies it to your clipboard, ready to be pasted into bug reports!

(fn &optional RAW)" t nil)(autoload 'doom/am-i-secure "/home/jadench/.emacs.d/core/autoload/debug" "Test to see if your root certificates are securely configured in emacs.
Some items are not supported by the `nsm.el' module." t nil)(function-put 'doom/am-i-secure 'interactive-only 't)(autoload 'doom/copy-buffer-contents "/home/jadench/.emacs.d/core/autoload/debug" "Copy the contents of BUFFER-NAME to your clipboard.

(fn BUFFER-NAME)" t nil)(autoload 'doom/toggle-profiler "/home/jadench/.emacs.d/core/autoload/debug" "Toggle the Emacs profiler. Run it again to see the profiling report." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/debug" '("doom--")))(autoload 'doom-path "/home/jadench/.emacs.d/core/autoload/files" "Constructs a file path from SEGMENTS.
Ignores `nil' elements in SEGMENTS.

(fn &rest SEGMENTS)" nil nil)(autoload 'doom-glob "/home/jadench/.emacs.d/core/autoload/files" "Construct a path from SEGMENTS and expand glob patterns.
Returns nil if the path doesn't exist.
Ignores `nil' elements in SEGMENTS.

(fn &rest SEGMENTS)" nil nil)(autoload 'doom-dir "/home/jadench/.emacs.d/core/autoload/files" "Constructs a path from SEGMENTS.
See `doom-path'.
Ignores `nil' elements in SEGMENTS.

(fn &rest SEGMENTS)" nil nil)(autoload 'doom-files-in "/home/jadench/.emacs.d/core/autoload/files" "Return a list of files/directories in PATHS (one string or a list of them).

FILTER is a function or symbol that takes one argument (the path). If it returns
non-nil, the entry will be excluded.

MAP is a function or symbol which will be used to transform each entry in the
results.

TYPE determines what kind of path will be included in the results. This can be t
(files and folders), 'files or 'dirs.

By default, this function returns paths relative to PATH-OR-PATHS if it is a
single path. If it a list of paths, this function returns absolute paths.
Otherwise, by setting RELATIVE-TO to a path, the results will be transformed to
be relative to it.

The search recurses up to DEPTH and no further. DEPTH is an integer.

MATCH is a string regexp. Only entries that match it will be included.

(fn PATHS &rest REST &key FILTER MAP (FULL t) (FOLLOW-SYMLINKS t) (TYPE \\='files) (RELATIVE-TO (unless full default-directory)) (DEPTH 99999) (MINDEPTH 0) (MATCH \"/[^._][^/]+\"))" nil nil)(autoload 'doom-file-cookie-p "/home/jadench/.emacs.d/core/autoload/files" "Returns the evaluated result of FORM in a ;;;###COOKIE FORM at the top of
FILE.

If COOKIE doesn't exist, or cookie isn't within the first 256 bytes of FILE,
return NULL-VALUE.

(fn FILE &optional COOKIE NULL-VALUE)" nil nil)(autoload 'file-exists-p! "/home/jadench/.emacs.d/core/autoload/files" "Returns non-nil if the FILES in DIRECTORY all exist.

DIRECTORY is a path; defaults to `default-directory'.

Returns the last file found to meet the rules set by FILES, which can be a
single file or nested compound statement of `and' and `or' statements.

(fn FILES &optional DIRECTORY)" nil t)(autoload 'doom-file-size "/home/jadench/.emacs.d/core/autoload/files" "Returns the size of FILE (in DIR) in bytes.

(fn FILE &optional DIR)" nil nil)(autoload 'doom-directory-size "/home/jadench/.emacs.d/core/autoload/files" "Returns the size of FILE (in DIR) in kilobytes.

(fn DIR)" nil nil)(autoload 'doom/delete-this-file "/home/jadench/.emacs.d/core/autoload/files" "Delete PATH, kill its buffers and expunge it from vc/magit cache.

If PATH is not specified, default to the current buffer's file.

If FORCE-P, delete without confirmation.

(fn &optional PATH FORCE-P)" t nil)(autoload 'doom/copy-this-file "/home/jadench/.emacs.d/core/autoload/files" "Copy current buffer's file to NEW-PATH.

If FORCE-P, overwrite the destination file if it exists, without confirmation.

(fn NEW-PATH &optional FORCE-P)" t nil)(autoload 'doom/move-this-file "/home/jadench/.emacs.d/core/autoload/files" "Move current buffer's file to NEW-PATH.

If FORCE-P, overwrite the destination file if it exists, without confirmation.

(fn NEW-PATH &optional FORCE-P)" t nil)(autoload 'doom/sudo-find-file "/home/jadench/.emacs.d/core/autoload/files" "Open FILE as root.

(fn FILE)" t nil)(autoload 'doom/sudo-this-file "/home/jadench/.emacs.d/core/autoload/files" "Open the current file as root." t nil)(autoload 'doom/sudo-save-buffer "/home/jadench/.emacs.d/core/autoload/files" "Save this file as root." t nil)(autoload 'doom/remove-recent-file "/home/jadench/.emacs.d/core/autoload/files" "Remove FILE from your recently-opened-files list.

(fn FILE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/files" '("doom--")))(defvar doom-font-increment 2 "How many steps to increase the font size each time `doom/increase-font-size'
or `doom/decrease-font-size' are invoked.")(defvar doom-big-font nil "The font to use for `doom-big-font-mode'.
If nil, `doom-font' will be used, scaled up by `doom-big-font-increment'. See
`doom-font' for details on acceptable values for this variable.")(defvar doom-big-font-increment 4 "How many steps to increase the font size (with `doom-font' as the base) when
`doom-big-font-mode' is enabled and `doom-big-font' is nil.")(autoload 'doom-normalize-font "/home/jadench/.emacs.d/core/autoload/fonts" "Return FONT as a normalized font spec.

The font will be normalized (i.e. :weight, :slant, and :width will set to
'normal if not specified) before it is converted.

FONT can be a `font-spec', a font object, an XFT font string, or an XLFD font
string.

(fn FONT)" nil nil)(autoload 'doom-adjust-font-size "/home/jadench/.emacs.d/core/autoload/fonts" "Increase size of font in FRAME by INCREMENT.

If FIXED-SIZE-P is non-nil, treat INCREMENT as a font size, rather than a
scaling factor.

FONT-ALIST is an alist give temporary values to certain Doom font variables,
like `doom-font' or `doom-variable-pitch-font'. e.g.

  `((doom-font . ,(font-spec :family \"Sans Serif\" :size 12)))

Doesn't work in terminal Emacs.

(fn INCREMENT &optional FIXED-SIZE-P FONT-ALIST)" nil nil)(autoload 'doom-font-exists-p "/home/jadench/.emacs.d/core/autoload/fonts" "Return non-nil if FONT exists on this system.

(fn FONT)" nil nil)(function-put 'doom-font-exists-p 'pure 't)(function-put 'doom-font-exists-p 'side-effect-free 't)(autoload 'doom/reload-font "/home/jadench/.emacs.d/core/autoload/fonts" "Reload your fonts, if they're set.
See `doom-init-fonts-h'." t nil)(autoload 'doom/increase-font-size "/home/jadench/.emacs.d/core/autoload/fonts" "Enlargens the font size across the current and child frames.

(fn COUNT &optional INCREMENT)" t nil)(autoload 'doom/decrease-font-size "/home/jadench/.emacs.d/core/autoload/fonts" "Shrinks the font size across the current and child frames.

(fn COUNT &optional INCREMENT)" t nil)(autoload 'doom/reset-font-size "/home/jadench/.emacs.d/core/autoload/fonts" "Reset font size and `text-scale'.

Assuming it has been adjusted via `doom/increase-font-size' and
`doom/decrease-font-size', or `text-scale-*' commands." t nil)(defvar doom-big-font-mode nil "Non-nil if Doom-Big-Font mode is enabled.
See the `doom-big-font-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `doom-big-font-mode'.")(autoload 'doom-big-font-mode "/home/jadench/.emacs.d/core/autoload/fonts" "Globally resizes your fonts for streams, screen-sharing or presentations.

If called interactively, enable Doom-Big-Font mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Uses `doom-big-font' if its set, otherwise uses `doom-font' (falling back to
your system font).

Also resizees `doom-variable-pitch-font' and `doom-serif-font'.

(fn &optional ARG)" t nil)(autoload 'doom-active-minor-modes "/home/jadench/.emacs.d/core/autoload/help" "Return a list of active minor-mode symbols." nil nil)(defalias 'doom/describe-autodefs #'doom/help-autodefs)(defalias 'doom/describe-module #'doom/help-modules)(defalias 'doom/describe-package #'doom/help-packages)(autoload 'doom/describe-active-minor-mode "/home/jadench/.emacs.d/core/autoload/help" "Get information on an active minor mode. Use `describe-minor-mode' for a
selection of all minor-modes, active or not.

(fn MODE)" t nil)(autoload 'doom-completing-read-org-headings "/home/jadench/.emacs.d/core/autoload/help" "TODO

(fn PROMPT FILES &optional DEPTH INCLUDE-FILES INITIAL-INPUT EXTRA-CANDIDATES)" nil nil)(autoload 'doom/homepage "/home/jadench/.emacs.d/core/autoload/help" "Open the doom emacs homepage in the browser." t nil)(autoload 'doom/issue-tracker "/home/jadench/.emacs.d/core/autoload/help" "Open Doom Emacs' issue tracker on Discourse." t nil)(autoload 'doom/report-bug "/home/jadench/.emacs.d/core/autoload/help" "Open the browser on our Discourse.

If called when a backtrace buffer is present, it and the output of `doom-info'
will be automatically appended to the result." t nil)(autoload 'doom/discourse "/home/jadench/.emacs.d/core/autoload/help" "Open Doom Emacs' issue tracker on Discourse." t nil)(autoload 'doom/help "/home/jadench/.emacs.d/core/autoload/help" "Open Doom's user manual." t nil)(autoload 'doom/help-search-headings "/home/jadench/.emacs.d/core/autoload/help" "Search Doom's documentation and jump to a headline.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'doom/help-search "/home/jadench/.emacs.d/core/autoload/help" "Perform a text search on all of Doom's documentation.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'doom/help-search-news "/home/jadench/.emacs.d/core/autoload/help" "Search headlines in Doom's newsletters.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'doom/help-faq "/home/jadench/.emacs.d/core/autoload/help" "Search Doom's FAQ and jump to a question.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'doom/help-news "/home/jadench/.emacs.d/core/autoload/help" "Open a Doom newsletter.
The latest newsletter will be selected by default." t nil)(autoload 'doom/help-autodefs "/home/jadench/.emacs.d/core/autoload/help" "Open documentation for an autodef.

An autodef is a Doom concept. It is a function or macro that is always defined,
whether or not its containing module is disabled (in which case it will safely
no-op without evaluating its arguments). This syntactic sugar lets you use them
without needing to check if they are available.

(fn AUTODEF)" t nil)(autoload 'doom/help-modules "/home/jadench/.emacs.d/core/autoload/help" "Open the documentation for a Doom module.

CATEGORY is a keyword and MODULE is a symbol. e.g. :editor and 'evil.

If VISIT-DIR is non-nil, visit the module's directory rather than its
documentation.

Automatically selects a) the module at point (in private init files), b) the
module derived from a `featurep!' or `require!' call, c) the module that the
current file is in, or d) the module associated with the current major mode (see
`doom--help-major-mode-module-alist').

(fn CATEGORY MODULE &optional VISIT-DIR)" t nil)(autoload 'doom/help-custom-variable "/home/jadench/.emacs.d/core/autoload/help" "Look up documentation for a custom variable.

Unlike `helpful-variable', which casts a wider net that includes internal
variables, this only lists variables that exist to be customized (defined with
`defcustom').

(fn VAR)" t nil)(autoload 'doom/help-packages "/home/jadench/.emacs.d/core/autoload/help" "Like `describe-package', but for packages installed by Doom modules.

Only shows installed packages. Includes information about where packages are
defined and configured.

If prefix arg is present, refresh the cache.

(fn PACKAGE)" t nil)(autoload 'doom/help-package-config "/home/jadench/.emacs.d/core/autoload/help" "Jump to any `use-package!', `after!' or ;;;###package block for PACKAGE.

This only searches `doom-emacs-dir' (typically ~/.emacs.d) and does not include
config blocks in your private config.

(fn PACKAGE)" t nil)(defalias 'doom/help-package-homepage #'straight-visit-package-website)(autoload 'doom/help-search-load-path "/home/jadench/.emacs.d/core/autoload/help" "Perform a text search on your `load-path'.
Uses the symbol at point or the current selection, if available.

(fn QUERY)" t nil)(autoload 'doom/help-search-loaded-files "/home/jadench/.emacs.d/core/autoload/help" "Perform a text search on your `load-path'.
Uses the symbol at point or the current selection, if available.

(fn QUERY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/help" '("doom--")))(autoload 'doom--format "/home/jadench/.emacs.d/core/autoload/output" "

(fn OUTPUT)" nil nil)(autoload 'doom--print "/home/jadench/.emacs.d/core/autoload/output" "

(fn OUTPUT)" nil nil)(autoload 'doom--output-indent "/home/jadench/.emacs.d/core/autoload/output" "Indent TEXT by WIDTH spaces. If ARGS, format TEXT with them.

(fn WIDTH TEXT &optional PREFIX)" nil nil)(autoload 'doom--output-autofill "/home/jadench/.emacs.d/core/autoload/output" "Ensure MSG is split into lines no longer than `fill-column'.

(fn &rest MSGS)" nil nil)(autoload 'doom--output-color "/home/jadench/.emacs.d/core/autoload/output" "Apply STYLE to formatted MESSAGE with ARGS.

STYLE is a symbol that correlates to `doom-output-ansi-alist'.

In a noninteractive session, this wraps the result in ansi color codes.
Otherwise, it maps colors to a term-color-* face.

(fn STYLE FORMAT &rest ARGS)" nil nil)(autoload 'doom--output-class "/home/jadench/.emacs.d/core/autoload/output" "Apply CLASS to formatted format with ARGS.

CLASS is derived from `doom-output-class-alist', and can contain any arbitrary,
transformative logic.

(fn CLASS FORMAT &rest ARGS)" nil nil)(autoload 'doom--output-apply "/home/jadench/.emacs.d/core/autoload/output" "Replace color-name functions with calls to `doom--output-color'.

(fn FORMS &optional SUB)" nil nil)(autoload 'format! "/home/jadench/.emacs.d/core/autoload/output" "An alternative to `format' that understands (color ...) and converts them
into faces or ANSI codes depending on the type of sesssion we're in.

(fn MESSAGE &rest ARGS)" nil t)(autoload 'print-group! "/home/jadench/.emacs.d/core/autoload/output" "Indents any `print!' or `format!' output within BODY.

(fn &rest BODY)" nil t)(autoload 'print! "/home/jadench/.emacs.d/core/autoload/output" "Prints MESSAGE, formatted with ARGS, to stdout.

Returns non-nil if the message is a non-empty string.

Can be colored using (color ...) blocks:

  (print! \"Hello %s\" (bold (blue \"How are you?\")))
  (print! \"Hello %s\" (red \"World\"))
  (print! (green \"Great %s!\") \"success\")

Uses faces in interactive sessions and ANSI codes otherwise.

(fn MESSAGE &rest ARGS)" nil t)(autoload 'insert! "/home/jadench/.emacs.d/core/autoload/output" "Like `insert'; the last argument must be format arguments for MESSAGE.

(fn MESSAGE... ARGS)" nil t)(autoload 'error! "/home/jadench/.emacs.d/core/autoload/output" "Like `error', but with the power of `format!'.

(fn MESSAGE &rest ARGS)" nil t)(autoload 'user-error! "/home/jadench/.emacs.d/core/autoload/output" "Like `user-error', but with the power of `format!'.

(fn MESSAGE &rest ARGS)" nil t)(autoload 'with-output-to! "/home/jadench/.emacs.d/core/autoload/output" "Send all output produced in BODY to DEST.
DEST can be one or more of `standard-output', a buffer, a file

(fn DEST &rest BODY)" nil t)(function-put 'with-output-to! 'lisp-indent-function '1)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/output" '("doom-output-")))(autoload 'doom/reload-packages "/home/jadench/.emacs.d/core/autoload/packages" "Reload `doom-packages', `package' and `quelpa'." t nil)(autoload 'doom/bumpify-package-at-point "/home/jadench/.emacs.d/core/autoload/packages" "Convert `package!' call at point to a bump string." t nil)(autoload 'doom/bumpify-packages-in-buffer "/home/jadench/.emacs.d/core/autoload/packages" "Convert all `package!' calls in buffer into bump strings." t nil)(autoload 'doom/bump-package-at-point "/home/jadench/.emacs.d/core/autoload/packages" "Inserts or updates a `:pin' for the `package!' statement at point.
Grabs the latest commit id of the package using 'git'.

(fn &optional SELECT)" t nil)(autoload 'doom/bump-packages-in-buffer "/home/jadench/.emacs.d/core/autoload/packages" "Inserts or updates a `:pin' to all `package!' statements in current buffer.
If SELECT (prefix arg) is non-nil, prompt you to choose a specific commit for
each package.

(fn &optional SELECT)" t nil)(autoload 'doom/bump-module "/home/jadench/.emacs.d/core/autoload/packages" "Bump packages in CATEGORY MODULE.
If SELECT (prefix arg) is non-nil, prompt you to choose a specific commit for
each package.

(fn CATEGORY &optional MODULE SELECT)" t nil)(autoload 'doom/bump-package "/home/jadench/.emacs.d/core/autoload/packages" "Bump PACKAGE in all modules that install it.

(fn PACKAGE)" t nil)(autoload 'doom/bumpify-diff "/home/jadench/.emacs.d/core/autoload/packages" "Copy user/repo@hash -> user/repo@hash's of changed packages to clipboard.

Must be run from a magit diff buffer.

(fn &optional INTERACTIVE)" t nil)(autoload 'doom/commit-bumps "/home/jadench/.emacs.d/core/autoload/packages" "Create a pre-filled magit commit for currently bumped packages." t nil)(autoload 'doom-package-homepage "/home/jadench/.emacs.d/core/autoload/packages" "Return the url to PACKAGE's homepage (usually a repo).

(fn PACKAGE)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/packages" '("doom--package-")))(autoload 'doplist! "/home/jadench/.emacs.d/core/autoload/plist" "Loop over a PLIST's (property value) pairs then return RETVAL.

Evaluate BODY with either ARGLIST bound to (cons PROP VAL) or, if ARGLIST is a
list, the pair is destructured into (CAR . CDR).

(fn (ARGLIST PLIST &optional RETVAL) &rest BODY)" nil t)(function-put 'doplist! 'lisp-indent-function '1)(autoload 'plist-put! "/home/jadench/.emacs.d/core/autoload/plist" "Set each PROP VALUE pair in REST to PLIST in-place.

(fn PLIST &rest REST)" nil t)(autoload 'plist-delete! "/home/jadench/.emacs.d/core/autoload/plist" "Delete PROP from PLIST in-place.

(fn PLIST PROP)" nil t)(autoload 'doom-plist-get "/home/jadench/.emacs.d/core/autoload/plist" "Return PROP in PLIST, if it exists. Otherwise NIL-VALUE.

(fn PLIST PROP &optional NIL-VALUE)" nil nil)(autoload 'doom-plist-merge "/home/jadench/.emacs.d/core/autoload/plist" "Non-destructively merge FROM-PLIST onto TO-PLIST

(fn FROM-PLIST TO-PLIST)" nil nil)(autoload 'doom-plist-delete-nil "/home/jadench/.emacs.d/core/autoload/plist" "Delete `nil' properties from a copy of PLIST.

(fn PLIST)" nil nil)(autoload 'doom-plist-delete "/home/jadench/.emacs.d/core/autoload/plist" "Delete PROPS from a copy of PLIST.

(fn PLIST &rest PROPS)" nil nil)(autoload 'doom-plist-keys "/home/jadench/.emacs.d/core/autoload/plist" "Return the keys in PLIST.

(fn PLIST)" nil nil)(autoload 'doom-plist-values "/home/jadench/.emacs.d/core/autoload/plist" "Return the values in PLIST.

(fn PLIST)" nil nil)(autoload 'doom-call-process "/home/jadench/.emacs.d/core/autoload/process" "Execute COMMAND with ARGS synchronously.

Returns (STATUS . OUTPUT) when it is done, where STATUS is the returned error
code of the process and OUTPUT is its stdout output.

(fn COMMAND &rest ARGS)" nil nil)(autoload 'doom-exec-process "/home/jadench/.emacs.d/core/autoload/process" "Execute COMMAND with ARGS synchronously.

Unlike `doom-call-process', this pipes output to `standard-output' on the fly to
simulate 'exec' in the shell, so batch scripts could run external programs
synchronously without sacrificing their output.

Warning: freezes indefinitely on any stdin prompt.

(fn COMMAND &rest ARGS)" nil nil)(defvar projectile-project-root nil)(defvar projectile-enable-caching doom-interactive-p)(defvar projectile-require-project-root 'prompt)(autoload 'project-file-exists-p! "/home/jadench/.emacs.d/core/autoload/projects" "Checks if the project has the specified FILES.
Paths are relative to the project root, unless they start with ./ or ../ (in
which case they're relative to `default-directory'). If they start with a slash,
they are absolute.

(fn FILES)" nil t)(autoload 'doom/find-file-in-other-project "/home/jadench/.emacs.d/core/autoload/projects" "Performs `projectile-find-file' in a known project of your choosing.

(fn PROJECT-ROOT)" t nil)(autoload 'doom/browse-in-other-project "/home/jadench/.emacs.d/core/autoload/projects" "Performs `find-file' in a known project of your choosing.

(fn PROJECT-ROOT)" t nil)(autoload 'doom/browse-in-emacsd "/home/jadench/.emacs.d/core/autoload/projects" "Browse files from `doom-emacs-dir'." t nil)(autoload 'doom/find-file-in-emacsd "/home/jadench/.emacs.d/core/autoload/projects" "Find a file under `doom-emacs-dir', recursively." t nil)(autoload 'doom/add-directory-as-project "/home/jadench/.emacs.d/core/autoload/projects" "Register an arbitrary directory as a project.
If DIR is not a valid project, a .project file will be created within it. This
command will throw an error if a parent of DIR is a valid project (which would
mask DIR).

(fn DIR)" t nil)(autoload 'doom-project-p "/home/jadench/.emacs.d/core/autoload/projects" "Return t if DIR (defaults to `default-directory') is a valid project.

(fn &optional DIR)" nil nil)(autoload 'doom-project-root "/home/jadench/.emacs.d/core/autoload/projects" "Return the project root of DIR (defaults to `default-directory').
Returns nil if not in a project.

(fn &optional DIR)" nil nil)(autoload 'doom-project-name "/home/jadench/.emacs.d/core/autoload/projects" "Return the name of the current project.

Returns '-' if not in a valid project.

(fn &optional DIR)" nil nil)(autoload 'doom-project-expand "/home/jadench/.emacs.d/core/autoload/projects" "Expand NAME to project root.

(fn NAME &optional DIR)" nil nil)(autoload 'doom-project-find-file "/home/jadench/.emacs.d/core/autoload/projects" "Jump to a file in DIR (searched recursively).

If DIR is not a project, it will be indexed (but not cached).

(fn DIR)" nil nil)(autoload 'doom-project-browse "/home/jadench/.emacs.d/core/autoload/projects" "Traverse a file structure starting linearly from DIR.

(fn DIR)" nil nil)(autoload 'doom-project-ignored-p "/home/jadench/.emacs.d/core/autoload/projects" "Return non-nil if temporary file or a straight package.

(fn PROJECT-ROOT)" nil nil)(progn (autoload 'set-project-type! "/home/jadench/.emacs.d/core/autoload/projects.el" "Add a project type to `projectile-project-type'.

(fn NAME &key PREDICATE COMPILE RUN TEST CONFIGURE DIR)" nil nil) (function-put 'set-project-type! 'lisp-indent-function '1))(put 'set-project-type! 'doom-module '(:core . projects))(autoload 'doom/sandbox "/home/jadench/.emacs.d/core/autoload/sandbox" "Open the Emacs Lisp sandbox.

This is a test bed for running Emacs Lisp in another instance of Emacs with
varying amounts of Doom loaded, including:

  a) vanilla Emacs (nothing loaded),
  b) vanilla Doom (only Doom core),
  c) Doom + modules - your private config or
  c) Doom + modules + your private config (a complete Doom session)

This is done without sacrificing access to installed packages. Use the sandbox
to reproduce bugs and determine if Doom is to blame." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/sandbox" '("doom-")))(autoload 'doom-scratch-buffer "/home/jadench/.emacs.d/core/autoload/scratch" "Return a scratchpad buffer in major MODE.

(fn &optional DONT-RESTORE-P MODE DIRECTORY PROJECT-NAME)" nil nil)(autoload 'doom-persist-scratch-buffer-h "/home/jadench/.emacs.d/core/autoload/scratch" "Save the current buffer to `doom-scratch-dir'." nil nil)(autoload 'doom-persist-scratch-buffers-h "/home/jadench/.emacs.d/core/autoload/scratch" "Save all scratch buffers to `doom-scratch-dir'." nil nil)(autoload 'doom-persist-scratch-buffers-after-switch-h "/home/jadench/.emacs.d/core/autoload/scratch" "Kill scratch buffers when they are no longer visible, saving them to disk." nil nil)(when doom-interactive-p (add-hook 'kill-emacs-hook #'doom-persist-scratch-buffers-h))(autoload 'doom/open-scratch-buffer "/home/jadench/.emacs.d/core/autoload/scratch" "Pop up a persistent scratch buffer.

If passed the prefix ARG, do not restore the last scratch buffer.
If PROJECT-P is non-nil, open a persistent scratch buffer associated with the
  current project.

(fn &optional ARG PROJECT-P SAME-WINDOW-P)" t nil)(autoload 'doom/switch-to-scratch-buffer "/home/jadench/.emacs.d/core/autoload/scratch" "Like `doom/open-scratch-buffer', but switches to it in the current window.

If passed the prefix ARG, do not restore the last scratch buffer.

(fn &optional ARG PROJECT-P)" t nil)(autoload 'doom/open-project-scratch-buffer "/home/jadench/.emacs.d/core/autoload/scratch" "Opens the (persistent) project scratch buffer in a popup.

If passed the prefix ARG, do not restore the last scratch buffer.

(fn &optional ARG SAME-WINDOW-P)" t nil)(autoload 'doom/switch-to-project-scratch-buffer "/home/jadench/.emacs.d/core/autoload/scratch" "Like `doom/open-project-scratch-buffer', but switches to it in the current
window.

If passed the prefix ARG, do not restore the last scratch buffer.

(fn &optional ARG)" t nil)(autoload 'doom/revert-scratch-buffer "/home/jadench/.emacs.d/core/autoload/scratch" "Revert scratch buffer to last persistent state." t nil)(autoload 'doom/delete-persistent-scratch-file "/home/jadench/.emacs.d/core/autoload/scratch" "Deletes a scratch buffer file in `doom-scratch-dir'.

If prefix ARG, delete all persistent scratches.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/scratch" '("doom-")))(autoload 'doom-session-file "/home/jadench/.emacs.d/core/autoload/sessions" "TODO

(fn &optional NAME)" nil nil)(autoload 'doom-save-session "/home/jadench/.emacs.d/core/autoload/sessions" "TODO

(fn &optional FILE)" nil nil)(autoload 'doom-load-session "/home/jadench/.emacs.d/core/autoload/sessions" "TODO

(fn &optional FILE)" nil nil)(autoload 'doom/quickload-session "/home/jadench/.emacs.d/core/autoload/sessions" "TODO" t nil)(autoload 'doom/quicksave-session "/home/jadench/.emacs.d/core/autoload/sessions" "TODO" t nil)(autoload 'doom/load-session "/home/jadench/.emacs.d/core/autoload/sessions" "TODO

(fn FILE)" t nil)(autoload 'doom/save-session "/home/jadench/.emacs.d/core/autoload/sessions" "TODO

(fn FILE)" t nil)(defalias 'doom/restart #'restart-emacs)(autoload 'doom/restart-and-restore "/home/jadench/.emacs.d/core/autoload/sessions" "TODO

(fn &optional DEBUG)" t nil)(autoload 'doom-store-persist "/home/jadench/.emacs.d/core/autoload/store" "Persist VARIABLES (list of symbols) in LOCATION (symbol).
This populates these variables with cached values, if one exists, and saves them
to file when Emacs quits. This cannot persist buffer-local variables.

(fn LOCATION VARIABLES)" nil nil)(autoload 'doom-store-desist "/home/jadench/.emacs.d/core/autoload/store" "Unregisters VARIABLES (list of symbols) in LOCATION (symbol).
Variables to persist are recorded in `doom-store-persist-alist'. Does not affect
the actual variables themselves or their values.

(fn LOCATION &optional VARIABLES)" nil nil)(autoload 'doom-store-get "/home/jadench/.emacs.d/core/autoload/store" "Retrieve KEY from LOCATION (defaults to `doom-store-location').
If it doesn't exist or has expired, DEFAULT_VALUE is returned.

(fn KEY &optional LOCATION DEFAULT-VALUE NOFLUSH)" nil nil)(autoload 'doom-store-put "/home/jadench/.emacs.d/core/autoload/store" "Set KEY to VALUE in the store at LOCATION.
KEY can be any lisp object that is comparable with `equal'. TTL is the duration
(in seconds) after which this cache entry expires; if nil, no cache expiration.
LOCATION is the super-key to store this cache item under. It defaults to
`doom-store-location'.

(fn KEY VALUE &optional TTL LOCATION NOFLUSH)" nil nil)(autoload 'doom-store-rem "/home/jadench/.emacs.d/core/autoload/store" "Clear a cache LOCATION (defaults to `doom-store-location').

(fn KEY &optional LOCATION NOFLUSH)" nil nil)(autoload 'doom-store-member-p "/home/jadench/.emacs.d/core/autoload/store" "Return t if KEY in LOCATION exists.
LOCATION defaults to `doom-store-location'.

(fn KEY &optional LOCATION)" nil nil)(autoload 'doom-store-clear "/home/jadench/.emacs.d/core/autoload/store" "Clear the store at LOCATION (defaults to `doom-store-location').

(fn &optional LOCATION)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/store" '("doom-")))(autoload 'doom-system-distro "/home/jadench/.emacs.d/core/autoload/system" "Return a symbol representing the installed distro." nil nil)(autoload 'doom-system-distro-version "/home/jadench/.emacs.d/core/autoload/system" "Return a distro name and version string." nil nil)(autoload 'doom-system-distro-icon "/home/jadench/.emacs.d/core/autoload/system" "Display icon for the installed distro." nil nil)(autoload 'doom-system-cpus "/home/jadench/.emacs.d/core/autoload/system" "Return the max number of processing units on this system.
Tries to be portable. Returns 1 if cannot be determined." nil nil)(defvar doom-point-in-comment-functions nil "List of functions to run to determine if point is in a comment.

Each function takes one argument: the position of the point. Stops on the first
function to return non-nil. Used by `doom-point-in-comment-p'.")(defvar doom-point-in-string-functions nil "List of functions to run to determine if point is in a string.

Each function takes one argument: the position of the point. Stops on the first
function to return non-nil. Used by `doom-point-in-string-p'.")(autoload 'doom-surrounded-p "/home/jadench/.emacs.d/core/autoload/text" "Returns t if point is surrounded by a brace delimiter: {[(

If INLINE is non-nil, only returns t if braces are on the same line, and
whitespace is balanced on either side of the cursor.

If INLINE is nil, returns t if the opening and closing braces are on adjacent
lines, above and below, with only whitespace in between.

(fn PAIR &optional INLINE BALANCED)" nil nil)(autoload 'doom-point-in-comment-p "/home/jadench/.emacs.d/core/autoload/text" "Return non-nil if POS is in a comment.
POS defaults to the current position.

(fn &optional POS)" nil nil)(autoload 'doom-point-in-string-p "/home/jadench/.emacs.d/core/autoload/text" "Return non-nil if POS is in a string.

(fn &optional POS)" nil nil)(autoload 'doom-point-in-string-or-comment-p "/home/jadench/.emacs.d/core/autoload/text" "Return non-nil if POS is in a string or comment.

(fn &optional POS)" nil nil)(autoload 'doom-region-active-p "/home/jadench/.emacs.d/core/autoload/text" "Return non-nil if selection is active.
Detects evil visual mode as well." nil nil)(function-put 'doom-region-active-p 'side-effect-free 't)(autoload 'doom-region-beginning "/home/jadench/.emacs.d/core/autoload/text" "Return beginning position of selection.
Uses `evil-visual-beginning' if available." nil nil)(function-put 'doom-region-beginning 'side-effect-free 't)(autoload 'doom-region-end "/home/jadench/.emacs.d/core/autoload/text" "Return end position of selection.
Uses `evil-visual-end' if available." nil nil)(function-put 'doom-region-end 'side-effect-free 't)(autoload 'doom-thing-at-point-or-region "/home/jadench/.emacs.d/core/autoload/text" "Grab the current selection, THING at point, or xref identifier at point.

Returns THING if it is a string. Otherwise, if nothing is found at point and
PROMPT is non-nil, prompt for a string (if PROMPT is a string it'll be used as
the prompting string). Returns nil if all else fails.

NOTE: Don't use THING for grabbing symbol-at-point. The xref fallback is smarter
in some cases.

(fn &optional THING PROMPT)" nil nil)(function-put 'doom-thing-at-point-or-region 'side-effect-free 't)(autoload 'doom/backward-to-bol-or-indent "/home/jadench/.emacs.d/core/autoload/text" "Jump between the indentation column (first non-whitespace character) and the
beginning of the line. The opposite of
`doom/forward-to-last-non-comment-or-eol'.

(fn &optional POINT)" t nil)(autoload 'doom/forward-to-last-non-comment-or-eol "/home/jadench/.emacs.d/core/autoload/text" "Jumps between the last non-blank, non-comment character in the line and the
true end of the line. The opposite of `doom/backward-to-bol-or-indent'.

(fn &optional POINT)" t nil)(autoload 'doom/backward-kill-to-bol-and-indent "/home/jadench/.emacs.d/core/autoload/text" "Kill line to the first non-blank character. If invoked again afterwards, kill
line to beginning of line. Same as `evil-delete-back-to-indentation'." t nil)(autoload 'doom/delete-backward-word "/home/jadench/.emacs.d/core/autoload/text" "Like `backward-kill-word', but doesn't affect the kill-ring.

(fn ARG)" t nil)(autoload 'doom/dumb-indent "/home/jadench/.emacs.d/core/autoload/text" "Inserts a tab character (or spaces x tab-width)." t nil)(autoload 'doom/dumb-dedent "/home/jadench/.emacs.d/core/autoload/text" "Dedents the current line." t nil)(autoload 'doom/retab "/home/jadench/.emacs.d/core/autoload/text" "Converts tabs-to-spaces or spaces-to-tabs within BEG and END (defaults to
buffer start and end, to make indentation consistent. Which it does depends on
the value of `indent-tab-mode'.

If ARG (universal argument) is non-nil, retab the current buffer using the
opposite indentation style.

(fn ARG &optional BEG END)" t nil)(autoload 'doom/delete-trailing-newlines "/home/jadench/.emacs.d/core/autoload/text" "Trim trailing newlines.

Respects `require-final-newline'." t nil)(autoload 'doom/dos2unix "/home/jadench/.emacs.d/core/autoload/text" "Convert the current buffer to a Unix file encoding." t nil)(autoload 'doom/unix2dos "/home/jadench/.emacs.d/core/autoload/text" "Convert the current buffer to a DOS file encoding." t nil)(autoload 'doom/toggle-indent-style "/home/jadench/.emacs.d/core/autoload/text" "Switch between tabs and spaces indentation style in the current buffer." t nil)(autoload 'doom/set-indent-width "/home/jadench/.emacs.d/core/autoload/text" "Change the indentation size to WIDTH of the current buffer.

The effectiveness of this command is significantly improved if you have
editorconfig or dtrt-indent installed.

(fn WIDTH)" t nil)(autoload 'doom-enable-delete-trailing-whitespace-h "/home/jadench/.emacs.d/core/autoload/text" "Enables the automatic deletion of trailing whitespaces upon file save.

i.e. enables `ws-butler-mode' in the current buffer." nil nil)(autoload 'doom-disable-delete-trailing-whitespace-h "/home/jadench/.emacs.d/core/autoload/text" "Disables the automatic deletion of trailing whitespaces upon file save.

i.e. disables `ws-butler-mode' in the current buffer." nil nil)(autoload 'doom-enable-show-trailing-whitespace-h "/home/jadench/.emacs.d/core/autoload/text" "Enable `show-trailing-whitespace' in the current buffer." nil nil)(autoload 'doom-disable-show-trailing-whitespace-h "/home/jadench/.emacs.d/core/autoload/text" "Disable `show-trailing-whitespace' in the current buffer." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/text" '("doom--")))(defconst doom-customize-theme-hook nil)(autoload 'custom-theme-set-faces! "/home/jadench/.emacs.d/core/autoload/themes" "Apply a list of face SPECS as user customizations for THEME.

THEME can be a single symbol or list thereof. If nil, apply these settings to
all themes. It will apply to all themes once they are loaded.

(fn THEME &rest SPECS)" nil t)(function-put 'custom-theme-set-faces! 'lisp-indent-function 'defun)(autoload 'custom-set-faces! "/home/jadench/.emacs.d/core/autoload/themes" "Apply a list of face SPECS as user customizations.

This is a convenience macro alternative to `custom-set-face' which allows for a
simplified face format, and takes care of load order issues, so you can use
doom-themes' API without worry.

(fn &rest SPECS)" nil t)(function-put 'custom-set-faces! 'lisp-indent-function 'defun)(autoload 'doom/reload-theme "/home/jadench/.emacs.d/core/autoload/themes" "Reload the current Emacs theme." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/themes" '("doom--custom-theme-set-face")))(autoload 'doom-resize-window "/home/jadench/.emacs.d/core/autoload/ui" "Resize a window to NEW-SIZE. If HORIZONTAL, do it width-wise.
If FORCE-P is omitted when `window-size-fixed' is non-nil, resizing will fail.

(fn WINDOW NEW-SIZE &optional HORIZONTAL FORCE-P)" nil nil)(autoload 'doom-quit-p "/home/jadench/.emacs.d/core/autoload/ui" "Prompt the user for confirmation when killing Emacs.

Returns t if it is safe to kill this session. Does not prompt if no real buffers
are open.

(fn &optional PROMPT)" nil nil)(autoload 'doom-recenter-a "/home/jadench/.emacs.d/core/autoload/ui" "Generic advice for recentering window (typically :after other functions).

(fn &rest _)" nil nil)(autoload 'doom-preserve-window-position-a "/home/jadench/.emacs.d/core/autoload/ui" "Generic advice for preserving cursor position on screen after scrolling.

(fn FN &rest ARGS)" nil nil)(autoload 'doom-shut-up-a "/home/jadench/.emacs.d/core/autoload/ui" "Generic advisor for silencing noisy functions.

In interactive Emacs, this just inhibits messages from appearing in the
minibuffer. They are still logged to *Messages*.

In tty Emacs, messages are suppressed completely.

(fn FN &rest ARGS)" nil nil)(autoload 'doom-apply-ansi-color-to-compilation-buffer-h "/home/jadench/.emacs.d/core/autoload/ui" "Applies ansi codes to the compilation buffers. Meant for
`compilation-filter-hook'." nil nil)(autoload 'doom-disable-show-paren-mode-h "/home/jadench/.emacs.d/core/autoload/ui" "Turn off `show-paren-mode' buffer-locally." nil nil)(autoload 'doom-enable-line-numbers-h "/home/jadench/.emacs.d/core/autoload/ui" nil nil nil)(autoload 'doom-disable-line-numbers-h "/home/jadench/.emacs.d/core/autoload/ui" nil nil nil)(autoload 'doom/toggle-line-numbers "/home/jadench/.emacs.d/core/autoload/ui" "Toggle line numbers.

Cycles through regular, relative and no line numbers. The order depends on what
`display-line-numbers-type' is set to. If you're using Emacs 26+, and
visual-line-mode is on, this skips relative and uses visual instead.

See `display-line-numbers' for what these values mean." t nil)(autoload 'doom/delete-frame-with-prompt "/home/jadench/.emacs.d/core/autoload/ui" "Delete the current frame, but ask for confirmation if it isn't empty." t nil)(autoload 'doom/window-maximize-buffer "/home/jadench/.emacs.d/core/autoload/ui" "Close other windows to focus on this one.
Use `winner-undo' to undo this. Alternatively, use `doom/window-enlargen'.

(fn &optional ARG)" t nil)(autoload 'doom/window-enlargen "/home/jadench/.emacs.d/core/autoload/ui" "Enlargen the current window (i.e. shrinks others) so you can focus on it.
Use `winner-undo' to undo this. Alternatively, use
`doom/window-maximize-buffer'.

(fn &optional ARG)" t nil)(autoload 'doom/window-maximize-horizontally "/home/jadench/.emacs.d/core/autoload/ui" "Delete all windows to the left and right of the current window." t nil)(autoload 'doom/window-maximize-vertically "/home/jadench/.emacs.d/core/autoload/ui" "Delete all windows above and below the current window." t nil)(autoload 'doom/set-frame-opacity "/home/jadench/.emacs.d/core/autoload/ui" "Interactively change the current frame's opacity.

OPACITY is an integer between 0 to 100, inclusive.

(fn OPACITY)" t nil)(autoload 'doom/narrow-buffer-indirectly "/home/jadench/.emacs.d/core/autoload/ui" "Restrict editing in this buffer to the current region, indirectly.

This recursively creates indirect clones of the current buffer so that the
narrowing doesn't affect other windows displaying the same buffer. Call
`doom/widen-indirectly-narrowed-buffer' to undo it (incrementally).

Inspired from http://demonastery.org/2013/04/emacs-evil-narrow-region/

(fn BEG END)" t nil)(autoload 'doom/widen-indirectly-narrowed-buffer "/home/jadench/.emacs.d/core/autoload/ui" "Widens narrowed buffers.

This command will incrementally kill indirect buffers (under the assumption they
were created by `doom/narrow-buffer-indirectly') and switch to their base
buffer.

If ARG, then kill all indirect buffers, return the base buffer and widen it.

If the current buffer is not an indirect buffer, it is `widen'ed.

(fn &optional ARG)" t nil)(autoload 'doom/toggle-narrow-buffer "/home/jadench/.emacs.d/core/autoload/ui" "Narrow the buffer to BEG END. If narrowed, widen it.

(fn BEG END)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/core/autoload/ui" '("doom--")))(autoload '=calendar "/home/jadench/.emacs.d/modules/app/calendar/autoload" "Activate (or switch to) `calendar' in its workspace." t nil)(autoload '+calendar/quit "/home/jadench/.emacs.d/modules/app/calendar/autoload" "TODO" t nil)(autoload '+calendar/open-calendar "/home/jadench/.emacs.d/modules/app/calendar/autoload" "TODO" t nil)(autoload '+calendar-cfw:render-button-a "/home/jadench/.emacs.d/modules/app/calendar/autoload" "render-button
 TITLE
 COMMAND
 STATE

(fn TITLE COMMAND &optional STATE)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/app/calendar/autoload" '("+calendar--")))(defmacro set-irc-server! (server plist) "THIS FUNCTION DOES NOTHING BECAUSE (:app . irc) IS DISABLED

Registers an irc SERVER for circe.

SERVER can either be a name for the network (in which case you must specify a
:host), or it may be the hostname itself, in which case it will be used as the
:host.

See `circe-network-options' for details." (ignore server plist))(put 'set-irc-server! 'doom-module '(:app . irc))(autoload '+spell-init-flyspell-predicate-h "/home/jadench/.emacs.d/modules/checkers/spell/autoload/+flyspell" "TODO" nil nil)(autoload '+spell-correction-at-point-p "/home/jadench/.emacs.d/modules/checkers/spell/autoload/+flyspell" "TODO

(fn &optional POINT)" nil nil)(autoload '+spell/add-word "/home/jadench/.emacs.d/modules/checkers/spell/autoload/+flyspell" "Add WORD to your personal dictionary, within SCOPE.

SCOPE can be `buffer' or `session' to exclude words only from the current buffer
or session. Otherwise, the addition is permanent.

(fn WORD &optional SCOPE)" t nil)(autoload '+spell/remove-word "/home/jadench/.emacs.d/modules/checkers/spell/autoload/+flyspell" "Remove WORD from your personal dictionary.

(fn WORD &optional SCOPE)" t nil)(autoload '+spell/next-error "/home/jadench/.emacs.d/modules/checkers/spell/autoload/+flyspell" "Jump to next flyspell error." t nil)(autoload '+spell/previous-error "/home/jadench/.emacs.d/modules/checkers/spell/autoload/+flyspell" "Jump to previous flyspell error." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/checkers/spell/autoload/+flyspell" '("+spell--flyspell-predicate-alist" "flyspell-mode!" "set-flyspell-predicate!")))(put 'flyspell-mode! 'doom-module '(:checkers . spell))(defalias 'flyspell-mode! #'flyspell-mode nil)(progn (autoload 'set-flyspell-predicate! "/home/jadench/.emacs.d/modules/checkers/spell/autoload/+flyspell.el" "TODO

(fn MODES PREDICATE)" nil nil) (function-put 'set-flyspell-predicate! 'lisp-indent-function 'defun))(put 'set-flyspell-predicate! 'doom-module '(:checkers . spell))(autoload '+syntax-init-popups-h "/home/jadench/.emacs.d/modules/checkers/syntax/autoload" "Activate `flycheck-posframe-mode' if available and in GUI Emacs.
Activate `flycheck-popup-tip-mode' otherwise.
Do nothing if `lsp-ui-mode' is active and `lsp-ui-sideline-enable' is non-nil." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/checkers/syntax/autoload" '("set-next-checker!")))(autoload 'set-next-checker! "/home/jadench/.emacs.d/modules/checkers/syntax/autoload.el" "TODO

(fn MODE CHECKER NEXT &optional APPEND)" nil nil)(put 'set-next-checker! 'doom-module '(:checkers . syntax))(defvar +company-backend-alist '((text-mode (:separate company-dabbrev company-yasnippet company-ispell)) (prog-mode company-capf company-yasnippet) (conf-mode company-capf company-dabbrev-code company-yasnippet)) "An alist matching modes to company backends. The backends for any mode is
built from this.")(autoload '+company-init-backends-h "/home/jadench/.emacs.d/modules/completion/company/autoload" "Set `company-backends' for the current buffer." nil nil)(autoload '+company-has-completion-p "/home/jadench/.emacs.d/modules/completion/company/autoload" "Return non-nil if a completion candidate exists at point." nil nil)(autoload '+company/toggle-auto-completion "/home/jadench/.emacs.d/modules/completion/company/autoload" "Toggle as-you-type code completion." t nil)(autoload '+company/complete "/home/jadench/.emacs.d/modules/completion/company/autoload" "Bring up the completion popup. If only one result, complete it." t nil)(autoload '+company/dabbrev "/home/jadench/.emacs.d/modules/completion/company/autoload" "Invokes `company-dabbrev-code' in prog-mode buffers and `company-dabbrev'
everywhere else." t nil)(autoload '+company/whole-lines "/home/jadench/.emacs.d/modules/completion/company/autoload" "`company-mode' completion backend that completes whole-lines, akin to vim's
C-x C-l.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload '+company/dict-or-keywords "/home/jadench/.emacs.d/modules/completion/company/autoload" "`company-mode' completion combining `company-dict' and `company-keywords'." t nil)(autoload '+company/dabbrev-code-previous "/home/jadench/.emacs.d/modules/completion/company/autoload" "TODO" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/completion/company/autoload" '("+company--backends" "set-company-backend!")))(progn (autoload 'set-company-backend! "/home/jadench/.emacs.d/modules/completion/company/autoload.el" "Prepends BACKENDS (in order) to `company-backends' in MODES.

MODES should be one symbol or a list of them, representing major or minor modes.
This will overwrite backends for MODES on consecutive uses.

If the car of BACKENDS is nil, unset the backends for MODES.

Examples:

  (set-company-backend! 'js2-mode
    'company-tide 'company-yasnippet)

  (set-company-backend! 'sh-mode
    '(company-shell :with company-yasnippet))

  (set-company-backend! '(c-mode c++-mode)
    '(:separate company-irony-c-headers company-irony))

  (set-company-backend! 'sh-mode nil)  ; unsets backends for sh-mode

(fn MODES &rest BACKENDS)" nil nil) (function-put 'set-company-backend! 'lisp-indent-function 'defun))(put 'set-company-backend! 'doom-module '(:completion . company))(autoload '+helm:project-search "~/.emacs.d/modules/completion/helm/autoload/evil" nil t)(autoload '+helm:project-search-from-cwd "~/.emacs.d/modules/completion/helm/autoload/evil" nil t)(autoload '+helm--set-prompt-display "/home/jadench/.emacs.d/modules/completion/helm/autoload/evil" "TODO

(fn POS)" nil nil)(autoload '+helm/projectile-find-file "/home/jadench/.emacs.d/modules/completion/helm/autoload/helm" "Call `helm-find-files' if called from HOME, otherwise
`helm-projectile-find-file'." t nil)(autoload '+helm/workspace-buffer-list "/home/jadench/.emacs.d/modules/completion/helm/autoload/helm" "A version of `helm-buffers-list' with its buffer list restricted to the
current workspace." t nil)(autoload '+helm/workspace-mini "/home/jadench/.emacs.d/modules/completion/helm/autoload/helm" "A version of `helm-mini' with its buffer list restricted to the current
workspace." t nil)(autoload '+helm-file-search "/home/jadench/.emacs.d/modules/completion/helm/autoload/helm" "Conduct a file search using ripgrep.

:query STRING
  Determines the initial input to search for.
:in PATH
  Sets what directory to base the search out of. Defaults to the current
  project's root.
:recursive BOOL
  Whether or not to search files recursively from the base directory.

(fn &key QUERY IN ALL-FILES (RECURSIVE t) PROMPT ARGS)" nil nil)(function-put '+helm-file-search 'lisp-indent-function 'defun)(autoload '+helm/project-search "/home/jadench/.emacs.d/modules/completion/helm/autoload/helm" "Performs a project search from the project root with ripgrep.

ARG (universal argument), include all files, even hidden or compressed ones, in
the search.

(fn &optional ARG INITIAL-QUERY DIRECTORY)" t nil)(autoload '+helm/project-search-from-cwd "/home/jadench/.emacs.d/modules/completion/helm/autoload/helm" "Performs a project search recursively from the current directory.

If ARG (universal argument), include all files, even hidden or compressed ones.

(fn &optional ARG INITIAL-QUERY)" t nil)(autoload '+helm/jump-list "/home/jadench/.emacs.d/modules/completion/helm/autoload/helm" "TODO" t nil)(autoload '+helm-poshandler-frame-center-near-bottom-fn "/home/jadench/.emacs.d/modules/completion/helm/autoload/posframe" "Display the child frame in the center of the frame, slightly closer to the
bottom, which is easier on the eyes on big displays.

(fn INFO)" nil nil)(autoload '+helm-posframe-display-fn "/home/jadench/.emacs.d/modules/completion/helm/autoload/posframe" "TODO

(fn BUFFER &optional RESUME)" nil nil)(autoload '+helm-posframe-cleanup-h "/home/jadench/.emacs.d/modules/completion/helm/autoload/posframe" "TODO" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/completion/helm/autoload/posframe" '("+helm--posframe-buffer")))(autoload '+ivy:project-search "~/.emacs.d/modules/completion/ivy/autoload/evil" nil t)(autoload '+ivy:project-search-from-cwd "~/.emacs.d/modules/completion/ivy/autoload/evil" nil t)(after! ivy-hydra (defhydra+ hydra-ivy (:hint nil :color pink) "
 Move     ^^^^^^^^^^ | Call         ^^^^ | Cancel^^ | Options^^ | Action _w_/_s_/_a_: %s(ivy-action-name)
----------^^^^^^^^^^-+--------------^^^^-+-------^^-+--------^^-+---------------------------------
 _g_ ^ ^ _k_ ^ ^ _u_ | _f_orward _o_ccur | _i_nsert | _c_alling: %-7s(if ivy-calling \"on\" \"off\") _C_ase-fold: %-10`ivy-case-fold-search
 ^↨^ _h_ ^+^ _l_ ^↕^ | _RET_ done     ^^ | _q_uit   | _m_atcher: %-7s(ivy--matcher-desc) _t_runcate: %-11`truncate-lines
 _G_ ^ ^ _j_ ^ ^ _d_ | _TAB_ alt-done ^^ | ^ ^      | _<_/_>_: shrink/grow
" ("l" ivy-alt-done) ("h" ivy-backward-delete-char) ("g" ivy-beginning-of-buffer) ("G" ivy-end-of-buffer) ("d" ivy-scroll-up-command) ("u" ivy-scroll-down-command) ("e" ivy-scroll-down-command) ("q" keyboard-escape-quit :exit t) ("<escape>" keyboard-escape-quit :exit t) ("TAB" ivy-alt-done :exit nil) ("RET" ivy-done :exit t) ("C-SPC" ivy-call-and-recenter :exit nil) ("f" ivy-call) ("c" ivy-toggle-calling) ("m" ivy-toggle-fuzzy) ("t" (setq truncate-lines (not truncate-lines))) ("o" ivy-occur :exit t)))(autoload '+ivy-rich-buffer-name "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Display the buffer name.

Buffers that are considered unreal (see `doom-real-buffer-p') are dimmed with
`+ivy-buffer-unreal-face'.

(fn CANDIDATE)" nil nil)(autoload '+ivy-rich-buffer-icon "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Display the icon for CANDIDATE buffer.

(fn CANDIDATE)" nil nil)(autoload '+ivy-rich-describe-variable-transformer "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Previews the value of the variable in the minibuffer

(fn CAND)" nil nil)(autoload '+ivy-format-function-line-or-arrow "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Transform CANDS into a string for minibuffer.

If in terminal, prefix candidates with a chevron to make it more obvious which
one you're selecting, especially in themes that can't set a good background for
`ivy-current-match'. This is a combination of `ivy-format-function-line' and
`ivy-format-function-arrow'.

In the GUI, this is the same as `ivy-format-function-line'.

(fn CANDS)" nil nil)(autoload '+ivy/switch-workspace-buffer "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Switch to another buffer within the current workspace.

If ARG (universal argument), open selection in other-window.

(fn &optional ARG)" t nil)(autoload '+ivy/switch-workspace-buffer-other-window "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Switch another window to a buffer within the current workspace." t nil)(autoload '+ivy/switch-buffer "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Switch to another buffer." t nil)(autoload '+ivy/switch-buffer-other-window "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Switch to another buffer in another window." t nil)(autoload '+ivy/woccur "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Invoke a wgrep buffer on the current ivy results, if supported." t nil)(autoload '+ivy-yas-prompt-fn "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "

(fn PROMPT CHOICES &optional DISPLAY-FN)" nil nil)(autoload '+ivy-git-grep-other-window-action "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Opens the current candidate in another window.

(fn X)" nil nil)(autoload '+ivy-confirm-delete-file "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "

(fn X)" nil nil)(autoload '+ivy/projectile-find-file "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "A more sensible `counsel-projectile-find-file', which will revert to
`counsel-find-file' if invoked from $HOME or /, `counsel-file-jump' if invoked
from a non-project, `projectile-find-file' if in a big project (more than
`ivy-sort-max-size' files), or `counsel-projectile-find-file' otherwise.

The point of this is to avoid Emacs locking up indexing massive file trees." t nil)(autoload '+ivy-file-search "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Conduct a file search using ripgrep.

:query STRING
  Determines the initial input to search for.
:in PATH
  Sets what directory to base the search out of. Defaults to the current
  project's root.
:recursive BOOL
  Whether or not to search files recursively from the base directory.

(fn &key QUERY IN ALL-FILES (RECURSIVE t) PROMPT ARGS)" nil nil)(function-put '+ivy-file-search 'lisp-indent-function 'defun)(autoload '+ivy/project-search "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Performs a live project search from the project root using ripgrep.

If ARG (universal argument), include all files, even hidden or compressed ones,
in the search.

(fn &optional ARG INITIAL-QUERY DIRECTORY)" t nil)(autoload '+ivy/project-search-from-cwd "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Performs a project search recursively from the current directory.

If ARG (universal argument), include all files, even hidden or compressed ones.

(fn &optional ARG INITIAL-QUERY)" t nil)(autoload '+ivy/compile "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Execute a compile command from the current buffer's directory." t nil)(autoload '+ivy/project-compile "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Execute a compile command from the current project's root." t nil)(autoload '+ivy/jump-list "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Go to an entry in evil's (or better-jumper's) jumplist." t nil)(autoload '+ivy/git-grep-other-window-action "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" "Open the current counsel-{ag,rg,git-grep} candidate in other-window." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/completion/ivy/autoload/ivy" '("+ivy--")))(autoload '+default/compile "/home/jadench/.emacs.d/modules/config/default/autoload/default" "Runs `compile' from the root of the current project.

If a compilation window is already open, recompile that instead.

If ARG (universal argument), runs `compile' from the current directory.

(fn ARG)" t nil)(autoload '+default/man-or-woman "/home/jadench/.emacs.d/modules/config/default/autoload/default" "Invoke `man' if man is installed and the platform is not MacOS, otherwise use `woman'.

`man -k \"^\"` is very slow on MacOS, which is what `Man-completion-table' uses to
generate `completing-read' candidates." t nil)(autoload '+default/new-buffer "/home/jadench/.emacs.d/modules/config/default/autoload/default" "TODO" t nil)(autoload '+default/restart-server "/home/jadench/.emacs.d/modules/config/default/autoload/default" "Restart the Emacs server." t nil)(autoload '+default/diagnostics "/home/jadench/.emacs.d/modules/config/default/autoload/default" "List diagnostics for the current buffer/project.
If the the vertico and lsp modules are active, list lsp diagnostics for the
current project. Otherwise list them for the current buffer

(fn &rest ARG)" t nil)(autoload '+default/lsp-command-map "/home/jadench/.emacs.d/modules/config/default/autoload/deferred" "Lazily invoke `lsp-command-map'." t nil)(autoload '+default/browse-project "/home/jadench/.emacs.d/modules/config/default/autoload/files" "Browse files from the current project's root." t nil)(autoload '+default/browse-templates "/home/jadench/.emacs.d/modules/config/default/autoload/files" "Browse files from `+file-templates-dir'." t nil)(autoload '+default/find-in-templates "/home/jadench/.emacs.d/modules/config/default/autoload/files" "Find a file under `+file-templates-dir', recursively." t nil)(autoload '+default/browse-notes "/home/jadench/.emacs.d/modules/config/default/autoload/files" "Browse files from `org-directory'." t nil)(autoload '+default/find-in-notes "/home/jadench/.emacs.d/modules/config/default/autoload/files" "Find a file under `org-directory', recursively." t nil)(autoload '+default/find-file-under-here "/home/jadench/.emacs.d/modules/config/default/autoload/files" "Perform a recursive file search from the current directory." t nil)(autoload '+default/discover-projects "/home/jadench/.emacs.d/modules/config/default/autoload/files" "Discover projects in `projectile-project-search-path'.
If prefix ARG is non-nil, prompt for the search path.

(fn ARG)" t nil)(autoload '+default/dired "/home/jadench/.emacs.d/modules/config/default/autoload/files" "Open a directory in dired.
If prefix ARG is non-nil, prompt for a known project to open in dired.

(fn ARG)" t nil)(autoload '+default/search-cwd "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in files under the current folder.
If prefix ARG is set, prompt for a directory to search from.

(fn &optional ARG)" t nil)(autoload '+default/search-other-cwd "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in another directory." t nil)(autoload '+default/search-emacsd "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in files under `user-emacs-directory'." t nil)(autoload '+default/search-buffer "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Conduct a text search on the current buffer.

If a selection is active and multi-line, perform a search restricted to that
region.

If a selection is active and not multi-line, use the selection as the initial
input and search the whole buffer for it." t nil)(autoload '+default/search-project "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in the current project root.
If prefix ARG is set, include ignored/hidden files.

(fn &optional ARG)" t nil)(autoload '+default/search-other-project "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in a known project." t nil)(autoload '+default/search-project-for-symbol-at-point "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Search current project for symbol at point.
If prefix ARG is set, prompt for a known project to search from.

(fn SYMBOL DIR)" t nil)(autoload '+default/search-notes-for-symbol-at-point "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in the current project for symbol at point. If prefix
ARG is set, prompt for a known project to search from.

(fn SYMBOL)" t nil)(autoload '+default/org-notes-search "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Perform a text search on `org-directory'.

(fn QUERY)" t nil)(autoload '+default/org-notes-headlines "/home/jadench/.emacs.d/modules/config/default/autoload/search" "Jump to an Org headline in `org-agenda-files'." t nil)(defalias '+default/newline #'electric-indent-just-newline)(autoload '+default/newline-above "/home/jadench/.emacs.d/modules/config/default/autoload/text" "Insert an indented new line before the current one." t nil)(autoload '+default/newline-below "/home/jadench/.emacs.d/modules/config/default/autoload/text" "Insert an indented new line after the current one." t nil)(autoload '+default/yank-pop "/home/jadench/.emacs.d/modules/config/default/autoload/text" "Interactively select what text to insert from the kill ring." t nil)(autoload '+default/yank-buffer-path "/home/jadench/.emacs.d/modules/config/default/autoload/text" "Copy the current buffer's path to the kill ring.

(fn &optional ROOT)" t nil)(autoload '+default/yank-buffer-path-relative-to-project "/home/jadench/.emacs.d/modules/config/default/autoload/text" "Copy the current buffer's path to the kill ring.
With non-nil prefix INCLUDE-ROOT, also include the project's root.

(fn &optional INCLUDE-ROOT)" t nil)(autoload '+default/insert-file-path "/home/jadench/.emacs.d/modules/config/default/autoload/text" "Insert the file name (absolute path if prefix ARG).
If `buffer-file-name' isn't set, uses `default-directory'.

(fn ARG)" t nil)(autoload 'doom/backward-delete-whitespace-to-column "/home/jadench/.emacs.d/modules/config/default/autoload/text" "Delete back to the previous column of whitespace, or as much whitespace as
possible, or just one char if that's not possible." t nil)(autoload '+default--delete-backward-char-a "/home/jadench/.emacs.d/modules/config/default/autoload/text" "Same as `delete-backward-char', but preforms these additional checks:

+ If point is surrounded by (balanced) whitespace and a brace delimiter ({} []
  ()), delete a space on either side of the cursor.
+ If point is at BOL and surrounded by braces on adjacent lines, collapse
  newlines:
  {
  |
  } => {|}
+ Otherwise, resort to `doom/backward-delete-whitespace-to-column'.
+ Resorts to `delete-char' if n > 1

(fn N &optional KILLFLAG)" t nil)(add-hook 'org-mode-hook #'+literate-enable-recompile-h)(autoload '+literate-tangle-h "/home/jadench/.emacs.d/modules/config/literate/autoload" "Tangles `+literate-config-file' if it has changed." nil nil)(defalias '+literate/reload #'doom/reload)(autoload '+literate-enable-recompile-h "/home/jadench/.emacs.d/modules/config/literate/autoload" "Enable literate-compiling-on-save in the current buffer." nil nil)(autoload '+literate-recompile-maybe-h "/home/jadench/.emacs.d/modules/config/literate/autoload" "Recompile literate config to `doom-private-dir'.

We assume any org file in `doom-private-dir' is connected to your literate
config, and should trigger a recompile if changed." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/config/literate/autoload" '("+literate-config-")))(autoload '+evil-escape-a "/home/jadench/.emacs.d/modules/editor/evil/autoload/advice" "Call `doom/escape' if `evil-force-normal-state' is called interactively.

(fn &rest _)" nil nil)(autoload '+evil-replace-filename-modifiers-a "/home/jadench/.emacs.d/modules/editor/evil/autoload/advice" "Take a path and resolve any vim-like filename modifiers in it. This adds
support for most vim file modifiers, as well as:

  %:P   Resolves to `doom-project-root'.

See http://vimdoc.sourceforge.net/htmldoc/cmdline.html#filename-modifiers for
more information on modifiers.

(fn FILE-NAME)" nil nil)(autoload '+evil--insert-newline-below-and-respect-comments-a "/home/jadench/.emacs.d/modules/editor/evil/autoload/advice" "

(fn FN COUNT)" nil nil)(autoload '+evil--insert-newline-above-and-respect-comments-a "/home/jadench/.emacs.d/modules/editor/evil/autoload/advice" "

(fn FN COUNT)" nil nil)(autoload '+evil-window-split-a "~/.emacs.d/modules/editor/evil/autoload/advice" nil t)(autoload '+evil-window-vsplit-a "~/.emacs.d/modules/editor/evil/autoload/advice" nil t)(autoload '+evil-join-a "~/.emacs.d/modules/editor/evil/autoload/advice" nil nil)(autoload '+evil--fix-dabbrev-in-minibuffer-h "/home/jadench/.emacs.d/modules/editor/evil/autoload/advice" "Make `try-expand-dabbrev' from `hippie-expand' work in minibuffer. See
`he-dabbrev-beg', so we need to redefine syntax for '/'." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/evil/autoload/advice" '("+evil-")))(autoload '+evil--embrace-get-pair "/home/jadench/.emacs.d/modules/editor/evil/autoload/embrace" "

(fn CHAR)" nil nil)(autoload '+evil--embrace-escaped "/home/jadench/.emacs.d/modules/editor/evil/autoload/embrace" "Backslash-escaped surround character support for embrace." nil nil)(autoload '+evil--embrace-latex "/home/jadench/.emacs.d/modules/editor/evil/autoload/embrace" "LaTeX command support for embrace." nil nil)(autoload '+evil--embrace-elisp-fn "/home/jadench/.emacs.d/modules/editor/evil/autoload/embrace" "Elisp function support for embrace." nil nil)(autoload '+evil--embrace-angle-brackets "/home/jadench/.emacs.d/modules/editor/evil/autoload/embrace" "Type/generic angle brackets." nil nil)(autoload '+evil/shift-right "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" "vnoremap < <gv" t nil)(autoload '+evil/shift-left "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" "vnoremap > >gv" t nil)(autoload '+evil/alt-paste "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" "Call `evil-paste-after' but invert `evil-kill-on-visual-paste'.
By default, this replaces the selection with what's in the clipboard without
replacing its contents." t nil)(autoload '+evil/window-move-left "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows to the left." t nil)(autoload '+evil/window-move-right "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows to the right" t nil)(autoload '+evil/window-move-up "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows upward." t nil)(autoload '+evil/window-move-down "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows downward." t nil)(autoload '+evil/window-split-and-follow "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" "Split current window horizontally, then focus new window.
If `evil-split-window-below' is non-nil, the new window isn't focused." t nil)(autoload '+evil/window-vsplit-and-follow "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" "Split current window vertically, then focus new window.
If `evil-vsplit-window-right' is non-nil, the new window isn't focused." t nil)(autoload '+evil:apply-macro "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil:retab "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil:narrow-buffer "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil:yank-unindented "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil-delete "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil" '("+evil--window-swap" "set-evil-initial-state!")))(progn (autoload 'set-evil-initial-state! "/home/jadench/.emacs.d/modules/editor/evil/autoload/evil.el" "Set the initialize STATE of MODES using `evil-set-initial-state'.

(fn MODES STATE)" nil nil) (function-put 'set-evil-initial-state! 'lisp-indent-function 'defun))(put 'set-evil-initial-state! 'doom-module '(:editor . evil))(autoload '+evil-ex-regexp-match "/home/jadench/.emacs.d/modules/editor/evil/autoload/ex" "

(fn FLAG &optional ARG INVERT)" nil nil)(autoload '+evil:align "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:align-right "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:open-scratch-buffer "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:pwd "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:make "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:compile "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:reverse-lines "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:cd "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:kill-all-buffers "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:kill-matching-buffers "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:help "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:read "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/evil/autoload/ex" '("+evil--")))(autoload '+evil:delete-this-file "~/.emacs.d/modules/editor/evil/autoload/files" nil t)(autoload '+evil:move-this-file "~/.emacs.d/modules/editor/evil/autoload/files" nil t)(autoload '+evil:copy-this-file "~/.emacs.d/modules/editor/evil/autoload/files" nil t)(autoload '+evil:whole-buffer-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:defun-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:inner-url-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:outer-url-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:inner-any-quote "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:outer-any-quote "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil/next-beginning-of-method "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th method/function after point.

(fn COUNT)" t nil)(autoload '+evil/previous-beginning-of-method "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th method/function before point.

(fn COUNT)" t nil)(defalias #'+evil/next-end-of-method #'end-of-defun "Jump to the end of the COUNT-th method/function after point.")(autoload '+evil/previous-end-of-method "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the end of the COUNT-th method/function before point.

(fn COUNT)" t nil)(autoload '+evil/next-preproc-directive "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the COUNT-th preprocessor directive after point.

By default, this only recognizes C preproc directives. To change this see
`+evil-preprocessor-regexp'.

(fn COUNT)" t nil)(autoload '+evil/previous-preproc-directive "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the COUNT-th preprocessor directive before point.

See `+evil/next-preproc-directive' for details.

(fn COUNT)" t nil)(autoload '+evil/next-comment "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th commented region after point.

(fn COUNT)" t nil)(autoload '+evil/previous-comment "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th commented region before point.

(fn COUNT)" t nil)(autoload '+evil/insert-newline-below "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Insert COUNT blank line(s) below current line. Does not change modes.

(fn COUNT)" t nil)(autoload '+evil/insert-newline-above "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Insert COUNT blank line(s) above current line. Does not change modes.

(fn COUNT)" t nil)(autoload '+evil/next-frame "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Focus next frame.

(fn COUNT)" t nil)(autoload '+evil/previous-frame "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Focus previous frame.

(fn COUNT)" t nil)(autoload '+evil/next-file "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Open file following this one, alphabetically, in the same directory.

(fn COUNT)" t nil)(autoload '+evil/previous-file "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Open file preceding this one, alphabetically, in the same directory.

(fn COUNT)" t nil)(autoload '+evil:url-encode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil:url-decode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil:c-string-encode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil:c-string-decode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil/reselect-paste "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" "Return to visual mode and reselect the last pasted region." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/evil/autoload/unimpaired" '("+evil--")))(autoload '+file-templates--expand "/home/jadench/.emacs.d/modules/editor/file-templates/autoload" "Auto insert a yasnippet snippet into current file and enter insert mode (if
evil is loaded and enabled).

(fn PRED &key PROJECT MODE TRIGGER IGNORE WHEN)" nil nil)(autoload '+file-templates-get-short-path "/home/jadench/.emacs.d/modules/editor/file-templates/autoload" "Fetches a short file path for the header in Doom module templates." nil nil)(autoload '+file-templates/insert-license "/home/jadench/.emacs.d/modules/editor/file-templates/autoload" "Insert a license file template into the current file." t nil)(autoload '+file-templates/debug "/home/jadench/.emacs.d/modules/editor/file-templates/autoload" "Tests the current buffer and outputs the file template rule most appropriate
for it. This is used for testing." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/file-templates/autoload" '("+file-templates--set" "set-file-template")))(progn (autoload 'set-file-template! "/home/jadench/.emacs.d/modules/editor/file-templates/autoload.el" "Register a file template.

PRED can either be a regexp string or a major mode symbol. PLIST may contain
these properties:

  :when FUNCTION
    Provides a secondary predicate. This function takes no arguments and is
    executed from within the target buffer. If it returns nil, this rule will be
    skipped over.
  :trigger STRING|FUNCTION
    If a string, this is the yasnippet trigger keyword used to trigger the
      target snippet.
    If a function, this function will be run in the context of the buffer to
      insert a file template into. It is given no arguments and must insert text
      into the current buffer manually.
    If omitted, `+file-templates-default-trigger' is used.
  :mode SYMBOL
    What mode to get the yasnippet snippet from. If omitted, either PRED (if
    it's a major-mode symbol) or the mode of the buffer is used.
  :project BOOL
    If non-nil, ignore this template if this buffer isn't in a project.
  :ignore BOOL
    If non-nil, don't expand any template for this file and don't test any other
    file template rule against this buffer.

(fn PRED &key WHEN TRIGGER MODE PROJECT IGNORE)" nil nil) (function-put 'set-file-template! 'lisp-indent-function 'defun))(put 'set-file-template! 'doom-module '(:editor . file-templates))(autoload 'set-file-templates! "/home/jadench/.emacs.d/modules/editor/file-templates/autoload.el" "Like `set-file-template!', but can register multiple file templates at once.

(fn &rest (PRED &key WHEN TRIGGER MODE PROJECT IGNORE))" nil nil)(put 'set-file-templates! 'doom-module '(:editor . file-templates))(autoload '+fold/toggle "/home/jadench/.emacs.d/modules/editor/fold/autoload/fold" "Toggle the fold at point.

Targets `vimmish-fold', `hideshow' and `outline' folds." t nil)(autoload '+fold/open "/home/jadench/.emacs.d/modules/editor/fold/autoload/fold" "Open the folded region at point.

Targets `vimmish-fold', `hideshow' and `outline' folds." t nil)(autoload '+fold/close "/home/jadench/.emacs.d/modules/editor/fold/autoload/fold" "Close the folded region at point.

Targets `vimmish-fold', `hideshow' and `outline' folds." t nil)(autoload '+fold/open-all "/home/jadench/.emacs.d/modules/editor/fold/autoload/fold" "Open folds at LEVEL (or all folds if LEVEL is nil).

(fn &optional LEVEL)" t nil)(autoload '+fold/close-all "/home/jadench/.emacs.d/modules/editor/fold/autoload/fold" "Close folds at LEVEL (or all folds if LEVEL is nil).

(fn &optional LEVEL)" t nil)(autoload '+fold/next "/home/jadench/.emacs.d/modules/editor/fold/autoload/fold" "Jump to the next vimish fold, outline heading or folded region.

(fn COUNT)" t nil)(autoload '+fold/previous "/home/jadench/.emacs.d/modules/editor/fold/autoload/fold" "Jump to the previous vimish fold, outline heading or folded region.

(fn COUNT)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/fold/autoload/fold" '("+fold-")))(autoload '+fold-hideshow-haml-forward-sexp-fn "/home/jadench/.emacs.d/modules/editor/fold/autoload/hideshow" "

(fn ARG)" nil nil)(autoload '+fold-hideshow-forward-block-by-indent-fn "/home/jadench/.emacs.d/modules/editor/fold/autoload/hideshow" "

(fn ARG)" nil nil)(autoload '+fold-hideshow-set-up-overlay-fn "/home/jadench/.emacs.d/modules/editor/fold/autoload/hideshow" "

(fn OV)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/fold/autoload/hideshow" '("+fold-")))(cl-defmacro set-formatter! (name formatter &key modes filter ok-statuses error-regexp) "THIS FUNCTION DOES NOTHING BECAUSE (:editor . format) IS DISABLED

Define (or modify) a formatter named NAME.

Supported keywords: :modes :filter :ok-statuses :error-regexp

NAME is a symbol that identifies this formatter.

FORMATTER can be a symbol referring to another formatter, a function, string or
nested list.

  If a function, it should be a formatter function that
    `format-all--buffer-thunk' will accept.
  If a string, it is assumed to be a shell command that the buffer's text will
    be piped to (through stdin).
  If a list, it should represent a shell command as a list of arguments. Each
    element is either a string or list (STRING ARG) where STRING is a format
    string and ARG is both a predicate and argument for STRING. If ARG is nil,
    STRING will be omitted from the vector.

MODES is a major mode, a list thereof, or a list of two-element sublists with
the structure: (MAJOR-MODE FORM). FORM is evaluated when the buffer is formatted
and its return value serves two purposes:

  1. It is a predicate for this formatter. Assuming the MAJOR-MODE matches the
     current mode, if FORM evaluates to nil, the formatter is skipped.
  2. It's return value is made available to FORMATTER if it is a function or
     list of shell arguments via the `mode-result' variable.

FILTER is a function that takes three arguments: the formatted output, any error
output and the position of the first change. This function must return these
three after making whatever changes you like to them. This might be useful if
the output contains ANSI color codes that need to be stripped out (as is the
case with elm-format).

OK-STATUSES and ERROR-REGEXP are ignored if FORMATTER is not a shell command.

OK-STATUSES is a list of integer exit codes that should be treated as success
codes. However, if ERROR-REGEXP is given, and the program's stderr contains that
regexp, then the formatting is considered failed even if the exit status is in
OK-STATUSES.

Basic examples:

  (set-formatter! 'asmfmt \"asmfmt\" :modes '(asm-mode nasm-mode))
  (set-formatter! 'black \"black -q -\")
  (set-formatter! 'html-tidy \"tidy -q -indent\" :modes '(html-mode web-mode))

Advanced examples:

  (set-formatter!
    'clang-format
    '(\"clang-format\"
      (\"-assume-filename=%S\" (or buffer-file-name mode-result \"\")))
    :modes
    '((c-mode \".c\")
      (c++-mode \".cpp\")
      (java-mode \".java\")
      (objc-mode \".m\")
      (protobuf-mode \".proto\")))

  (set-formatter! 'html-tidy
    '(\"tidy\" \"-q\" \"-indent\"
      (\"-xml\" (memq major-mode '(nxml-mode xml-mode))))
    :modes
    '(html-mode
      (web-mode (and (equal \"none\" web-mode-engine)
                     (car (member web-mode-content-type '(\"xml\" \"html\"))))))
    :ok-statuses '(0 1)
    :executable \"tidy\")

  (set-formatter! 'html-tidy  ; overwrite predefined html-tidy formatter
    '(\"tidy\" \"-q\" \"-indent\"
      \"--tidy-mark\" \"no\"
      \"--drop-empty-elements\" \"no\"
      \"--show-body-only\" \"auto\"
      (\"--indent-spaces\" \"%d\" tab-width)
      (\"--indent-with-tabs\" \"%s\" (if indent-tabs-mode \"yes\" \"no\"))
      (\"-xml\" (memq major-mode '(nxml-mode xml-mode))))
    :ok-statuses '(0 1)))

  (set-formatter! 'elm-format
    \"elm-format --yes --stdin\"
    :filter
    (lambda (output errput first-diff)
      (list output
            (format-all--remove-ansi-color errput)
            first-diff)))" (ignore name formatter modes filter ok-statuses error-regexp))(put 'set-formatter! 'doom-module '(:editor . format))(cl-defmacro set-rotate-patterns! (modes &key symbols words patterns) "THIS FUNCTION DOES NOTHING BECAUSE (:editor . rotate-text) IS DISABLED

Declare :symbols, :words or :patterns (all lists of strings) that
`rotate-text' will cycle through." (ignore modes symbols words patterns))(put 'set-rotate-patterns! 'doom-module '(:editor . rotate-text))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/snippets/autoload/settings" '("set-yas-minor-mode!")))(autoload 'set-yas-minor-mode! "/home/jadench/.emacs.d/modules/editor/snippets/autoload/settings.el" "Register minor MODES (one mode symbol or a list of them) with yasnippet so it
can have its own snippets category, if the folder exists.

(fn MODES)" nil nil)(put 'set-yas-minor-mode! 'doom-module '(:editor . snippets))(autoload '+snippets-prompt-private "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Prioritize private snippets over built-in ones if there are multiple
choices.

There are two groups of snippets in Doom Emacs. The built in ones (under
`doom-emacs-dir'; provided by Doom or its plugins) or your private snippets
(outside of `doom-eamcs-dir').

If there are multiple snippets with the same key in either camp (but not both),
you will be prompted to select one.

If there are conflicting keys across the two camps, the built-in ones are
ignored. This makes it easy to override built-in snippets with private ones.

(fn PROMPT CHOICES &optional DISPLAY-FN)" nil nil)(autoload '+snippets/goto-start-of-field "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Go to the beginning of the current field." t nil)(autoload '+snippets/goto-end-of-field "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Go to the end of the current field." t nil)(autoload '+snippets/delete-backward-char "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Prevents Yas from interfering with backspace deletion.

(fn &optional FIELD)" t nil)(autoload '+snippets/delete-forward-char-or-field "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Delete forward, or skip the current field if it's empty. This is to prevent
buggy behavior when <delete> is pressed in an empty field.

(fn &optional FIELD)" t nil)(autoload '+snippets/delete-to-start-of-field "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Delete to start-of-field.

(fn &optional FIELD)" t nil)(autoload '+snippets/find "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Open a snippet file (in all of `yas-snippet-dirs')." t nil)(autoload '+snippets/find-private "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Open a private snippet file in `+snippets-dir'." t nil)(autoload '+snippets/find-for-current-mode "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Open a snippet for this mode.

(fn TEMPLATE-UUID)" t nil)(autoload '+snippets/new "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Create a new snippet in `+snippets-dir'." t nil)(autoload '+snippets/new-alias "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Create an alias for a snippet with uuid TEMPLATE-UUID.

You will be prompted for a snippet to alias.

(fn TEMPLATE-UUID)" t nil)(autoload '+snippets/edit "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Edit a snippet with uuid TEMPLATE-UUID.

If the snippet isn't in `+snippets-dir', it will be copied there (where it will
shadow the default snippet).

(fn TEMPLATE-UUID)" t nil)(autoload '+snippets-show-hints-in-header-line-h "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" nil nil nil)(autoload '+snippets-enable-project-modes-h "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Automatically enable snippet libraries for project minor modes defined with
`def-project-mode!'.

(fn MODE &rest _)" nil nil)(autoload '+snippets-read-only-maybe-h "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Enable `read-only-mode' if snippet is built-in." nil nil)(autoload '+snippets-expand-on-region-a "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" "Fix off-by-one when expanding snippets on an evil visual region.

Also strips whitespace out of selection. Also switches to insert mode. If
`evil-local-mode' isn't enabled, or we're not in visual mode, run FN as is.

(fn FN &optional NO-CONDITION)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/snippets/autoload/snippets" '("+snippet")))(autoload '+word-wrap-mode "/home/jadench/.emacs.d/modules/editor/word-wrap/autoload" "Wrap long lines in the buffer with language-aware indentation.

If called interactively, enable +Word-Wrap mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

This mode configures `adaptive-wrap' and `visual-line-mode' to wrap long lines
without modifying the buffer content. This is useful when dealing with legacy
code which contains gratuitously long lines, or running emacs on your
wrist-phone.

Wrapped lines will be indented to match the preceding line. In code buffers,
lines which are not inside a string or comment will have additional indentation
according to the configuration of `+word-wrap-extra-indent'.

(fn &optional ARG)" t nil)(put '+global-word-wrap-mode 'globalized-minor-mode t)(defvar +global-word-wrap-mode nil "Non-nil if +Global-Word-Wrap mode is enabled.
See the `+global-word-wrap-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `+global-word-wrap-mode'.")(autoload '+global-word-wrap-mode "/home/jadench/.emacs.d/modules/editor/word-wrap/autoload" "Toggle +Word-Wrap mode in all buffers.
With prefix ARG, enable +Global-Word-Wrap mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

+Word-Wrap mode is enabled in all buffers where
`+word-wrap--enable-global-mode' would do it.
See `+word-wrap-mode' for more information on +Word-Wrap mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/editor/word-wrap/autoload" '("+word-wrap--")))(autoload '+dired/quit-all "/home/jadench/.emacs.d/modules/emacs/dired/autoload" "Kill all `dired-mode' buffers." t nil)(autoload '+dired-enable-git-info-h "/home/jadench/.emacs.d/modules/emacs/dired/autoload" "Enable `dired-git-info-mode' in git repos." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/emacs/electric/autoload" '("set-electric!")))(progn (autoload 'set-electric! "/home/jadench/.emacs.d/modules/emacs/electric/autoload.el" "Declare that WORDS (list of strings) or CHARS (lists of chars) should trigger
electric indentation.

Enables `electric-indent-local-mode' in MODES.

(fn MODES &key WORDS CHARS)" nil nil) (function-put 'set-electric! 'lisp-indent-function 'defun))(put 'set-electric! 'doom-module '(:emacs . electric))(autoload 'bug-reference-try-setup-from-vc "/home/jadench/.emacs.d/modules/emacs/vc/autoload/bug-reference-backport" "Try setting up `bug-reference-mode' based on VC information.
Test each configuration in `bug-reference-setup-from-vc-alist'
and apply it if applicable." nil nil)(add-hook! '(bug-reference-mode-hook bug-reference-prog-mode-hook) (defun +vc-init-bug-reference-from-vc-h nil (when (or bug-reference-mode bug-reference-prog-mode) (unless (and bug-reference-bug-regexp bug-reference-url-format) (bug-reference-try-setup-from-vc)))))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/emacs/vc/autoload/bug-reference-backport" '("bug-reference-")))(autoload '+vc/smerge-hydra/body "~/.emacs.d/modules/emacs/vc/autoload/hydra" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/emacs/vc/autoload/hydra" '("+vc/smerge-hydra")))(autoload '+vc/browse-at-remote "/home/jadench/.emacs.d/modules/emacs/vc/autoload/vc" "Open URL to current file (and line if selection is active) in browser.
If prefix ARG, negate the default value of `browse-at-remote-prefer-symbolic'.

(fn &optional ARG)" t nil)(autoload '+vc/browse-at-remote-kill "/home/jadench/.emacs.d/modules/emacs/vc/autoload/vc" "Copy URL to current file (and line if selection is active) to clipboard.
If prefix ARG, negate the default value of `browse-at-remote-prefer-symbolic'.

(fn &optional ARG)" t nil)(autoload '+vc/browse-at-remote-homepage "/home/jadench/.emacs.d/modules/emacs/vc/autoload/vc" "Open homepage for current project in browser." t nil)(autoload '+vc/browse-at-remote-kill-homepage "/home/jadench/.emacs.d/modules/emacs/vc/autoload/vc" "Copy homepage URL of current project to clipboard." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/emacs/vc/autoload/vc" '("+vc--remote-homepage")))(defmacro set-email-account! (label letvars &optional default-p) "THIS FUNCTION DOES NOTHING BECAUSE (:email . mu4e) IS DISABLED

Registers an email address for mu4e. The LABEL is a string. LETVARS are a
list of cons cells (VARIABLE . VALUE) -- you may want to modify:

 + `user-full-name' (used to populate the FROM field when composing mail)
 + `user-mail-address' (required in mu4e < 1.4)
 + `smtpmail-smtp-user' (required for sending mail from Emacs)

OPTIONAL:
 + `mu4e-sent-folder'
 + `mu4e-drafts-folder'
 + `mu4e-trash-folder'
 + `mu4e-refile-folder'
 + `mu4e-compose-signature'
 + `+mu4e-personal-addresses'

DEFAULT-P is a boolean. If non-nil, it marks that email account as the
default/fallback account." (ignore label letvars default-p))(put 'set-email-account! 'doom-module '(:email . mu4e))(defalias 'cpp-mode 'c++-mode)(defvaralias 'cpp-mode-map 'c++-mode-map)(autoload '+cc-c++-lineup-inclass "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Indent inclass lines one level further than access modifier keywords.

(fn LANGELEM)" nil nil)(autoload '+cc-lineup-arglist-close "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Line up the closing brace in an arglist with the opening brace IF cursor is
preceded by the opening brace or a comma (disregarding whitespace in between).

(fn LANGLEM)" nil nil)(autoload '+cc-c-c++-objc-mode "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Uses heuristics to detect `c-mode', `objc-mode' or `c++-mode'.

1. Checks if there are nearby cpp/cc/m/mm files with the same name.
2. Checks for ObjC and C++-specific keywords and libraries.
3. Falls back to `+cc-default-header-file-mode', if set.
4. Otherwise, activates `c-mode'.

This is meant to replace `c-or-c++-mode' (introduced in Emacs 26.1), which
doesn't support specification of the fallback mode and whose heuristics are
simpler." nil nil)(autoload '+cc/reload-compile-db "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Reload the current project's JSON compilation database." t nil)(autoload '+cc/imenu "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Invoke `rtags-imenu' if a running rdm process is available, otherwise invoke
`imenu'." t nil)(autoload '+cc/eglot-ccls-show-inheritance-hierarchy "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Show inheritance hierarchy for the thing at point.
If DERIVED is non-nil (interactively, with prefix argument), show
the children of class at point.

(fn &optional DERIVED)" t nil)(autoload '+cc-cmake-lookup-documentation-fn "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Look up the symbol at point in CMake's documentation.

(fn _)" nil nil)(autoload '+cc-fontify-constants-h "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Better fontification for preprocessor constants" nil nil)(autoload '+cc-init-irony-compile-options-h "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Initialize compiler options for irony-mode. It searches for the nearest
compilation database and initailizes it, otherwise falling back on
`+cc-default-compiler-options' and `+cc-default-include-paths'.

See https://github.com/Sarcasm/irony-mode#compilation-database for details on
compilation dbs." nil nil)(autoload '+cc-init-ffap-integration-h "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Takes the local project include paths and registers them with ffap.
This way, `find-file-at-point' (and `+lookup/file') will know where to find most
header files." nil nil)(autoload '+cc/ccls-show-callee "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Show callees of symbol under point." t nil)(autoload '+cc/ccls-show-caller "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Show callers of symbol under point." t nil)(autoload '+cc/ccls-show-vars "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Show variables of type KIND as symbol under point.
   1 -> field
   2 -> local variable
   3 -> field or local variables. 3 = 1 | 2.
   4 -> parameter

(fn KIND)" nil nil)(autoload '+cc/ccls-show-base "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Show bases of class under point up to LEVELS levels (1 for direct bases).

(fn LEVELS)" nil nil)(autoload '+cc/ccls-show-derived "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Show derived classes from class under point down to LEVELS levels (1 for direct derived).

(fn LEVELS)" nil nil)(autoload '+cc/ccls-show-member "/home/jadench/.emacs.d/modules/lang/cc/autoload" "Show member elements of kind KIND for class/namespace under point.
   0 -> member variables/ variables in a namespace
   2 -> nested classes / types in a namespace
   3 -> member functions / functions in a namespace

(fn KIND)" nil nil)(autoload '+cc/ccls-show-references-address "/home/jadench/.emacs.d/modules/lang/cc/autoload" "References w/ Role::Address bit (e.g. variables explicitly being taken addresses)" t nil)(autoload '+cc/ccls-show-references-macro "/home/jadench/.emacs.d/modules/lang/cc/autoload" "References w/ Role::Dynamic bit (macro expansions)" t nil)(autoload '+cc/ccls-show-references-not-call "/home/jadench/.emacs.d/modules/lang/cc/autoload" "References w/o Role::Call bit (e.g. where functions are taken addresses)" t nil)(autoload '+cc/ccls-show-references-read "/home/jadench/.emacs.d/modules/lang/cc/autoload" "References w/ Role::Read" t nil)(autoload '+cc/ccls-show-references-write "/home/jadench/.emacs.d/modules/lang/cc/autoload" "References w/ Role::Write" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/lang/cc/autoload" '("+cc-")))(autoload '+emacs-lisp-eval "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Evaluate a region and print it to the echo area (if one line long), otherwise
to a pop up buffer.

(fn BEG END)" nil nil)(autoload '+emacs-lisp-lookup-definition "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Lookup definition of THING.

(fn THING)" nil nil)(autoload '+emacs-lisp-lookup-documentation "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Lookup THING with `helpful-variable' if it's a variable, `helpful-callable'
if it's callable, `apropos' otherwise.

(fn THING)" nil nil)(autoload '+emacs-lisp-indent-function "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "A replacement for `lisp-indent-function'.

Indents plists more sensibly. Adapted from
https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned

(fn INDENT-POINT STATE)" nil nil)(autoload '+emacs-lisp/open-repl "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Open the Emacs Lisp REPL (`ielm')." t nil)(autoload '+emacs-lisp/buttercup-run-file "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Run all buttercup tests in the focused buffer." t nil)(autoload '+emacs-lisp/buttercup-run-project "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Run all buttercup tests in the project." t nil)(autoload '+emacs-lisp/edebug-instrument-defun-on "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Toggle on instrumentalisation for the function under `defun'." t nil)(autoload '+emacs-lisp/edebug-instrument-defun-off "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Toggle off instrumentalisation for the function under `defun'." t nil)(autoload '+emacs-lisp-init-straight-maybe-h "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Make sure straight sees modifications to installed packages." nil nil)(autoload '+emacs-lisp-extend-imenu-h "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Improve imenu support in `emacs-lisp-mode', including recognition for Doom's API." nil nil)(autoload '+emacs-lisp-reduce-flycheck-errors-in-emacs-config-h "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Remove `emacs-lisp-checkdoc' checker and reduce `emacs-lisp' checker
verbosity when editing a file in `doom-private-dir' or `doom-emacs-dir'." nil nil)(autoload '+emacs-lisp-truncate-pin "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Truncates long SHA1 hashes in `package!' :pin's." nil nil)(autoload '+emacs-lisp-highlight-vars-and-faces "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" "Match defined variables and functions.

Functions are differentiated into special forms, built-in functions and
library/userland functions

(fn END)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/lang/emacs-lisp/autoload" '("+emacs-lisp--")))(autoload '+java-android-mode-is-layout-file "/home/jadench/.emacs.d/modules/lang/java/autoload/java" nil nil nil)(autoload '+java-android-mode-in-tags "/home/jadench/.emacs.d/modules/lang/java/autoload/java" "

(fn &rest TAGS)" nil nil)(autoload '+java-android-mode-tag-name "/home/jadench/.emacs.d/modules/lang/java/autoload/java" nil nil nil)(autoload '+java-android-mode-maybe-h "/home/jadench/.emacs.d/modules/lang/java/autoload/java" "Enable `android-mode' if this looks like an android project.

It determines this by the existence of AndroidManifest.xml or
src/main/AndroidManifest.xml." nil nil)(autoload '+java-current-package "/home/jadench/.emacs.d/modules/lang/java/autoload/java" "Converts the current file's path into a namespace.

For example: ~/some/project/src/net/lissner/game/MyClass.java
Is converted to: net.lissner.game

It does this by ignoring everything before the nearest package root (see
`+java-project-package-roots' to control what this function considers a package
root)." nil nil)(autoload '+java-current-class "/home/jadench/.emacs.d/modules/lang/java/autoload/java" "Get the class name for the current file." nil nil)(autoload '+java/open-groovy-repl "/home/jadench/.emacs.d/modules/lang/java/autoload/java" "Open a Groovy REPL." t nil)(autoload '+javascript-npm-conf "/home/jadench/.emacs.d/modules/lang/javascript/autoload" "Retrieves an alist of this project's 'package.json'. If REFRESH-P is non-nil
ignore the cache.

(fn &optional PROJECT-ROOT REFRESH-P)" nil nil)(autoload '+javascript-npm-dep-p "/home/jadench/.emacs.d/modules/lang/javascript/autoload" "

(fn PACKAGES &optional PROJECT-ROOT REFRESH-P)" nil nil)(autoload '+javascript/open-repl "/home/jadench/.emacs.d/modules/lang/javascript/autoload" "Open a Javascript REPL. Meaning either `skewer-repl', if any of the
skewer-*-mode's are enabled, or `nodejs-repl' otherwise." t nil)(autoload '+javascript/skewer-this-buffer "/home/jadench/.emacs.d/modules/lang/javascript/autoload" "Toggle a globalized skewer-mode, attaching an external browser (once),
initiating an internal httpd server (once) and enabling the appropriate
skewer-mode for the current buffer.

Run this for any buffer you want to skewer." t nil)(autoload '+javascript/skewer-cleanup "/home/jadench/.emacs.d/modules/lang/javascript/autoload" "Disable skewer-mode globally and disable the httpd server." t nil)(autoload '+javascript-cleanup-tide-processes-h "/home/jadench/.emacs.d/modules/lang/javascript/autoload" "Clean up dangling tsserver processes if there are no more buffers with
`tide-mode' active that belong to that server's project." nil nil)(autoload '+javascript-tide-project-root-a "/home/jadench/.emacs.d/modules/lang/javascript/autoload" "Resolve to `doom-project-root' if `tide-project-root' fails." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/lang/javascript/autoload" '("+javascript-npm-conf")))(autoload '+latex-indent-item-fn "/home/jadench/.emacs.d/modules/lang/latex/autoload" "Indent LaTeX \"itemize\",\"enumerate\", and \"description\" environments.

\"\\item\" is indented `LaTeX-indent-level' spaces relative to the the beginning
of the environment.

See `LaTeX-indent-level-item-continuation' for the indentation strategy this
function uses." nil nil)(autoload '+latex-fold-last-macro-a "/home/jadench/.emacs.d/modules/lang/latex/autoload" "Advice to auto-fold LaTeX macros after functions that
typically insert macros.

(fn &rest _)" nil nil)(autoload '+latex-symbols-company-backend "/home/jadench/.emacs.d/modules/lang/latex/autoload" "A wrapper backend for `company-mode' that either uses
`company-math-symbols-unicode' or `company-math-symbols-latex'. If
`+latex-enable-unicode-math' is non-nil use the former, otherwise the latter.

(fn COMMAND &optional ARG &rest IGNORED)" nil nil)(autoload '+markdown-flyspell-word-p "/home/jadench/.emacs.d/modules/lang/markdown/autoload" "Return t if `flyspell' should check word before point.

Used for `flyspell-generic-check-word-predicate'. Like
`markdown-flyspell-check-word-p', but also:

a) Performs spell check in code comments and
b) Inhibits spell check in html markup" nil nil)(autoload '+markdown-compile "/home/jadench/.emacs.d/modules/lang/markdown/autoload" "Compile markdown into html.

Runs `+markdown-compile-functions' until the first function to return non-nil,
otherwise throws an error.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown-compile-marked "/home/jadench/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown with the marked program, if available.
Returns its exit code.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown-compile-pandoc "/home/jadench/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown with the pandoc program, if available.
Returns its exit code.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown-compile-multimarkdown "/home/jadench/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown with the multimarkdown program, if available. Returns its
exit code.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown-compile-markdown "/home/jadench/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown using the Markdown.pl script (or markdown executable), if
available. Returns its exit code.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown/insert-del "/home/jadench/.emacs.d/modules/lang/markdown/autoload" "Surround region in github strike-through delimiters." t nil)(autoload '+org-attach-icon-for "/home/jadench/.emacs.d/modules/lang/org/autoload/org-attach" "

(fn PATH)" nil nil)(autoload '+org/open-gallery-from-attachments "/home/jadench/.emacs.d/modules/lang/org/autoload/org-attach" "TODO" t nil)(autoload '+org/find-file-in-attachments "/home/jadench/.emacs.d/modules/lang/org/autoload/org-attach" "Open a file from `org-attach-id-dir'." t nil)(autoload '+org/attach-file-and-insert-link "/home/jadench/.emacs.d/modules/lang/org/autoload/org-attach" "Downloads the file at PATH and insert an org link at point.
PATH (a string) can be an url, a local file path, or a base64 encoded datauri.

(fn PATH)" t nil)(autoload '+org-headline-avy "/home/jadench/.emacs.d/modules/lang/org/autoload/org-avy" "TODO" nil nil)(autoload '+org/goto-visible "/home/jadench/.emacs.d/modules/lang/org/autoload/org-avy" "TODO" t nil)(autoload '+org-eval-handler "/home/jadench/.emacs.d/modules/lang/org/autoload/org-babel" "TODO

(fn BEG END)" nil nil)(autoload '+org-lookup-definition-handler "/home/jadench/.emacs.d/modules/lang/org/autoload/org-babel" "TODO

(fn IDENTIFIER)" nil nil)(autoload '+org-lookup-references-handler "/home/jadench/.emacs.d/modules/lang/org/autoload/org-babel" "TODO

(fn IDENTIFIER)" nil nil)(autoload '+org-lookup-documentation-handler "/home/jadench/.emacs.d/modules/lang/org/autoload/org-babel" "TODO

(fn IDENTIFIER)" nil nil)(autoload '+org-clear-babel-results-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org-babel" "Remove the results block for the org babel block at point." nil nil)(defvar +org-capture-frame-parameters `((name . "doom-capture") (width . 70) (height . 25) (transient . t) ,@(when IS-LINUX `((window-system \, (if (boundp 'pgtk-initialized) 'pgtk 'x)) (display \, (or (getenv "DISPLAY") ":0")))) ,(if IS-MAC '(menu-bar-lines . 1))) "TODO")(autoload '+org-capture-cleanup-frame-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "Closes the org-capture frame once done adding an entry." nil nil)(autoload '+org-capture-frame-p "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "Return t if the current frame is an org-capture frame opened by
`+org-capture/open-frame'.

(fn &rest _)" nil nil)(autoload '+org-capture/open-frame "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "Opens the org-capture window in a floating frame that cleans itself up once
you're done. This can be called from an external shell script.

(fn &optional INITIAL-INPUT KEY)" t nil)(autoload '+org-capture-available-keys "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "TODO" nil nil)(autoload '+org-capture-todo-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "Expand `+org-capture-todo-file' from `org-directory'.
If it is an absolute path return `+org-capture-todo-file' verbatim." nil nil)(autoload '+org-capture-notes-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "Expand `+org-capture-notes-file' from `org-directory'.
If it is an absolute path return `+org-capture-todo-file' verbatim." nil nil)(autoload '+org-capture-project-todo-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "Find the nearest `+org-capture-todo-file' in a parent directory, otherwise,
opens a blank one at the project root. Throws an error if not in a project." nil nil)(autoload '+org-capture-project-notes-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "Find the nearest `+org-capture-notes-file' in a parent directory, otherwise,
opens a blank one at the project root. Throws an error if not in a project." nil nil)(autoload '+org-capture-project-changelog-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "Find the nearest `+org-capture-changelog-file' in a parent directory,
otherwise, opens a blank one at the project root. Throws an error if not in a
project." nil nil)(autoload '+org-capture-central-project-todo-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "TODO" nil nil)(autoload '+org-capture-central-project-notes-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "TODO" nil nil)(autoload '+org-capture-central-project-changelog-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" "TODO" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/lang/org/autoload/org-capture" '("+org-")))(autoload '+org/export-to-clipboard "/home/jadench/.emacs.d/modules/lang/org/autoload/org-export" "Exports the current buffer/selection to the clipboard.

Prompts for what BACKEND to use. See `org-export-backends' for options.

(fn BACKEND)" t nil)(autoload '+org/export-to-clipboard-as-rich-text "/home/jadench/.emacs.d/modules/lang/org/autoload/org-export" "Export the current buffer to HTML then copies it to clipboard as rich text.

Supports org-mode, markdown-mode, and gfm-mode buffers. In any other mode,
htmlize is used (takes what you see in Emacs and converts it to html, text
properties and font-locking et all).

(fn BEG END)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/lang/org/autoload/org-export" '("+org--yank-html-buffer")))(autoload '+org-read-link-description-at-point "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "TODO

(fn &optional DEFAULT CONTEXT)" nil nil)(autoload '+org-define-basic-link "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "Define a link with some basic completion & fontification.

KEY is the name of the link type. DIR-VAR is the directory variable to resolve
links relative to. PLIST is passed to `org-link-set-parameters' verbatim.

Links defined with this will be rendered in the `error' face if the file doesn't
exist, and `org-link' otherwise.

(fn KEY DIR-VAR &rest PLIST)" nil nil)(function-put '+org-define-basic-link 'lisp-indent-function '2)(autoload '+org-image-file-data-fn "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "Intepret LINK as an image file path and return its data.

(fn PROTOCOL LINK DESCRIPTION)" nil nil)(autoload '+org-inline-image-data-fn "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "Interpret LINK as base64-encoded image data.

(fn PROTOCOL LINK DESCRIPTION)" nil nil)(autoload '+org-http-image-data-fn "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "Interpret LINK as an URL to an image file.

(fn PROTOCOL LINK DESCRIPTION)" nil nil)(autoload '+org-play-gif-at-point-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "Play the gif at point, while the cursor remains there (looping)." nil nil)(autoload '+org-play-all-gifs-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "Continuously play all gifs in the visible buffer." nil nil)(autoload '+org/remove-link "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "Unlink the text at point." t nil)(autoload '+org/play-gif-at-point "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "TODO" t nil)(autoload '+org-link--doom-module-follow-fn "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "

(fn LINK)" nil nil)(autoload '+org-link--doom-module-face-fn "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "

(fn LINK)" nil nil)(autoload '+org-link--doom-package-follow-fn "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "TODO

(fn LINK)" nil nil)(autoload '+org-read-kbd-at-point "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" "TODO

(fn &optional DEFAULT CONTEXT)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/lang/org/autoload/org-link" '("+org-")))(autoload '+org/refile-to-current-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to elsewhere in the current buffer.
If prefix ARG, copy instead of move.

(fn ARG &optional FILE)" t nil)(autoload '+org/refile-to-file "/home/jadench/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to a particular org file.
If prefix ARG, copy instead of move.

(fn ARG FILE)" t nil)(autoload '+org/refile-to-other-window "/home/jadench/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to an org buffer visible in another window.
If prefix ARG, copy instead of move.

(fn ARG)" t nil)(autoload '+org/refile-to-other-buffer "/home/jadench/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to another, living org buffer.
If prefix ARG, copy instead of move.

(fn ARG)" t nil)(autoload '+org/refile-to-running-clock "/home/jadench/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to the currently clocked in task.
If prefix ARG, copy instead of move.

(fn ARG)" t nil)(autoload '+org/refile-to-last-location "/home/jadench/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to the last node you refiled to.
If prefix ARG, copy instead of move.

(fn ARG)" t nil)(autoload '+org/refile-to-visible "/home/jadench/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading as first child of visible heading selected with Avy." t nil)(autoload '+org/table-previous-row "/home/jadench/.emacs.d/modules/lang/org/autoload/org-tables" "Go to the previous row (same column) in the current table. Before doing so,
re-align the table if necessary. (Necessary because org-mode has a
`org-table-next-row', but not `org-table-previous-row')" t nil)(autoload '+org/table-insert-column-left "/home/jadench/.emacs.d/modules/lang/org/autoload/org-tables" "Insert a new column left of the current column." t nil)(autoload '+org/table-insert-row-below "/home/jadench/.emacs.d/modules/lang/org/autoload/org-tables" "Insert a new row below the current row." t nil)(autoload '+org-realign-table-maybe-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org-tables" "Auto-align table under cursor." nil nil)(autoload '+org-enable-auto-reformat-tables-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org-tables" "Realign tables & update formulas when exiting insert mode (`evil-mode').
Meant for `org-mode-hook'." nil nil)(autoload '+org-delete-backward-char-and-realign-table-maybe-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org-tables" "Ensure deleting characters with backspace doesn't deform the table cell." nil nil)(autoload '+org-realign-table-maybe-a "/home/jadench/.emacs.d/modules/lang/org/autoload/org-tables" "Auto-align table under cursor and re-calculate formulas.

(fn &rest _)" nil nil)(autoload '+org-get-todo-keywords-for "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Returns the list of todo keywords that KEYWORD belongs to.

(fn &optional KEYWORD)" nil nil)(autoload '+org-pretty-mode "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Hides emphasis markers and toggles pretty entities.

If called interactively, enable +Org-Pretty mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload '+org/dwim-at-point "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Do-what-I-mean at point.

If on a:
- checkbox list item or todo heading: toggle it.
- clock: update its time.
- headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
  subtree; update statistics cookies/checkboxes and ToCs.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: execute the source block
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, refresh all inline images in current tree.

(fn &optional ARG)" t nil)(autoload '+org/shift-return "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Insert a literal newline, or dwim in tables.
Executes `org-table-copy-down' if in table.

(fn &optional ARG)" t nil)(autoload '+org/insert-item-below "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Inserts a new heading, table cell or item below the current one.

(fn COUNT)" t nil)(autoload '+org/insert-item-above "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Inserts a new heading, table cell or item above the current one.

(fn COUNT)" t nil)(autoload '+org/toggle-last-clock "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Toggles last clocked item.

Clock out if an active clock is running (or cancel it if prefix ARG is non-nil).

If no clock is active, then clock into the last item. See `org-clock-in-last' to
see how ARG affects this command.

(fn ARG)" t nil)(defalias #'+org/toggle-fold #'+org-cycle-only-current-subtree-h)(autoload '+org/open-fold "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Open the current fold (not but its children)." t nil)(defalias #'+org/close-fold #'outline-hide-subtree)(autoload '+org/close-all-folds "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Close all folds in the buffer (or below LEVEL).

(fn &optional LEVEL)" t nil)(autoload '+org/open-all-folds "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Open all folds in the buffer (or up to LEVEL).

(fn &optional LEVEL)" t nil)(autoload '+org/show-next-fold-level "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Decrease the fold-level of the visible area of the buffer. This unfolds
another level of headings on each invocation.

(fn &optional COUNT)" t nil)(autoload '+org/hide-next-fold-level "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Increase the global fold-level of the visible area of the buffer. This folds
another level of headings on each invocation.

(fn &optional COUNT)" t nil)(autoload '+org-indent-maybe-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Indent the current item (header or item), if possible.
Made for `org-tab-first-hook' in evil-mode." t nil)(autoload '+org-yas-expand-maybe-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Expand a yasnippet snippet, if trigger exists at point or region is active.
Made for `org-tab-first-hook'." nil nil)(autoload '+org-cycle-only-current-subtree-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Toggle the local fold at the point, and no deeper.
`org-cycle's standard behavior is to cycle between three levels: collapsed,
subtree and whole document. This is slow, especially in larger org buffer. Most
of the time I just want to peek into the current subtree -- at most, expand
*only* the current subtree.

All my (performant) foldings needs are met between this and `org-show-subtree'
(on zO for evil users), and `org-cycle' on shift-TAB if I need it.

(fn &optional ARG)" t nil)(autoload '+org-make-last-point-visible-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Unfold subtree around point if saveplace places us in a folded region." nil nil)(autoload '+org-remove-occur-highlights-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Remove org occur highlights on ESC in normal mode." nil nil)(autoload '+org-enable-auto-update-cookies-h "/home/jadench/.emacs.d/modules/lang/org/autoload/org" "Update statistics cookies when saving or exiting insert mode (`evil-mode')." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/lang/org/autoload/org" '("+org--")))(autoload '+php-composer-conf "/home/jadench/.emacs.d/modules/lang/php/autoload" "Retrieve the contents of composer.json as an alist. If REFRESH-P is non-nil
ignore the cache.

(fn &optional PROJECT-ROOT REFRESH-P)" nil nil)(autoload '+php/open-repl "/home/jadench/.emacs.d/modules/lang/php/autoload" "Open PHP REPL." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/lang/php/autoload" '("+php-composer-conf")))(autoload '+python-executable-find "/home/jadench/.emacs.d/modules/lang/python/autoload/python" "Resolve the path to the EXE executable.
Tries to be aware of your active conda/pipenv/virtualenv environment, before
falling back on searching your PATH.

(fn EXE)" nil nil)(autoload '+python/open-repl "/home/jadench/.emacs.d/modules/lang/python/autoload/python" "Open the Python REPL." t nil)(autoload '+python/open-ipython-repl "/home/jadench/.emacs.d/modules/lang/python/autoload/python" "Open an IPython REPL." t nil)(autoload '+python/open-jupyter-repl "/home/jadench/.emacs.d/modules/lang/python/autoload/python" "Open a Jupyter console." t nil)(autoload '+python/optimize-imports "/home/jadench/.emacs.d/modules/lang/python/autoload/python" "organize imports" t nil)(autoload '+rust-cargo-project-p "/home/jadench/.emacs.d/modules/lang/rust/autoload" "Return t if this is a cargo project." nil nil)(autoload '+rust-racer-lookup-documentation "/home/jadench/.emacs.d/modules/lang/rust/autoload" "A `+lookup/documentation' handler for Rust + Racer.

(fn IDENTIFIER)" nil nil)(autoload '+rust/cargo-audit "/home/jadench/.emacs.d/modules/lang/rust/autoload" "Run 'cargo audit' for the current project." t nil)(autoload '+sh--match-variables-in-quotes "/home/jadench/.emacs.d/modules/lang/sh/autoload" "Search for variables in double-quoted strings bounded by LIMIT.

(fn LIMIT)" nil nil)(autoload '+sh--match-command-subst-in-quotes "/home/jadench/.emacs.d/modules/lang/sh/autoload" "Search for variables in double-quoted strings bounded by LIMIT.

(fn LIMIT)" nil nil)(autoload '+sh/open-repl "/home/jadench/.emacs.d/modules/lang/sh/autoload" "Open a shell REPL." t nil)(autoload '+sh-lookup-documentation-handler "/home/jadench/.emacs.d/modules/lang/sh/autoload" "Look up documentation in `man' or `woman'." t nil)(defmacro set-eshell-alias! (&rest aliases) "THIS FUNCTION DOES NOTHING BECAUSE (:term . eshell) IS DISABLED

Define aliases for eshell.

ALIASES is a flat list of alias -> command pairs. e.g.

  (set-eshell-alias!
    \"hi\"  \"echo hello world\"
    \"bye\" \"echo goodbye world\")" (ignore aliases))(put 'set-eshell-alias! 'doom-module '(:term . eshell))(autoload '+vterm/toggle "/home/jadench/.emacs.d/modules/term/vterm/autoload" "Toggles a terminal popup window at project root.

If prefix ARG is non-nil, recreate vterm buffer in the current project's root.

Returns the vterm buffer.

(fn ARG)" t nil)(autoload '+vterm/here "/home/jadench/.emacs.d/modules/term/vterm/autoload" "Open a terminal buffer in the current window at project root.

If prefix ARG is non-nil, cd into `default-directory' instead of project root.

Returns the vterm buffer.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/term/vterm/autoload" '("+vterm--configure-project-root-and-display")))(defmacro set-editorconfig-indent-var! (mode &rest vars) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . editorconfig) IS DISABLED

Add (MODE VARS...) to `editorconfig-indentation-alist'." (ignore mode vars))(put 'set-editorconfig-indent-var! 'doom-module '(:tools . editorconfig))(autoload '+eval-display-results-in-popup "/home/jadench/.emacs.d/modules/tools/eval/autoload/eval" "Display OUTPUT in a popup buffer.

(fn OUTPUT &optional SOURCE-BUFFER)" nil nil)(autoload '+eval-display-results-in-overlay "/home/jadench/.emacs.d/modules/tools/eval/autoload/eval" "Display OUTPUT in a floating overlay next to the cursor.

(fn OUTPUT &optional SOURCE-BUFFER)" nil nil)(autoload '+eval-display-results "/home/jadench/.emacs.d/modules/tools/eval/autoload/eval" "Display OUTPUT in an overlay or a popup buffer.

(fn OUTPUT &optional SOURCE-BUFFER)" nil nil)(autoload '+eval/buffer "/home/jadench/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate the whole buffer." t nil)(autoload '+eval/region "/home/jadench/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate a region between BEG and END and display the output.

(fn BEG END)" t nil)(autoload '+eval/line-or-region "/home/jadench/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate the current line or selected region." t nil)(autoload '+eval/buffer-or-region "/home/jadench/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate the region if it's active, otherwise evaluate the whole buffer.

If a REPL is open the code will be evaluated in it, otherwise a quickrun
runner will be used." t nil)(autoload '+eval/region-and-replace "/home/jadench/.emacs.d/modules/tools/eval/autoload/eval" "Evaluation a region between BEG and END, and replace it with the result.

(fn BEG END)" t nil)(autoload '+eval:region "~/.emacs.d/modules/tools/eval/autoload/evil" nil t)(autoload '+eval:replace-region "~/.emacs.d/modules/tools/eval/autoload/evil" nil t)(autoload '+eval:repl "~/.emacs.d/modules/tools/eval/autoload/evil" nil t)(autoload '+eval/open-repl-same-window "/home/jadench/.emacs.d/modules/tools/eval/autoload/repl" "Opens (or reopens) the REPL associated with the current major-mode and place
the cursor at the prompt.

If ARG (universal argument), prompt for a specific REPL to open.

(fn &optional ARG)" t nil)(autoload '+eval/open-repl-other-window "/home/jadench/.emacs.d/modules/tools/eval/autoload/repl" "Does `+eval/open-repl', but in a popup window.

If ARG (universal argument), prompt for a specific REPL to open.

(fn &optional ARG)" t nil)(autoload '+eval/send-region-to-repl "/home/jadench/.emacs.d/modules/tools/eval/autoload/repl" "Execute the selected region in the REPL.
Opens a REPL if one isn't already open. If AUTO-EXECUTE-P, then execute it
immediately after.

(fn BEG END &optional INHIBIT-AUTO-EXECUTE-P)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/tools/eval/autoload/repl" '("+eval-")))(defvar +eval-runners nil "Alist mapping major modes to interactive runner functions.")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/tools/eval/autoload/settings" '("+eval-repls" "set-")))(progn (autoload 'set-repl-handler! "/home/jadench/.emacs.d/modules/tools/eval/autoload/settings.el" "Defines a REPL for MODES.

MODES is either a single major mode symbol or a list of them. COMMAND is a
function that creates and returns the REPL buffer.

COMMAND can either be a function that takes no arguments, or an interactive
command that will be called interactively. COMMANDS must return either the repl
buffer or a function that takes no arguments and returns the repl buffer.

PLIST is a property list that map special attributes to this repl. These are
recognized:

  :persist BOOL
    If non-nil, this REPL won't be killed when its window is closed.
  :send-region FUNC
    A function that accepts a BEG and END, and sends the contents of the region
    to the REPL. Defaults to `+eval/send-region-to-repl'.
  :send-buffer FUNC
    A function of no arguments that sends the contents of the buffer to the REPL.
    Defaults to `+eval/region', which will run the :send-region specified function
    or `+eval/send-region-to-repl'.

(fn MODES COMMAND &rest PLIST)" nil nil) (function-put 'set-repl-handler! 'lisp-indent-function 'defun))(put 'set-repl-handler! 'doom-module '(:tools . eval))(progn (autoload 'set-eval-handler! "/home/jadench/.emacs.d/modules/tools/eval/autoload/settings.el" "Define a code evaluator for major mode MODES with `quickrun'.

MODES can be list of major mode symbols, or a single one.

1. If MODE is a string and COMMAND is the string, MODE is a file regexp and
   COMMAND is a string key for an entry in `quickrun-file-alist'.
2. If MODE is not a string and COMMAND is a string, MODE is a major-mode symbol
   and COMMAND is a key (for `quickrun--language-alist'), and will be registered
   in `quickrun--major-mode-alist'.
3. If MODE is not a string and COMMAND is an alist, see `quickrun-add-command':
   (quickrun-add-command MODE COMMAND :mode MODE).
4. If MODE is not a string and COMMANd is a symbol, add it to
   `+eval-runners', which is used by `+eval/region'.

(fn MODES COMMAND)" nil nil) (function-put 'set-eval-handler! 'lisp-indent-function 'defun))(put 'set-eval-handler! 'doom-module '(:tools . eval))(defmacro set-docsets! (modes &rest docsets) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . lookup) IS DISABLED

Registers a list of DOCSETS for MODES.

MODES can be one major mode, or a list thereof.

DOCSETS can be strings, each representing a dash docset, or a vector with the
structure [DOCSET FORM]. If FORM evaluates to nil, the DOCSET is omitted. If it
is non-nil, (format DOCSET FORM) is used as the docset.

The first element in DOCSETS can be :add or :remove, making it easy for users to
add to or remove default docsets from modes.

DOCSETS can also contain sublists, which will be flattened.

Example:

  (set-docsets! '(js2-mode rjsx-mode) \"JavaScript\"
    [\"React\" (eq major-mode 'rjsx-mode)]
    [\"TypeScript\" (bound-and-true-p tide-mode)])

Used by `+lookup/in-docsets' and `+lookup/documentation'." (ignore modes docsets))(put 'set-docsets! 'doom-module '(:tools . lookup))(autoload '+lookup:online "~/.emacs.d/modules/tools/lookup/autoload/evil" nil t)(autoload '+lookup:dash "~/.emacs.d/modules/tools/lookup/autoload/evil" nil t)(autoload '+lookup/definition "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup" "Jump to the definition of IDENTIFIER (defaults to the symbol at point).

Each function in `+lookup-definition-functions' is tried until one changes the
point or current buffer. Falls back to dumb-jump, naive
ripgrep/the_silver_searcher text search, then `evil-goto-definition' if
evil-mode is active.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/implementations "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup" "Jump to the implementations of IDENTIFIER (defaults to the symbol at point).

Each function in `+lookup-implementations-functions' is tried until one changes
the point or current buffer.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/type-definition "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup" "Jump to the type definition of IDENTIFIER (defaults to the symbol at point).

Each function in `+lookup-type-definition-functions' is tried until one changes
the point or current buffer.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/references "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup" "Show a list of usages of IDENTIFIER (defaults to the symbol at point)

Tries each function in `+lookup-references-functions' until one changes the
point and/or current buffer. Falls back to a naive ripgrep/the_silver_searcher
search otherwise.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/documentation "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup" "Show documentation for IDENTIFIER (defaults to symbol at point or selection.

First attempts the :documentation handler specified with `set-lookup-handlers!'
for the current mode/buffer (if any), then falls back to the backends in
`+lookup-documentation-functions'.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/file "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup" "Figure out PATH from whatever is at point and open it.

Each function in `+lookup-file-functions' is tried until one changes the point
or the current buffer.

Otherwise, falls back on `find-file-at-point'.

(fn &optional PATH)" t nil)(autoload '+lookup/dictionary-definition "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup" "Look up the definition of the word at point (or selection).

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/synonyms "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup" "Look up and insert a synonym for the word at point (or selection).

(fn IDENTIFIER &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup" '("+lookup-" "set-lookup-handlers!")))(progn (autoload 'set-lookup-handlers! "/home/jadench/.emacs.d/modules/tools/lookup/autoload/lookup.el" "Define jump handlers for major or minor MODES.

A handler is either an interactive command that changes the current buffer
and/or location of the cursor, or a function that takes one argument: the
identifier being looked up, and returns either nil (failed to find it), t
(succeeded at changing the buffer/moving the cursor), or 'deferred (assume this
handler has succeeded, but expect changes not to be visible yet).

There are several kinds of handlers, which can be defined with the following
properties:

:definition FN
  Run when jumping to a symbol's definition. Used by `+lookup/definition'.
:implementations FN
  Run when looking for implementations of a symbol in the current project. Used
  by `+lookup/implementations'.
:type-definition FN
  Run when jumping to a symbol's type definition. Used by
  `+lookup/type-definition'.
:references FN
  Run when looking for usage references of a symbol in the current project. Used
  by `+lookup/references'.
:documentation FN
  Run when looking up documentation for a symbol. Used by
  `+lookup/documentation'.
:file FN
  Run when looking up the file for a symbol/string. Typically a file path. Used
  by `+lookup/file'.
:xref-backend FN
  Defines an xref backend for a major-mode. A :definition and :references
  handler isn't necessary with a :xref-backend, but will have higher precedence
  if they exist.
:async BOOL
  Indicates that *all* supplied FNs are asynchronous. Note: lookups will not try
  any handlers after async ones, due to their nature. To get around this, you
  must write a specialized wrapper to await the async response, or use a
  different heuristic to determine, ahead of time, whether the async call will
  succeed or not.

  If you only want to specify one FN is async, declare it inline instead:

    (set-lookup-handlers! 'rust-mode
      :definition '(racer-find-definition :async t))

Handlers can either be interactive or non-interactive. Non-interactive handlers
must take one argument: the identifier being looked up. This function must
change the current buffer or window or return non-nil when it succeeds.

If it doesn't change the current buffer, or it returns nil, the lookup module
will fall back to the next handler in `+lookup-definition-functions',
`+lookup-implementations-functions', `+lookup-type-definition-functions',
`+lookup-references-functions', `+lookup-file-functions' or
`+lookup-documentation-functions'.

Consecutive `set-lookup-handlers!' calls will overwrite previously defined
handlers for MODES. If used on minor modes, they are stacked onto handlers
defined for other minor modes or the major mode it's activated in.

This can be passed nil as its second argument to unset handlers for MODES. e.g.

  (set-lookup-handlers! 'python-mode nil)

(fn MODES &key DEFINITION IMPLEMENTATIONS TYPE-DEFINITION REFERENCES DOCUMENTATION FILE XREF-BACKEND ASYNC)" nil nil) (function-put 'set-lookup-handlers! 'lisp-indent-function 'defun))(put 'set-lookup-handlers! 'doom-module '(:tools . lookup))(autoload '+lookup-online-backend-fn "/home/jadench/.emacs.d/modules/tools/lookup/autoload/online" "Open the browser and search for IDENTIFIER online.
When called for the first time, or with a non-nil prefix argument, prompt for
the search engine to use.

(fn IDENTIFIER)" nil nil)(autoload '+lookup/online "/home/jadench/.emacs.d/modules/tools/lookup/autoload/online" "Look up QUERY in the browser using PROVIDER.
When called interactively, prompt for a query and, when called for the first
time, the provider from `+lookup-provider-url-alist'. In subsequent calls, reuse
the previous provider. With a non-nil prefix argument, always prompt for the
provider.

QUERY must be a string, and PROVIDER must be a key of
`+lookup-provider-url-alist'.

(fn QUERY PROVIDER)" t nil)(autoload '+lookup/online-select "/home/jadench/.emacs.d/modules/tools/lookup/autoload/online" "Run `+lookup/online', but always prompt for the provider to use." t nil)(autoload '+lookup--online-backend-google "/home/jadench/.emacs.d/modules/tools/lookup/autoload/online" "Search Google, starting with QUERY, with live autocompletion.

(fn QUERY)" nil nil)(autoload '+lookup--online-backend-duckduckgo "/home/jadench/.emacs.d/modules/tools/lookup/autoload/online" "Search DuckDuckGo, starting with QUERY, with live autocompletion.

(fn QUERY)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/tools/lookup/autoload/online" '("+lookup--")))(autoload '+lookup-xwidget-webkit-open-url-fn "/home/jadench/.emacs.d/modules/tools/lookup/autoload/xwidget" "

(fn URL &optional NEW-SESSION)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/tools/lookup/autoload/xwidget" '("+lookup--xwidget-webkit-last-session-buffer")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/tools/lsp/autoload/common" '("lsp!")))(autoload 'lsp! "/home/jadench/.emacs.d/modules/tools/lsp/autoload/common.el" "Dispatch to call the currently used lsp client entrypoint" t nil)(put 'lsp! 'doom-module '(:tools . lsp))(defmacro set-eglot-client! (mode server-call) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . lsp) IS DISABLED

Add SERVER-CALL list as a possible lsp server for given major MODE.

Example : (set-eglot-client! 'python-mode `(,(concat doom-etc-dir \"lsp/mspyls/Microsoft.Python.LanguageServer\")))" (ignore mode server-call))(put 'set-eglot-client! 'doom-module '(:tools . lsp))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/tools/lsp/autoload/flycheck-eglot" '("+lsp--flycheck-eglot-")))(autoload '+lsp/uninstall-server "/home/jadench/.emacs.d/modules/tools/lsp/autoload/lsp-mode" "Delete a LSP server from `lsp-server-install-dir'.

(fn DIR)" t nil)(autoload '+lsp/switch-client "/home/jadench/.emacs.d/modules/tools/lsp/autoload/lsp-mode" "Switch to another LSP server.

(fn CLIENT)" t nil)(autoload '+lsp-lookup-definition-handler "/home/jadench/.emacs.d/modules/tools/lsp/autoload/lsp-mode" "Find definition of the symbol at point using LSP." t nil)(autoload '+lsp-lookup-references-handler "/home/jadench/.emacs.d/modules/tools/lsp/autoload/lsp-mode" "Find project-wide references of the symbol at point using LSP.

(fn &optional INCLUDE-DECLARATION)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/tools/lsp/autoload/lsp-mode" '("set-lsp-priority!")))(autoload 'set-lsp-priority! "/home/jadench/.emacs.d/modules/tools/lsp/autoload/lsp-mode.el" "Change the PRIORITY of lsp CLIENT.

(fn CLIENT PRIORITY)" nil nil)(put 'set-lsp-priority! 'doom-module '(:tools . lsp))(defadvice! +magit--ignore-version-a (fn &rest args) :around #'magit-version (let ((inhibit-message (not (called-interactively-p 'any)))) (apply fn args)))(autoload '+magit-display-buffer-fn "/home/jadench/.emacs.d/modules/tools/magit/autoload" "Same as `magit-display-buffer-traditional', except...

- If opened from a commit window, it will open below it.
- Magit process windows are always opened in small windows below the current.
- Everything else will reuse the same window.

(fn BUFFER)" nil nil)(autoload '+magit-mark-stale-buffers-h "/home/jadench/.emacs.d/modules/tools/magit/autoload" "Revert all visible buffers and mark buried buffers as stale.

Stale buffers are reverted when they are switched to, assuming they haven't been
modified." nil nil)(autoload '+magit-revert-buffer-maybe-h "/home/jadench/.emacs.d/modules/tools/magit/autoload" "Update `vc' and `git-gutter' if out of date." nil nil)(autoload '+magit/quit "/home/jadench/.emacs.d/modules/tools/magit/autoload" "Bury the current magit buffer.

If KILL-BUFFER, kill this buffer instead of burying it.
If the buried/killed magit buffer was the last magit buffer open for this repo,
kill all magit buffers for this repo.

(fn &optional KILL-BUFFER)" t nil)(autoload '+magit/quit-all "/home/jadench/.emacs.d/modules/tools/magit/autoload" "Kill all magit buffers for the current repository." t nil)(autoload '+magit/start-code-review "/home/jadench/.emacs.d/modules/tools/magit/autoload" "

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/tools/magit/autoload" '("+magit--")))(autoload '+make/run "/home/jadench/.emacs.d/modules/tools/make/autoload" "Run a make task in the current project. If multiple makefiles are available,
you'll be prompted to select one." t nil)(autoload '+make/run-last "/home/jadench/.emacs.d/modules/tools/make/autoload" "TODO" t nil)(autoload '+doom-dashboard/open "/home/jadench/.emacs.d/modules/ui/doom-dashboard/autoload" "Switch to the dashboard in the current window, of the current FRAME.

(fn FRAME)" t nil)(autoload '+doom-dashboard/forward-button "/home/jadench/.emacs.d/modules/ui/doom-dashboard/autoload" "Like `forward-button', but don't wrap.

(fn N)" t nil)(autoload '+doom-dashboard/backward-button "/home/jadench/.emacs.d/modules/ui/doom-dashboard/autoload" "Like `backward-button', but don't wrap.

(fn N)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/ui/doom-dashboard/autoload" '("+doom-dashboard--help-echo")))(autoload '+hydra/text-zoom/body "~/.emacs.d/modules/ui/hydra/autoload/windows" nil t)(autoload '+hydra/window-nav/body "~/.emacs.d/modules/ui/hydra/autoload/windows" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/ui/hydra/autoload/windows" '("+hydra/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/ui/ligatures/autoload/ligatures" '("set-ligatures!")))(define-obsolete-function-alias 'set-pretty-symbols! 'set-ligatures! "3.0.0")(progn (autoload 'set-ligatures! "/home/jadench/.emacs.d/modules/ui/ligatures/autoload/ligatures.el" "Associates string patterns with icons in certain major-modes.

  MODES is a major mode symbol or a list of them.
  PLIST is a property list whose keys must match keys in
`+ligatures-extra-symbols', and whose values are strings representing the text
to be replaced with that symbol. If the car of PLIST is nil, then unset any
pretty symbols previously defined for MODES.

This function accepts one special property:

  :alist ALIST
    Appends ALIST to `prettify-symbols-alist' literally, without mapping text to
    `+ligatures-extra-symbols'.

For example, the rule for emacs-lisp-mode is very simple:

  (set-ligatures! 'emacs-lisp-mode
    :lambda \"lambda\")

This will replace any instances of \"lambda\" in emacs-lisp-mode with the symbol
assicated with :lambda in `+ligatures-extra-symbols'.

Pretty symbols can be unset for emacs-lisp-mode with:

  (set-ligatures! 'emacs-lisp-mode nil)

(fn MODES &rest PLIST)" nil nil) (function-put 'set-ligatures! 'lisp-indent-function 'defun))(put 'set-ligatures! 'doom-module '(:ui . ligatures))(autoload '+modeline-resize-for-font-h "/home/jadench/.emacs.d/modules/ui/modeline/autoload" "Adjust the modeline's height when the font size is changed by
`doom/increase-font-size' or `doom/decrease-font-size'.

Meant for `doom-change-font-size-hook'." nil nil)(autoload '+modeline-update-env-in-all-windows-h "/home/jadench/.emacs.d/modules/ui/modeline/autoload" "Update version strings in all buffers.

(fn &rest _)" nil nil)(autoload '+modeline-clear-env-in-all-windows-h "/home/jadench/.emacs.d/modules/ui/modeline/autoload" "Blank out version strings in all buffers.

(fn &rest _)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/ui/modeline/autoload" '("+modeline--old-bar-height")))(autoload '+popup--init "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Initializes a popup window. Run any time a popup is opened. It sets the
default window parameters for popup windows, clears leftover transient timers
and enables `+popup-buffer-mode'.

(fn WINDOW &optional ALIST)" nil nil)(autoload '+popup-buffer-p "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Return non-nil if BUFFER is a popup buffer. Defaults to the current buffer.

(fn &optional BUFFER)" nil nil)(autoload '+popup-window-p "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Return non-nil if WINDOW is a popup window. Defaults to the current window.

(fn &optional WINDOW)" nil nil)(autoload '+popup-buffer "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Open BUFFER in a popup window. ALIST describes its features.

(fn BUFFER &optional ALIST)" nil nil)(autoload '+popup-parameter "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Fetch the window PARAMETER (symbol) of WINDOW

(fn PARAMETER &optional WINDOW)" nil nil)(autoload '+popup-parameter-fn "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Fetch the window PARAMETER (symbol) of WINDOW. If it is a function, run it
with ARGS to get its return value.

(fn PARAMETER &optional WINDOW &rest ARGS)" nil nil)(autoload '+popup-windows "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Returns a list of all popup windows." nil nil)(autoload '+popup-shrink-to-fit "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Shrinks WINDOW to fit the buffer contents, if the buffer isn't empty.

Uses `shrink-window-if-larger-than-buffer'.

(fn &optional WINDOW)" nil nil)(autoload '+popup-alist-from-window-state "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Convert window STATE (from `window-state-get') to a `display-buffer' alist.

(fn STATE)" nil nil)(autoload '+popup-adjust-fringes-h "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Hides the fringe in popup windows, restoring them if `+popup-buffer-mode' is
disabled." nil nil)(autoload '+popup-adjust-margins-h "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Creates padding for the popup window determined by `+popup-margin-width',
restoring it if `+popup-buffer-mode' is disabled." nil nil)(autoload '+popup-set-modeline-on-enable-h "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Don't show modeline in popup windows without a `modeline' window-parameter.
Possible values for this parameter are:

  t            show the mode-line as normal
  nil          hide the modeline entirely (the default)
  a function   `mode-line-format' is set to its return value

Any non-nil value besides the above will be used as the raw value for
`mode-line-format'." nil nil)(autoload '+popup-unset-modeline-on-disable-h "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Restore the modeline when `+popup-buffer-mode' is deactivated." nil nil)(autoload '+popup-close-on-escape-h "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "If called inside a popup, try to close that popup window (see
`+popup/close'). If called outside, try to close all popup windows (see
`+popup/close-all')." nil nil)(autoload '+popup-cleanup-rules-h "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Cleans up any duplicate popup rules." t nil)(autoload '+popup-kill-buffer-hook-h "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "TODO" nil nil)(defalias 'other-popup #'+popup/other)(autoload '+popup/buffer "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Open this buffer in a popup window." t nil)(autoload '+popup/other "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Cycle through popup windows, like `other-window'. Ignores regular windows." t nil)(autoload '+popup/close "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Close WINDOW, if it's a popup window.

This will do nothing if the popup's `quit' window parameter is either nil or
'other. This window parameter is ignored if FORCE-P is non-nil.

(fn &optional WINDOW FORCE-P)" t nil)(autoload '+popup/close-all "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Close all open popup windows.

This will ignore popups with an `quit' parameter that is either nil or 'current.
This window parameter is ignored if FORCE-P is non-nil.

(fn &optional FORCE-P)" t nil)(autoload '+popup/toggle "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Toggle any visible popups.
If no popups are available, display the *Messages* buffer in a popup window." t nil)(autoload '+popup/restore "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Restore the last popups that were closed, if any." t nil)(autoload '+popup/raise "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Raise the current popup window into a regular window and
return it. If prefix ARG, raise the current popup into a new
window and return that window.

(fn WINDOW &optional ARG)" t nil)(autoload '+popup/diagnose "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Reveal what popup rule will be used for the current buffer." t nil)(autoload '+popup-close-a "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "TODO

(fn &rest _)" nil nil)(autoload '+popup-save-a "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Sets aside all popups before executing the original function, usually to
prevent the popup(s) from messing up the UI (or vice versa).

(fn FN &rest ARGS)" nil nil)(autoload '+popup-display-buffer-fullframe-fn "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "Displays the buffer fullscreen.

(fn BUFFER ALIST)" nil nil)(autoload '+popup-display-buffer-stacked-side-window-fn "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" "A `display-buffer' action that serves as an alternative to
`display-buffer-in-side-window', but allows for stacking popups with the `vslot'
alist entry.

Accepts the same arguments as `display-buffer-in-side-window'. You must set
`window--sides-inhibit-check' to non-nil for this work properly.

(fn BUFFER ALIST)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/ui/popup/autoload/popup" '("+popup--")))(defvar +popup--display-buffer-alist nil)(defvar +popup-defaults (list :side 'bottom :height 0.16 :width 40 :quit t :select #'ignore :ttl 5) "Default properties for popup rules defined with `set-popup-rule!'.")(autoload '+popup-make-rule "/home/jadench/.emacs.d/modules/ui/popup/autoload/settings" "

(fn PREDICATE PLIST)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/ui/popup/autoload/settings" '("set-popup-rule")))(progn (autoload 'set-popup-rule! "/home/jadench/.emacs.d/modules/ui/popup/autoload/settings.el" "Define a popup rule.

These rules affect buffers displayed with `pop-to-buffer' and `display-buffer'
(or their siblings). Buffers displayed with `switch-to-buffer' (and its
variants) will not be affected by these rules (as they are unaffected by
`display-buffer-alist', which powers the popup management system).

PREDICATE can be either a) a regexp string (matched against the buffer's name)
or b) a function that takes two arguments (a buffer name and the ACTION argument
of `display-buffer') and returns a boolean.

PLIST can be made up of any of the following properties:

:ignore BOOL
  If BOOL is non-nil, popups matching PREDICATE will not be handled by the popup
  system. Use this for buffers that have their own window management system like
  magit or helm.

:actions ACTIONS
  ACTIONS is a list of functions or an alist containing (FUNCTION . ALIST). See
  `display-buffer''s second argument for more information on its format and what
  it accepts. If omitted, `+popup-default-display-buffer-actions' is used.

:side 'bottom|'top|'left|'right
  Which side of the frame to open the popup on. This is only respected if
  `+popup-display-buffer-stacked-side-window-fn' or `display-buffer-in-side-window'
  is in :actions or `+popup-default-display-buffer-actions'.

:size/:width/:height FLOAT|INT|FN
  Determines the size of the popup. If more than one of these size properties are
  given :size always takes precedence, and is mapped with window-width or
  window-height depending on what :side the popup is opened. Setting a height
  for a popup that opens on the left or right is harmless, but comes into play
  if two popups occupy the same :vslot.

  If a FLOAT (0 < x < 1), the number represents how much of the window will be
    consumed by the popup (a percentage).
  If an INT, the number determines the size in lines (height) or units of
    character width (width).
  If a function, it takes one argument: the popup window, and can do whatever it
    wants with it, typically resize it, like `+popup-shrink-to-fit'.

:slot/:vslot INT
  (This only applies to popups with a :side and only if :actions is blank or
  contains the `+popup-display-buffer-stacked-side-window-fn' action) These control
  how multiple popups are laid out. INT can be any integer, positive and
  negative.

  :slot controls lateral positioning (e.g. the horizontal positioning for
    top/bottom popups, or vertical positioning for left/right popups).
  :vslot controls popup stacking (from the edge of the frame toward the center).

  Let's assume popup A and B are opened with :side 'bottom, in that order.
    If they possess the same :slot and :vslot, popup B will replace popup A.
    If popup B has a higher :slot, it will open to the right of popup A.
    If popup B has a lower :slot, it will open to the left of popup A.
    If popup B has a higher :vslot, it will open above popup A.
    If popup B has a lower :vslot, it will open below popup A.

:ttl INT|BOOL|FN
  Stands for time-to-live. It can be t, an integer, nil or a function. This
  controls how (and if) the popup system will clean up after the popup.

  If any non-zero integer, wait that many seconds before killing the buffer (and
    any associated processes).
  If 0, the buffer is immediately killed.
  If nil, the buffer won't be killed and is left to its own devices.
  If t, resort to the default :ttl in `+popup-defaults'. If none exists, this is
    the same as nil.
  If a function, it takes one argument: the target popup buffer. The popup
    system does nothing else and ignores the function's return value.

:quit FN|BOOL|'other|'current
  Can be t, 'other, 'current, nil, or a function. This determines the behavior
  of the ESC/C-g keys in or outside of popup windows.

  If t, close the popup if ESC/C-g is pressed anywhere.
  If 'other, close this popup if ESC/C-g is pressed outside of any popup. This
    is great for popups you may press ESC/C-g a lot in.
  If 'current, close the current popup if ESC/C-g is pressed from inside of the
    popup. This makes it harder to accidentally close a popup until you really
    want to.
  If nil, pressing ESC/C-g will never close this popup.
  If a function, it takes one argument: the to-be-closed popup window, and is
    run when ESC/C-g is pressed while that popup is open. It must return one of
    the other values to determine the fate of the popup.

:select BOOL|FN
  Can be a boolean or function. The boolean determines whether to focus the
  popup window after it opens (non-nil) or focus the origin window (nil).

  If a function, it takes two arguments: the popup window and originating window
    (where you were before the popup opened). The popup system does nothing else
    and ignores the function's return value.

:modeline BOOL|FN|LIST
  Can be t (show the default modeline), nil (show no modeline), a function that
  returns a modeline format or a valid value for `mode-line-format' to be used
  verbatim. The function takes no arguments and is run in the context of the
  popup buffer.

:autosave BOOL|FN
  This parameter determines what to do with modified buffers when closing popup
  windows. It accepts t, 'ignore, a function or nil.

  If t, no prompts. Just save them automatically (if they're file-visiting
    buffers). Same as 'ignore for non-file-visiting buffers.
  If nil (the default), prompt the user what to do if the buffer is
    file-visiting and modified.
  If 'ignore, no prompts, no saving. Just silently kill it.
  If a function, it is run with one argument: the popup buffer, and must return
    non-nil to save or nil to do nothing (but no prompts).

:parameters ALIST
  An alist of custom window parameters. See `(elisp)Window Parameters'.

If any of these are omitted, defaults derived from `+popup-defaults' will be
used.

(fn PREDICATE &key IGNORE ACTIONS SIDE SIZE WIDTH HEIGHT SLOT VSLOT TTL QUIT SELECT MODELINE AUTOSAVE PARAMETERS)" nil nil) (function-put 'set-popup-rule! 'lisp-indent-function 'defun))(put 'set-popup-rule! 'doom-module '(:ui . popup))(progn (autoload 'set-popup-rules! "/home/jadench/.emacs.d/modules/ui/popup/autoload/settings.el" "Defines multiple popup rules.

Every entry in RULESETS should be a list of alists where the CAR is the
predicate and CDR is a plist. See `set-popup-rule!' for details on the predicate
and plist.

Example:

  (set-popup-rules!
    '((\"^ \\*\" :slot 1 :vslot -1 :size #'+popup-shrink-to-fit)
      (\"^\\*\"  :slot 1 :vslot -1 :select t))
    '((\"^\\*Completions\" :slot -1 :vslot -2 :ttl 0)
      (\"^\\*Compil\\(?:ation\\|e-Log\\)\" :size 0.3 :ttl 0 :quit t)))

(fn &rest RULESETS)" nil nil) (function-put 'set-popup-rules! 'lisp-indent-function '0))(put 'set-popup-rules! 'doom-module '(:ui . popup))(autoload '+treemacs/toggle "/home/jadench/.emacs.d/modules/ui/treemacs/autoload" "Initialize or toggle treemacs.

Ensures that only the current project is present and all other projects have
been removed.

Use `treemacs' command for old functionality." t nil)(autoload '+vc/gutter-hydra/body "~/.emacs.d/modules/ui/vc-gutter/autoload" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/ui/vc-gutter/autoload" '("+vc/gutter-hydra")))(add-hook! '(prog-mode-hook text-mode-hook conf-mode-hook) #'vi-tilde-fringe-mode)(autoload '+workspace:save "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:load "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:new "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:rename "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:delete "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:switch-next "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:switch-previous "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(defface +workspace-tab-selected-face '((t (:inherit highlight))) "The face for selected tabs displayed by `+workspace/display'" :group 'persp-mode)(defface +workspace-tab-face '((t (:inherit default))) "The face for selected tabs displayed by `+workspace/display'" :group 'persp-mode)(defalias #'+workspace-p #'perspective-p "Return t if OBJ is a perspective hash table.")(autoload '+workspace-exists-p "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Returns t if NAME is the name of an existing workspace.

(fn NAME)" nil nil)(defalias #'+workspace-contains-buffer-p #'persp-contain-buffer-p "Return non-nil if BUFFER is in WORKSPACE (defaults to current workspace).")(defalias #'+workspace-current #'get-current-persp "Return the currently active workspace.")(autoload '+workspace-get "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a workspace named NAME. Unless NOERROR is non-nil, this throws an
error if NAME doesn't exist.

(fn NAME &optional NOERROR)" nil nil)(autoload '+workspace-current-name "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Get the name of the current workspace." nil nil)(autoload '+workspace-list "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a list of workspace structs (satisifes `+workspace-p')." nil nil)(autoload '+workspace-list-names "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return the list of names of open workspaces." nil nil)(autoload '+workspace-buffer-list "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a list of buffers in PERSP.

PERSP can be a string (name of a workspace) or a workspace (satisfies
`+workspace-p'). If nil or omitted, it defaults to the current workspace.

(fn &optional PERSP)" nil nil)(autoload '+workspace-orphaned-buffer-list "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a list of buffers that aren't associated with any perspective." nil nil)(autoload '+workspace-load "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Loads a single workspace (named NAME) into the current session. Can only
retrieve perspectives that were explicitly saved with `+workspace-save'.

Returns t if successful, nil otherwise.

(fn NAME)" nil nil)(autoload '+workspace-save "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Saves a single workspace (NAME) from the current session. Can be loaded again
with `+workspace-load'. NAME can be the string name of a workspace or its
perspective hash table.

Returns t on success, nil otherwise.

(fn NAME)" nil nil)(autoload '+workspace-new "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a new workspace named NAME. If one already exists, return nil.
Otherwise return t on success, nil otherwise.

(fn NAME)" nil nil)(autoload '+workspace-rename "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Rename the current workspace named NAME to NEW-NAME. Returns old name on
success, nil otherwise.

(fn NAME NEW-NAME)" nil nil)(autoload '+workspace-delete "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete the workspace denoted by WORKSPACE, which can be the name of a perspective
or its hash table. If INHIBIT-KILL-P is non-nil, don't kill this workspace's
buffers.

(fn WORKSPACE &optional INHIBIT-KILL-P)" nil nil)(autoload '+workspace-switch "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to another workspace named NAME (a string).

If AUTO-CREATE-P is non-nil, create the workspace if it doesn't exist, otherwise
throws an error.

(fn NAME &optional AUTO-CREATE-P)" nil nil)(defalias '+workspace/restore-last-session #'doom/quickload-session)(autoload '+workspace/load "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Load a workspace and switch to it. If called with C-u, try to reload the
current workspace (by name) from session files.

(fn NAME)" t nil)(autoload '+workspace/save "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Save the current workspace. If called with C-u, autosave the current
workspace.

(fn NAME)" t nil)(autoload '+workspace/rename "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Rename the current workspace.

(fn NEW-NAME)" t nil)(autoload '+workspace/delete "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete this workspace. If called with C-u, prompts you for the name of the
workspace to delete.

(fn NAME)" t nil)(autoload '+workspace/kill-session "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete the current session, all workspaces, windows and their buffers.

(fn &optional INTERACTIVE)" t nil)(autoload '+workspace/kill-session-and-quit "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Kill emacs without saving anything." t nil)(autoload '+workspace/new "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a new workspace named NAME. If CLONE-P is non-nil, clone the current
workspace, otherwise the new workspace is blank.

(fn &optional NAME CLONE-P)" t nil)(autoload '+workspace/new-named "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a new workspace with a given NAME.

(fn NAME)" t nil)(autoload '+workspace/switch-to "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to a workspace at a given INDEX. A negative number will start from the
end of the workspace list.

(fn INDEX)" t nil)(dotimes (i 9) (defalias (intern (format "+workspace/switch-to-%d" i)) (lambda nil (interactive) (+workspace/switch-to i)) (format "Switch to workspace #%d" (1+ i))))(autoload '+workspace/switch-to-final "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to the final workspace in open workspaces." t nil)(autoload '+workspace/other "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to the last activated workspace." t nil)(autoload '+workspace/cycle "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Cycle n workspaces to the right (default) or left.

(fn N)" t nil)(autoload '+workspace/switch-left "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" nil t nil)(autoload '+workspace/switch-right "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" nil t nil)(autoload '+workspace/close-window-or-workspace "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Close the selected window. If it's the last window in the workspace, either
close the workspace (as well as its associated frame, if one exists) and move to
the next." t nil)(autoload '+workspace/swap-left "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Swap the current workspace with the COUNTth workspace on its left.

(fn &optional COUNT)" t nil)(autoload '+workspace/swap-right "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Swap the current workspace with the COUNTth workspace on its right.

(fn &optional COUNT)" t nil)(autoload '+workspace-message "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Show an 'elegant' message in the echo area next to a listing of workspaces.

(fn MESSAGE &optional TYPE)" nil nil)(autoload '+workspace-error "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Show an 'elegant' error in the echo area next to a listing of workspaces.

(fn MESSAGE &optional NOERROR)" nil nil)(autoload '+workspace/display "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Display a list of workspaces (like tabs) in the echo area." t nil)(autoload '+workspaces-delete-associated-workspace-h "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete workspace associated with current frame.
A workspace gets associated with a frame when a new frame is interactively
created.

(fn &optional FRAME)" nil nil)(autoload '+workspaces-associate-frame-fn "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a blank, new perspective and associate it with FRAME.

(fn FRAME &optional NEW-FRAME-P)" nil nil)(autoload '+workspaces-set-project-action-fn "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "A `projectile-switch-project-action' that sets the project directory for
`+workspaces-switch-to-project-h'." nil nil)(autoload '+workspaces-switch-to-project-h "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Creates a workspace dedicated to a new project. If one already exists, switch
to it. If in the main workspace and it's empty, recycle that workspace, without
renaming it.

Afterwords, runs `+workspaces-switch-project-function'. By default, this prompts
the user to open a file in the new project.

This be hooked to `projectile-after-switch-project-hook'.

(fn &optional DIR)" nil nil)(autoload '+workspaces-autosave-real-buffers-a "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Don't autosave if no real buffers are open.

(fn FN &rest ARGS)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "/home/jadench/.emacs.d/modules/ui/workspaces/autoload/workspaces" '("+workspace")))(autoload 'straight-remove-unused-repos "straight" "Remove unused repositories from the repos and build directories.
A repo is considered \"unused\" if it was not explicitly requested via
`straight-use-package' during the current Emacs session.
If FORCE is non-nil do not prompt before deleting repos.

(fn &optional FORCE)" t nil)(autoload 'straight-get-recipe "straight" "Interactively select a recipe from one of the recipe repositories.
All recipe repositories in `straight-recipe-repositories' will
first be cloned. After the recipe is selected, it will be copied
to the kill ring. With a prefix argument, first prompt for a
recipe repository to search. Only that repository will be
cloned.

From Lisp code, SOURCES should be a subset of the symbols in
`straight-recipe-repositories'. Only those recipe repositories
are cloned and searched. If it is nil or omitted, then the value
of `straight-recipe-repositories' is used. If SOURCES is the
symbol `interactive', then the user is prompted to select a
recipe repository, and a list containing that recipe repository
is used for the value of SOURCES. ACTION may be `copy' (copy
recipe to the kill ring), `insert' (insert at point), or nil (no
action, just return it).

(fn &optional SOURCES ACTION)" t nil)(autoload 'straight-visit-package-website "straight" "Interactively select a recipe, and visit the package's website." t nil)(autoload 'straight-use-package "straight" "Register, clone, build, and activate a package and its dependencies.
This is the main entry point to the functionality of straight.el.

MELPA-STYLE-RECIPE is either a symbol naming a package, or a list
whose car is a symbol naming a package and whose cdr is a
property list containing e.g. `:type', `:local-repo', `:files',
and VC backend specific keywords.

First, the package recipe is registered with straight.el. If
NO-CLONE is a function, then it is called with two arguments: the
package name as a string, and a boolean value indicating whether
the local repository for the package is available. In that case,
the return value of the function is used as the value of NO-CLONE
instead. In any case, if NO-CLONE is non-nil, then processing
stops here.

Otherwise, the repository is cloned, if it is missing. If
NO-BUILD is a function, then it is called with one argument: the
package name as a string. In that case, the return value of the
function is used as the value of NO-BUILD instead. In any case,
if NO-BUILD is non-nil, then processing halts here. Otherwise,
the package is built and activated. Note that if the package
recipe has a nil `:build' entry, then NO-BUILD is ignored
and processing always stops before building and activation
occurs.

CAUSE is a string explaining the reason why
`straight-use-package' has been called. It is for internal use
only, and is used to construct progress messages. INTERACTIVE is
non-nil if the function has been called interactively. It is for
internal use only, and is used to determine whether to show a
hint about how to install the package permanently.

Return non-nil if package was actually installed, and nil
otherwise (this can only happen if NO-CLONE is non-nil).

(fn MELPA-STYLE-RECIPE &optional NO-CLONE NO-BUILD CAUSE INTERACTIVE)" t nil)(autoload 'straight-register-package "straight" "Register a package without cloning, building, or activating it.
This function is equivalent to calling `straight-use-package'
with a non-nil argument for NO-CLONE. It is provided for
convenience. MELPA-STYLE-RECIPE is as for
`straight-use-package'.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-use-package-no-build "straight" "Register and clone a package without building it.
This function is equivalent to calling `straight-use-package'
with nil for NO-CLONE but a non-nil argument for NO-BUILD. It is
provided for convenience. MELPA-STYLE-RECIPE is as for
`straight-use-package'.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-use-package-lazy "straight" "Register, build, and activate a package if it is already cloned.
This function is equivalent to calling `straight-use-package'
with symbol `lazy' for NO-CLONE. It is provided for convenience.
MELPA-STYLE-RECIPE is as for `straight-use-package'.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-use-recipes "straight" "Register a recipe repository using MELPA-STYLE-RECIPE.
This registers the recipe and builds it if it is already cloned.
Note that you probably want the recipe for a recipe repository to
include a nil `:build' property, to unconditionally
inhibit the build phase.

This function also adds the recipe repository to
`straight-recipe-repositories', at the end of the list.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-override-recipe "straight" "Register MELPA-STYLE-RECIPE as a recipe override.
This puts it in `straight-recipe-overrides', depending on the
value of `straight-current-profile'.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-check-package "straight" "Rebuild a PACKAGE if it has been modified.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. See also `straight-rebuild-package' and
`straight-check-all'.

(fn PACKAGE)" t nil)(autoload 'straight-check-all "straight" "Rebuild any packages that have been modified.
See also `straight-rebuild-all' and `straight-check-package'.
This function should not be called during init." t nil)(autoload 'straight-rebuild-package "straight" "Rebuild a PACKAGE.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument RECURSIVE, rebuild
all dependencies as well. See also `straight-check-package' and
`straight-rebuild-all'.

(fn PACKAGE &optional RECURSIVE)" t nil)(autoload 'straight-rebuild-all "straight" "Rebuild all packages.
See also `straight-check-all' and `straight-rebuild-package'." t nil)(autoload 'straight-prune-build-cache "straight" "Prune the build cache.
This means that only packages that were built in the last init
run and subsequent interactive session will remain; other
packages will have their build mtime information and any cached
autoloads discarded." nil nil)(autoload 'straight-prune-build-directory "straight" "Prune the build directory.
This means that only packages that were built in the last init
run and subsequent interactive session will remain; other
packages will have their build directories deleted." nil nil)(autoload 'straight-prune-build "straight" "Prune the build cache and build directory.
This means that only packages that were built in the last init
run and subsequent interactive session will remain; other
packages will have their build mtime information discarded and
their build directories deleted." t nil)(autoload 'straight-normalize-package "straight" "Normalize a PACKAGE's local repository to its recipe's configuration.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'.

(fn PACKAGE)" t nil)(autoload 'straight-normalize-all "straight" "Normalize all packages. See `straight-normalize-package'.
Return a list of recipes for packages that were not successfully
normalized. If multiple packages come from the same local
repository, only one is normalized.

PREDICATE, if provided, filters the packages that are normalized.
It is called with the package name as a string, and should return
non-nil if the package should actually be normalized.

(fn &optional PREDICATE)" t nil)(autoload 'straight-fetch-package "straight" "Try to fetch a PACKAGE from the primary remote.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
fetch not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-fetch-package-and-deps "straight" "Try to fetch a PACKAGE and its (transitive) dependencies.
PACKAGE, its dependencies, their dependencies, etc. are fetched
from their primary remotes.

PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
fetch not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-fetch-all "straight" "Try to fetch all packages from their primary remotes.
With prefix argument FROM-UPSTREAM, fetch not just from primary
remotes but also from upstreams (for forked packages).

Return a list of recipes for packages that were not successfully
fetched. If multiple packages come from the same local
repository, only one is fetched.

PREDICATE, if provided, filters the packages that are fetched. It
is called with the package name as a string, and should return
non-nil if the package should actually be fetched.

(fn &optional FROM-UPSTREAM PREDICATE)" t nil)(autoload 'straight-merge-package "straight" "Try to merge a PACKAGE from the primary remote.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
merge not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-merge-package-and-deps "straight" "Try to merge a PACKAGE and its (transitive) dependencies.
PACKAGE, its dependencies, their dependencies, etc. are merged
from their primary remotes.

PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
merge not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-merge-all "straight" "Try to merge all packages from their primary remotes.
With prefix argument FROM-UPSTREAM, merge not just from primary
remotes but also from upstreams (for forked packages).

Return a list of recipes for packages that were not successfully
merged. If multiple packages come from the same local
repository, only one is merged.

PREDICATE, if provided, filters the packages that are merged. It
is called with the package name as a string, and should return
non-nil if the package should actually be merged.

(fn &optional FROM-UPSTREAM PREDICATE)" t nil)(autoload 'straight-pull-package "straight" "Try to pull a PACKAGE from the primary remote.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM, pull
not just from primary remote but also from upstream (for forked
packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-pull-package-and-deps "straight" "Try to pull a PACKAGE and its (transitive) dependencies.
PACKAGE, its dependencies, their dependencies, etc. are pulled
from their primary remotes.

PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
pull not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-pull-all "straight" "Try to pull all packages from their primary remotes.
With prefix argument FROM-UPSTREAM, pull not just from primary
remotes but also from upstreams (for forked packages).

Return a list of recipes for packages that were not successfully
pulled. If multiple packages come from the same local repository,
only one is pulled.

PREDICATE, if provided, filters the packages that are pulled. It
is called with the package name as a string, and should return
non-nil if the package should actually be pulled.

(fn &optional FROM-UPSTREAM PREDICATE)" t nil)(autoload 'straight-push-package "straight" "Push a PACKAGE to its primary remote, if necessary.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'.

(fn PACKAGE)" t nil)(autoload 'straight-push-all "straight" "Try to push all packages to their primary remotes.

Return a list of recipes for packages that were not successfully
pushed. If multiple packages come from the same local repository,
only one is pushed.

PREDICATE, if provided, filters the packages that are normalized.
It is called with the package name as a string, and should return
non-nil if the package should actually be normalized.

(fn &optional PREDICATE)" t nil)(autoload 'straight-freeze-versions "straight" "Write version lockfiles for currently activated packages.
This implies first pushing all packages that have unpushed local
changes. If the package management system has been used since the
last time the init-file was reloaded, offer to fix the situation
by reloading the init-file again. If FORCE is
non-nil (interactively, if a prefix argument is provided), skip
all checks and write the lockfile anyway.

Currently, writing version lockfiles requires cloning all lazily
installed packages. Hopefully, this inconvenient requirement will
be removed in the future.

Multiple lockfiles may be written (one for each profile),
according to the value of `straight-profiles'.

(fn &optional FORCE)" t nil)(autoload 'straight-thaw-versions "straight" "Read version lockfiles and restore package versions to those listed." t nil)(autoload 'straight-bug-report "straight" "Test straight.el in a clean environment.
ARGS may be any of the following keywords and their respective values:
  - :pre-bootstrap (Form)...
      Forms evaluated before bootstrapping straight.el
      e.g. (setq straight-repository-branch \"develop\")
      Note this example is already in the default bootstrapping code.

  - :post-bootstrap (Form)...
      Forms evaluated in the testing environment after boostrapping.
      e.g. (straight-use-package '(example :type git :host github))

  - :interactive Boolean
      If nil, the subprocess will immediately exit after the test.
      Output will be printed to `straight-bug-report--process-buffer'
      Otherwise, the subprocess will be interactive.

  - :preserve Boolean
      If non-nil, the test directory is left in the directory stored in the
      variable `temporary-file-directory'. Otherwise, it is
      immediately removed after the test is run.

  - :executable String
      Indicate the Emacs executable to launch.
      Defaults to the path of the current Emacs executable.

  - :raw Boolean
      If non-nil, the raw process output is sent to
      `straight-bug-report--process-buffer'. Otherwise, it is
      formatted as markdown for submitting as an issue.

  - :user-dir String
      If non-nil, the test is run with `user-emacs-directory' set to STRING.
      Otherwise, a temporary directory is created and used.
      Unless absolute, paths are expanded relative to the variable
      `temporary-file-directory'.

ARGS are accessible within the :pre/:post-bootsrap phases via the
locally bound plist, straight-bug-report-args.

(fn &rest ARGS)" nil t)(function-put 'straight-bug-report 'lisp-indent-function '0)(autoload 'straight-dependencies "straight" "Return a list of PACKAGE's dependencies.

(fn &optional PACKAGE)" t nil)(autoload 'straight-dependents "straight" "Return a list PACKAGE's dependents.

(fn &optional PACKAGE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "straight" '("straight-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "straight-ert-print-hack" '("+without-print-limits")))(defvar straight-x-pinned-packages nil "List of pinned packages.")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "straight-x" '("straight-x-")))(autoload 'use-package-autoload-keymap "use-package-bind-key" "Loads PACKAGE and then binds the key sequence used to invoke
this function to KEYMAP-SYMBOL. It then simulates pressing the
same key sequence a again, so that the next key pressed is routed
to the newly loaded keymap.

This function supports use-package's :bind-keymap keyword. It
works by binding the given key sequence to an invocation of this
function for a particular keymap. The keymap is expected to be
defined by the package. In this way, loading the package is
deferred until the prefix key sequence is pressed.

(fn KEYMAP-SYMBOL PACKAGE OVERRIDE)" nil nil)(autoload 'use-package-normalize-binder "use-package-bind-key" "

(fn NAME KEYWORD ARGS)" nil nil)(defalias 'use-package-normalize/:bind 'use-package-normalize-binder)(defalias 'use-package-normalize/:bind* 'use-package-normalize-binder)(defalias 'use-package-autoloads/:bind 'use-package-autoloads-mode)(defalias 'use-package-autoloads/:bind* 'use-package-autoloads-mode)(autoload 'use-package-handler/:bind "use-package-bind-key" "

(fn NAME KEYWORD ARGS REST STATE &optional BIND-MACRO)" nil nil)(defalias 'use-package-normalize/:bind-keymap 'use-package-normalize-binder)(defalias 'use-package-normalize/:bind-keymap* 'use-package-normalize-binder)(autoload 'use-package-handler/:bind-keymap "use-package-bind-key" "

(fn NAME KEYWORD ARGS REST STATE &optional OVERRIDE)" nil nil)(autoload 'use-package-handler/:bind-keymap* "use-package-bind-key" "

(fn NAME KEYWORD ARG REST STATE)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-bind-key" '("use-package-handler/:bind*")))(autoload 'use-package "use-package-core" "Declare an Emacs package by specifying a group of configuration options.

For full documentation, please see the README file that came with
this file.  Usage:

  (use-package package-name
     [:keyword [option]]...)

:init            Code to run before PACKAGE-NAME has been loaded.
:config          Code to run after PACKAGE-NAME has been loaded.  Note that
                 if loading is deferred for any reason, this code does not
                 execute until the lazy load has occurred.
:preface         Code to be run before everything except `:disabled'; this
                 can be used to define functions for use in `:if', or that
                 should be seen by the byte-compiler.

:mode            Form to be added to `auto-mode-alist'.
:magic           Form to be added to `magic-mode-alist'.
:magic-fallback  Form to be added to `magic-fallback-mode-alist'.
:interpreter     Form to be added to `interpreter-mode-alist'.

:commands        Define autoloads for commands that will be defined by the
                 package.  This is useful if the package is being lazily
                 loaded, and you wish to conditionally call functions in your
                 `:init' block that are defined in the package.
:hook            Specify hook(s) to attach this package to.

:bind            Bind keys, and define autoloads for the bound commands.
:bind*           Bind keys, and define autoloads for the bound commands,
                 *overriding all minor mode bindings*.
:bind-keymap     Bind a key prefix to an auto-loaded keymap defined in the
                 package.  This is like `:bind', but for keymaps.
:bind-keymap*    Like `:bind-keymap', but overrides all minor mode bindings

:defer           Defer loading of a package -- this is implied when using
                 `:commands', `:bind', `:bind*', `:mode', `:magic', `:hook',
                 `:magic-fallback', or `:interpreter'.  This can be an integer,
                 to force loading after N seconds of idle time, if the package
                 has not already been loaded.
:after           Delay the use-package declaration until after the named modules
                 have loaded. Once load, it will be as though the use-package
                 declaration (without `:after') had been seen at that moment.
:demand          Prevent the automatic deferred loading introduced by constructs
                 such as `:bind' (see `:defer' for the complete list).

:if EXPR         Initialize and load only if EXPR evaluates to a non-nil value.
:disabled        The package is ignored completely if this keyword is present.
:defines         Declare certain variables to silence the byte-compiler.
:functions       Declare certain functions to silence the byte-compiler.
:load-path       Add to the `load-path' before attempting to load the package.
:diminish        Support for diminish.el (if installed).
:delight         Support for delight.el (if installed).
:custom          Call `custom-set' or `set-default' with each variable
                 definition without modifying the Emacs `custom-file'.
                 (compare with `custom-set-variables').
:custom-face     Call `customize-set-faces' with each face definition.
:ensure          Loads the package using package.el if necessary.
:pin             Pin the package to an archive.

(fn NAME &rest ARGS)" nil t)(function-put 'use-package 'lisp-indent-function '1)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-core" '("use-package-")))(autoload 'use-package-normalize/:delight "use-package-delight" "Normalize arguments to delight.

(fn NAME KEYWORD ARGS)" nil nil)(autoload 'use-package-handler/:delight "use-package-delight" "

(fn NAME KEYWORD ARGS REST STATE)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-delight" '("use-package-normalize-delight")))(autoload 'use-package-normalize/:diminish "use-package-diminish" "

(fn NAME KEYWORD ARGS)" nil nil)(autoload 'use-package-handler/:diminish "use-package-diminish" "

(fn NAME KEYWORD ARG REST STATE)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-diminish" '("use-package-normalize-diminish")))(autoload 'use-package-normalize/:ensure "use-package-ensure" "

(fn NAME KEYWORD ARGS)" nil nil)(autoload 'use-package-handler/:ensure "use-package-ensure" "

(fn NAME KEYWORD ENSURE REST STATE)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-ensure" '("use-package-")))(autoload 'use-package-jump-to-package-form "use-package-jump" "Attempt to find and jump to the `use-package' form that loaded
PACKAGE. This will only find the form if that form actually
required PACKAGE. If PACKAGE was previously required then this
function will jump to the file that originally required PACKAGE
instead.

(fn PACKAGE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-jump" '("use-package-find-require")))(autoload 'use-package-lint "use-package-lint" "Check for errors in use-package declarations.
For example, if the module's `:if' condition is met, but even
with the specified `:load-path' the module cannot be found." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-lint" '("use-package-lint-declaration")))(autoload 'bind-key "bind-key" "Bind KEY-NAME to COMMAND in KEYMAP (`global-map' if not passed).

KEY-NAME may be a vector, in which case it is passed straight to
`define-key'. Or it may be a string to be interpreted as
spelled-out keystrokes, e.g., \"C-c C-z\". See documentation of
`edmacro-mode' for details.

COMMAND must be an interactive function or lambda form.

KEYMAP, if present, should be a keymap variable or symbol.
For example:

  (bind-key \"M-h\" #'some-interactive-function my-mode-map)

  (bind-key \"M-h\" #'some-interactive-function 'my-mode-map)

If PREDICATE is non-nil, it is a form evaluated to determine when
a key should be bound. It must return non-nil in such cases.
Emacs can evaluate this form at any time that it does redisplay
or operates on menu data structures, so you should write it so it
can safely be called at any time.

(fn KEY-NAME COMMAND &optional KEYMAP PREDICATE)" nil t)(autoload 'unbind-key "bind-key" "Unbind the given KEY-NAME, within the KEYMAP (if specified).
See `bind-key' for more details.

(fn KEY-NAME &optional KEYMAP)" nil t)(autoload 'bind-key* "bind-key" "Similar to `bind-key', but overrides any mode-specific bindings.

(fn KEY-NAME COMMAND &optional PREDICATE)" nil t)(autoload 'bind-keys "bind-key" "Bind multiple keys at once.

Accepts keyword arguments:
:map MAP               - a keymap into which the keybindings should be
                         added
:prefix KEY            - prefix key for these bindings
:prefix-map MAP        - name of the prefix map that should be created
                         for these bindings
:prefix-docstring STR  - docstring for the prefix-map variable
:menu-name NAME        - optional menu string for prefix map
:filter FORM           - optional form to determine when bindings apply

The rest of the arguments are conses of keybinding string and a
function symbol (unquoted).

(fn &rest ARGS)" nil t)(autoload 'bind-keys* "bind-key" "

(fn &rest ARGS)" nil t)(autoload 'describe-personal-keybindings "bind-key" "Display all the personal keybindings defined by `bind-key'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bind-key" '("bind-key" "compare-keybindings" "get-binding-description" "override-global-m" "personal-keybindings")))(defvar auto-minor-mode-alist nil "Alist of filename patterns vs corresponding minor mode functions.

This is an equivalent of ‘auto-mode-alist’, for minor modes.

Unlike ‘auto-mode-alist’, matching is always case-folded.")(defvar auto-minor-mode-magic-alist nil "Alist of buffer beginnings vs corresponding minor mode functions.

This is an equivalent of ‘magic-mode-alist’, for minor modes.

Magic minor modes are applied after ‘set-auto-mode’ enables any
major mode, so it’s possible to check for expected major modes in
match functions.

Unlike ‘magic-mode-alist’, matching is always case-folded.")(autoload 'auto-minor-mode-set "auto-minor-mode" "Enable all minor modes appropriate for the current buffer.

If the optional argument KEEP-MODE-IF-SAME is non-nil, then we
don’t re-activate minor modes already enabled in the buffer.

(fn &optional KEEP-MODE-IF-SAME)" nil nil)(advice-add #'set-auto-mode :after #'auto-minor-mode-set)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "auto-minor-mode" '("auto-minor-mode-")))(defvar gcmh-mode nil "Non-nil if Gcmh mode is enabled.
See the `gcmh-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `gcmh-mode'.")(autoload 'gcmh-mode "gcmh" "Minor mode to tweak Garbage Collection strategy.

If called interactively, enable Gcmh mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gcmh" '("gcmh-")))(defvar explain-pause-mode nil "Non-nil if Explain-Pause mode is enabled.
See the `explain-pause-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `explain-pause-mode'.")(autoload 'explain-pause-mode "explain-pause-mode" "Toggle whether to attempt to discover and explain pauses in emacs.

If called interactively, enable Explain-Pause mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

When enabled, explain-pause will attempt to time how long blocking activity
takes. If it measures blocking work that takes longer then a configurable
amount of time, explain-pause logs contextual information that can be used
to help diagnose and propose areas of elisp that might affect emacs
interactivity.

When blocking work takes too long many times, explain-mode profiles the
blocking work using the builtin Emacs profiler (`profiler' package). A fixed
number of these are saved.

This mode hooks `call-interactively', both idle and regular timers, and process
filters and sentinels.

When running interactively, e.g. run from `M-x' or similar, `explain-pause-mode'
must install itself after some time while Emacs is not doing anything.

(fn &optional ARG)" t nil)(autoload 'explain-pause-top "explain-pause-mode" "Show a top-like report of commands recently ran and their runtime. Returns
the buffer." t nil)(autoload 'explain-pause-log-to-socket "explain-pause-mode" "Log the event stream to a UNIX file socket, FILE-SOCKET. If FILE-SOCKET is nil,
then the default location `explain-pause-default-log' is used. This file socket
should already exist. It might be created by `explain-pause-socket' in another
Emacs process, in which case `explain-mode-top-from-socket' will receive and
present that data. Or you can simply receive the data in any other process that
can create UNIX sockets, for example `netcat'.To turn off logging, run
`explain-pause-log-off'.

The stream is written as newline delimited elisp readable lines. See
`explain-pause-log--send-*' family of commands for the format of those objects.

Returns the process that is connected to the socket.

(fn &optional FILE-SOCKET)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "explain-pause-mode" '("explain-")))(autoload 'all-the-icons-icon-for-dir "all-the-icons" "Get the formatted icon for DIR.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

Note: You want chevron, please use `all-the-icons-icon-for-dir-with-chevron'.

(fn DIR &rest ARG-OVERRIDES)" nil nil)(autoload 'all-the-icons-icon-for-file "all-the-icons" "Get the formatted icon for FILE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn FILE &rest ARG-OVERRIDES)" nil nil)(autoload 'all-the-icons-icon-for-mode "all-the-icons" "Get the formatted icon for MODE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn MODE &rest ARG-OVERRIDES)" nil nil)(autoload 'all-the-icons-icon-for-url "all-the-icons" "Get the formatted icon for URL.
If an icon for URL isn't found in `all-the-icons-url-alist', a globe is used.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn URL &rest ARG-OVERRIDES)" nil nil)(autoload 'all-the-icons-install-fonts "all-the-icons" "Helper function to download and install the latests fonts based on OS.
When PFX is non-nil, ignore the prompt and just install

(fn &optional PFX)" t nil)(autoload 'all-the-icons-insert "all-the-icons" "Interactive icon insertion function.
When Prefix ARG is non-nil, insert the propertized icon.
When FAMILY is non-nil, limit the candidates to the icon set matching it.

(fn &optional ARG FAMILY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "all-the-icons" '("all-the-icons-")))(autoload 'hide-mode-line-mode "hide-mode-line" "Minor mode to hide the mode-line in the current buffer.

If called interactively, enable Hide-Mode-Line mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-hide-mode-line-mode 'globalized-minor-mode t)(defvar global-hide-mode-line-mode nil "Non-nil if Global Hide-Mode-Line mode is enabled.
See the `global-hide-mode-line-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-hide-mode-line-mode'.")(autoload 'global-hide-mode-line-mode "hide-mode-line" "Toggle Hide-Mode-Line mode in all buffers.
With prefix ARG, enable Global Hide-Mode-Line mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Hide-Mode-Line mode is enabled in all buffers where
`turn-on-hide-mode-line-mode' would do it.
See `hide-mode-line-mode' for more information on Hide-Mode-Line mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-hide-mode-line-mode "hide-mode-line" "Turn on `hide-mode-line-mode'.
Unless in `fundamental-mode' or `hide-mode-line-excluded-modes'." nil nil)(autoload 'turn-off-hide-mode-line-mode "hide-mode-line" "Turn off `hide-mode-line-mode'." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hide-mode-line" '("hide-mode-line-")))(autoload 'highlight-numbers-mode "highlight-numbers" "Minor mode for highlighting numeric literals in source code.

Toggle Highlight Numbers mode on or off.

With a prefix argument ARG, enable Highlight Numbers mode if ARG is
positive, and disable it otherwise. If called from Lisp, enable
the mode if ARG is omitted or nil, and toggle it if ARG is `toggle'.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "highlight-numbers" '("highlight-numbers-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parent-mode" '("parent-mode-")))(autoload 'rainbow-delimiters-mode "rainbow-delimiters" "Highlight nested parentheses, brackets, and braces according to their depth.

If called interactively, enable Rainbow-Delimiters mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'rainbow-delimiters-mode-enable "rainbow-delimiters" "Enable `rainbow-delimiters-mode'." nil nil)(autoload 'rainbow-delimiters-mode-disable "rainbow-delimiters" "Disable `rainbow-delimiters-mode'." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rainbow-delimiters" '("rainbow-delimiters-")))(autoload 'restart-emacs-handle-command-line-args "restart-emacs" "Handle the --restart-emacs-desktop command line argument.

The value of the argument is the desktop file from which the frames should be
restored.  IGNORED are ignored.

(fn &rest IGNORED)" nil nil)(add-to-list 'command-switch-alist '("--restart-emacs-desktop" . restart-emacs-handle-command-line-args))(autoload 'restart-emacs "restart-emacs" "Restart Emacs.

When called interactively ARGS is interpreted as follows

- with a single `universal-argument' (`C-u') Emacs is restarted
  with `--debug-init' flag
- with two `universal-argument' (`C-u') Emacs is restarted with
  `-Q' flag
- with three `universal-argument' (`C-u') the user prompted for
  the arguments

When called non-interactively ARGS should be a list of arguments
with which Emacs should be restarted.

(fn &optional ARGS)" t nil)(autoload 'restart-emacs-start-new-emacs "restart-emacs" "Start a new instance of Emacs.

When called interactively ARGS is interpreted as follows

- with a single `universal-argument' (`C-u') the new Emacs is started
  with `--debug-init' flag
- with two `universal-argument' (`C-u') the new Emacs is started with
  `-Q' flag
- with three `universal-argument' (`C-u') the user prompted for
  the arguments

When called non-interactively ARGS should be a list of arguments
with which the new Emacs should be started.

(fn &optional ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "restart-emacs" '("restart-emacs-")))(autoload 'better-jumper-set-jump "better-jumper" "Set jump point at POS.
POS defaults to point.

(fn &optional POS)" t nil)(autoload 'better-jumper-jump-backward "better-jumper" "Jump backward COUNT positions to previous location in jump list.
If COUNT is nil then defaults to 1.

(fn &optional COUNT)" t nil)(autoload 'better-jumper-jump-forward "better-jumper" "Jump forward COUNT positions to location in jump list.
If COUNT is nil then defaults to 1.

(fn &optional COUNT)" t nil)(autoload 'better-jumper-jump-newest "better-jumper" "Jump forward to newest entry in jump list." t nil)(autoload 'better-jumper-clear-jumps "better-jumper" "Clears jump list for WINDOW-OR-BUFFER.
WINDOW-OR-BUFFER should be either a window or buffer depending on the
context and will default to current context if not provided.

(fn &optional WINDOW-OR-BUFFER)" t nil)(autoload 'better-jumper-get-jumps "better-jumper" "Get jumps for WINDOW-OR-BUFFER.
WINDOW-OR-BUFFER should be either a window or buffer depending on the
context and will default to current context if not provided.

(fn &optional WINDOW-OR-BUFFER)" nil nil)(autoload 'better-jumper-set-jumps "better-jumper" "Set jumps to JUMPS for WINDOW-OR-BUFFER.
WINDOW-OR-BUFFER should be either a window or buffer depending on the
context and will default to current context if not provided.

(fn JUMPS &optional WINDOW-OR-BUFFER)" nil nil)(autoload 'turn-on-better-jumper-mode "better-jumper" "Enable better-jumper-mode in the current buffer." nil nil)(autoload 'turn-off-better-jumper-mode "better-jumper" "Disable `better-jumper-local-mode' in the current buffer." nil nil)(autoload 'better-jumper-local-mode "better-jumper" "better-jumper minor mode.

If called interactively, enable Better-Jumper-Local mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'better-jumper-mode 'globalized-minor-mode t)(defvar better-jumper-mode nil "Non-nil if Better-Jumper mode is enabled.
See the `better-jumper-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `better-jumper-mode'.")(autoload 'better-jumper-mode "better-jumper" "Toggle Better-Jumper-Local mode in all buffers.
With prefix ARG, enable Better-Jumper mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Better-Jumper-Local mode is enabled in all buffers where
`turn-on-better-jumper-mode' would do it.
See `better-jumper-local-mode' for more information on Better-Jumper-Local mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "better-jumper" '("better-jumper-")))(autoload 'dtrt-indent-mode "dtrt-indent" "Toggle dtrt-indent mode.
With no argument, this command toggles the mode.  Non-null prefix
argument turns on the mode.  Null prefix argument turns off the
mode.

If called interactively, enable Dtrt-Indent mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When dtrt-indent mode is enabled, the proper indentation offset
and `indent-tabs-mode' will be guessed for newly opened files and
adjusted transparently.

(fn &optional ARG)" t nil)(put 'dtrt-indent-global-mode 'globalized-minor-mode t)(defvar dtrt-indent-global-mode nil "Non-nil if Dtrt-Indent-Global mode is enabled.
See the `dtrt-indent-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dtrt-indent-global-mode'.")(autoload 'dtrt-indent-global-mode "dtrt-indent" "Toggle Dtrt-Indent mode in all buffers.
With prefix ARG, enable Dtrt-Indent-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Dtrt-Indent mode is enabled in all buffers where
`(lambda nil (when (derived-mode-p 'prog-mode 'text-mode 'javascript-mode) (dtrt-indent-mode)))' would do it.
See `dtrt-indent-mode' for more information on Dtrt-Indent mode.

(fn &optional ARG)" t nil)(defvar dtrt-indent-mode nil "Toggle adaptive indentation mode.
Setting this variable directly does not take effect;
use either \\[customize] or the function `dtrt-indent-mode'.")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dtrt-indent" '("dtrt-indent-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dtrt-indent-diag" '("dtrt-indent-" "save-buffer-state")))(autoload 'helpful-function "helpful" "Show help for function named SYMBOL.

See also `helpful-macro', `helpful-command' and `helpful-callable'.

(fn SYMBOL)" t nil)(autoload 'helpful-command "helpful" "Show help for interactive function named SYMBOL.

See also `helpful-function'.

(fn SYMBOL)" t nil)(autoload 'helpful-key "helpful" "Show help for interactive command bound to KEY-SEQUENCE.

(fn KEY-SEQUENCE)" t nil)(autoload 'helpful-macro "helpful" "Show help for macro named SYMBOL.

(fn SYMBOL)" t nil)(autoload 'helpful-callable "helpful" "Show help for function, macro or special form named SYMBOL.

See also `helpful-macro', `helpful-function' and `helpful-command'.

(fn SYMBOL)" t nil)(autoload 'helpful-symbol "helpful" "Show help for SYMBOL, a variable, function or macro.

See also `helpful-callable' and `helpful-variable'.

(fn SYMBOL)" t nil)(autoload 'helpful-variable "helpful" "Show help for variable named SYMBOL.

(fn SYMBOL)" t nil)(autoload 'helpful-at-point "helpful" "Show help for the symbol at point." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helpful" '("helpful-")))(autoload 'dash-fontify-mode "dash" "Toggle fontification of Dash special variables.

If called interactively, enable Dash-Fontify mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

(fn &optional ARG)" t nil)(put 'global-dash-fontify-mode 'globalized-minor-mode t)(defvar global-dash-fontify-mode nil "Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")(autoload 'global-dash-fontify-mode "dash" "Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.
See `dash-fontify-mode' for more information on Dash-Fontify mode.

(fn &optional ARG)" t nil)(autoload 'dash-register-info-lookup "dash" "Register the Dash Info manual with `info-lookup-symbol'.
This allows Dash symbols to be looked up with \\[info-lookup-symbol]." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-juxt" "-keep" "-l" "-m" "-no" "-o" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "s" '("s-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "f" '("f-")))(autoload 'elisp-refs-function "elisp-refs" "Display all the references to function SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for functions, not macros. For that, see
`elisp-refs-macro'.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(autoload 'elisp-refs-macro "elisp-refs" "Display all the references to macro SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for macros, not functions. For that, see
`elisp-refs-function'.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(autoload 'elisp-refs-special "elisp-refs" "Display all the references to special form SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(autoload 'elisp-refs-variable "elisp-refs" "Display all the references to variable SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(autoload 'elisp-refs-symbol "elisp-refs" "Display all the references to SYMBOL in all loaded elisp files.

If called with a prefix, prompt for a directory to limit the
search.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-refs" '("elisp-refs-")))(defvar pcre-mode nil "Non-nil if PCRE mode is enabled.
See the `pcre-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pcre-mode'.")(autoload 'pcre-mode "pcre2el" "Use emulated PCRE syntax for regexps wherever possible.

If called interactively, enable PCRE mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

Advises the `interactive' specs of `read-regexp' and the
following other functions so that they read PCRE syntax and
translate to its Emacs equivalent:

- `align-regexp'
- `find-tag-regexp'
- `sort-regexp-fields'
- `isearch-message-prefix'
- `ibuffer-do-replace-regexp'

Also alters the behavior of `isearch-mode' when searching by regexp.

(fn &optional ARG)" t nil)(autoload 'pcre-query-replace-regexp "pcre2el" "Perform `query-replace-regexp' using PCRE syntax.

Consider using `pcre-mode' instead of this function." t nil)(autoload 'rxt-elisp-to-pcre "pcre2el" "Translate REGEXP, a regexp in Emacs Lisp syntax, to Perl-compatible syntax.

Interactively, reads the regexp in one of three ways. With a
prefix arg, reads from minibuffer without string escaping, like
`query-replace-regexp'. Without a prefix arg, uses the text of
the region if it is active. Otherwise, uses the result of
evaluating the sexp before point (which might be a string regexp
literal or an expression that produces a string).

Displays the translated PCRE regexp in the echo area and copies
it to the kill ring.

Emacs regexp features such as syntax classes which cannot be
translated to PCRE will cause an error.

(fn REGEXP)" t nil)(autoload 'rxt-elisp-to-rx "pcre2el" "Translate REGEXP, a regexp in Emacs Lisp syntax, to `rx' syntax.

See `rxt-elisp-to-pcre' for a description of the interactive
behavior and `rx' for documentation of the S-expression based
regexp syntax.

(fn REGEXP)" t nil)(autoload 'rxt-elisp-to-strings "pcre2el" "Return a list of all strings matched by REGEXP, an Emacs Lisp regexp.

See `rxt-elisp-to-pcre' for a description of the interactive behavior.

This is useful primarily for getting back the original list of
strings from a regexp generated by `regexp-opt', but it will work
with any regexp without unbounded quantifiers (*, +, {2, } and so
on).

Throws an error if REGEXP contains any infinite quantifiers.

(fn REGEXP)" t nil)(autoload 'rxt-toggle-elisp-rx "pcre2el" "Toggle the regexp near point between Elisp string and rx syntax." t nil)(autoload 'rxt-pcre-to-elisp "pcre2el" "Translate PCRE, a regexp in Perl-compatible syntax, to Emacs Lisp.

Interactively, uses the contents of the region if it is active,
otherwise reads from the minibuffer. Prints the Emacs translation
in the echo area and copies it to the kill ring.

PCRE regexp features that cannot be translated into Emacs syntax
will cause an error. See the commentary section of pcre2el.el for
more details.

(fn PCRE &optional FLAGS)" t nil)(defalias 'pcre-to-elisp 'rxt-pcre-to-elisp)(autoload 'rxt-pcre-to-rx "pcre2el" "Translate PCRE, a regexp in Perl-compatible syntax, to `rx' syntax.

See `rxt-pcre-to-elisp' for a description of the interactive behavior.

(fn PCRE &optional FLAGS)" t nil)(autoload 'rxt-pcre-to-strings "pcre2el" "Return a list of all strings matched by PCRE, a Perl-compatible regexp.

See `rxt-elisp-to-pcre' for a description of the interactive
behavior and `rxt-elisp-to-strings' for why this might be useful.

Throws an error if PCRE contains any infinite quantifiers.

(fn PCRE &optional FLAGS)" t nil)(autoload 'rxt-explain-elisp "pcre2el" "Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.

REGEXP is a regular expression in Emacs Lisp syntax. See
`rxt-elisp-to-pcre' for a description of how REGEXP is read
interactively.

(fn REGEXP)" t nil)(autoload 'rxt-explain-pcre "pcre2el" "Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.

REGEXP is a regular expression in PCRE syntax. See
`rxt-pcre-to-elisp' for a description of how REGEXP is read
interactively.

(fn REGEXP &optional FLAGS)" t nil)(autoload 'rxt-quote-pcre "pcre2el" "Return a PCRE regexp which matches TEXT literally.

Any PCRE metacharacters in TEXT will be quoted with a backslash.

(fn TEXT)" nil nil)(autoload 'rxt-explain "pcre2el" "Pop up a buffer with pretty-printed `rx' syntax for the regex at point.

Chooses regex syntax to read based on current major mode, calling
`rxt-explain-elisp' if buffer is in `emacs-lisp-mode' or
`lisp-interaction-mode', or `rxt-explain-pcre' otherwise." t nil)(autoload 'rxt-convert-syntax "pcre2el" "Convert regex at point to other kind of syntax, depending on major mode.

For buffers in `emacs-lisp-mode' or `lisp-interaction-mode',
calls `rxt-elisp-to-pcre' to convert to PCRE syntax. Otherwise,
calls `rxt-pcre-to-elisp' to convert to Emacs syntax.

The converted syntax is displayed in the echo area and copied to
the kill ring; see the two functions named above for details." t nil)(autoload 'rxt-convert-to-rx "pcre2el" "Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode." t nil)(autoload 'rxt-convert-to-strings "pcre2el" "Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode." t nil)(autoload 'rxt-mode "pcre2el" "Regex translation utilities.

If called interactively, enable Rxt mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'turn-on-rxt-mode "pcre2el" "Turn on `rxt-mode' in the current buffer." t nil)(put 'rxt-global-mode 'globalized-minor-mode t)(defvar rxt-global-mode nil "Non-nil if Rxt-Global mode is enabled.
See the `rxt-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `rxt-global-mode'.")(autoload 'rxt-global-mode "pcre2el" "Toggle Rxt mode in all buffers.
With prefix ARG, enable Rxt-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Rxt mode is enabled in all buffers where
`turn-on-rxt-mode' would do it.
See `rxt-mode' for more information on Rxt mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pcre2el" '("pcre-" "rxt-")))(autoload 'sp-cheat-sheet "smartparens" "Generate a cheat sheet of all the smartparens interactive functions.

Without a prefix argument, print only the short documentation and examples.

With non-nil prefix argument ARG, show the full documentation for each function.

You can follow the links to the function or variable help page.
To get back to the full list, use \\[help-go-back].

You can use `beginning-of-defun' and `end-of-defun' to jump to
the previous/next entry.

Examples are fontified using the `font-lock-string-face' for
better orientation.

(fn &optional ARG)" t nil)(defvar smartparens-mode-map (make-sparse-keymap) "Keymap used for `smartparens-mode'.")(autoload 'sp-use-paredit-bindings "smartparens" "Initiate `smartparens-mode-map' with `sp-paredit-bindings'." t nil)(autoload 'sp-use-smartparens-bindings "smartparens" "Initiate `smartparens-mode-map' with `sp-smartparens-bindings'." t nil)(autoload 'smartparens-mode "smartparens" "Toggle smartparens mode.

If called interactively, enable Smartparens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

You can enable pre-set bindings by customizing
`sp-base-key-bindings' variable.  The current content of
`smartparens-mode-map' is:

 \\{smartparens-mode-map}

(fn &optional ARG)" t nil)(autoload 'smartparens-strict-mode "smartparens" "Toggle the strict smartparens mode.

If called interactively, enable Smartparens-Strict mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When strict mode is active, `delete-char', `kill-word' and their
backward variants will skip over the pair delimiters in order to
keep the structure always valid (the same way as `paredit-mode'
does).  This is accomplished by remapping them to
`sp-delete-char' and `sp-kill-word'.  There is also function
`sp-kill-symbol' that deletes symbols instead of words, otherwise
working exactly the same (it is not bound to any key by default).

When strict mode is active, this is indicated with \"/s\"
after the smartparens indicator in the mode list.

(fn &optional ARG)" t nil)(put 'smartparens-global-strict-mode 'globalized-minor-mode t)(defvar smartparens-global-strict-mode nil "Non-nil if Smartparens-Global-Strict mode is enabled.
See the `smartparens-global-strict-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `smartparens-global-strict-mode'.")(autoload 'smartparens-global-strict-mode "smartparens" "Toggle Smartparens-Strict mode in all buffers.
With prefix ARG, enable Smartparens-Global-Strict mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Smartparens-Strict mode is enabled in all buffers where
`turn-on-smartparens-strict-mode' would do it.
See `smartparens-strict-mode' for more information on Smartparens-Strict mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-smartparens-strict-mode "smartparens" "Turn on `smartparens-strict-mode'." t nil)(autoload 'turn-off-smartparens-strict-mode "smartparens" "Turn off `smartparens-strict-mode'." t nil)(put 'smartparens-global-mode 'globalized-minor-mode t)(defvar smartparens-global-mode nil "Non-nil if Smartparens-Global mode is enabled.
See the `smartparens-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `smartparens-global-mode'.")(autoload 'smartparens-global-mode "smartparens" "Toggle Smartparens mode in all buffers.
With prefix ARG, enable Smartparens-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Smartparens mode is enabled in all buffers where
`turn-on-smartparens-mode' would do it.
See `smartparens-mode' for more information on Smartparens mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-smartparens-mode "smartparens" "Turn on `smartparens-mode'.

This function is used to turn on `smartparens-global-mode'.

By default `smartparens-global-mode' ignores buffers with
`mode-class' set to special, but only if they are also not comint
buffers.

Additionally, buffers on `sp-ignore-modes-list' are ignored.

You can still turn on smartparens in these mode manually (or
in mode's startup-hook etc.) by calling `smartparens-mode'." t nil)(autoload 'turn-off-smartparens-mode "smartparens" "Turn off `smartparens-mode'." t nil)(autoload 'show-smartparens-mode "smartparens" "Toggle visualization of matching pairs.  When enabled, any
matching pair is highlighted after `sp-show-pair-delay' seconds
of Emacs idle time if the point is immediately in front or after
a pair.  This mode works similarly to `show-paren-mode', but
support custom pairs.

If called interactively, enable Show-Smartparens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'show-smartparens-global-mode 'globalized-minor-mode t)(defvar show-smartparens-global-mode nil "Non-nil if Show-Smartparens-Global mode is enabled.
See the `show-smartparens-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `show-smartparens-global-mode'.")(autoload 'show-smartparens-global-mode "smartparens" "Toggle Show-Smartparens mode in all buffers.
With prefix ARG, enable Show-Smartparens-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Show-Smartparens mode is enabled in all buffers where
`turn-on-show-smartparens-mode' would do it.
See `show-smartparens-mode' for more information on Show-Smartparens mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-show-smartparens-mode "smartparens" "Turn on `show-smartparens-mode'." t nil)(autoload 'turn-off-show-smartparens-mode "smartparens" "Turn off `show-smartparens-mode'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens" '("smartparens-" "sp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-clojure" '("sp-clojure-prefix")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-config" '("sp-lisp-invalid-hyperlink-p")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-crystal" '("sp-crystal-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-elixir" '("sp-elixir-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-ess" '("sp-ess-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-haskell" '("sp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-html" '("sp-html-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-latex" '("sp-latex-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-lua" '("sp-lua-post-keyword-insert")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-markdown" '("sp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-org" '("sp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-python" '("sp-python-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-rst" '("sp-rst-point-after-backtick")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-ruby" '("sp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-rust" '("sp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-scala" '("sp-scala-wrap-with-indented-newlines")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smartparens-text" '("sp-text-mode-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sp-sublimetext-like" '("sp-point-not-before-word")))(autoload 'ws-butler-mode "ws-butler" "White space cleanup, without obtrusive white space removal.

If called interactively, enable Ws-Butler mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Whitespaces at EOL and EOF are trimmed upon file save, and only
for lines modified by you.

(fn &optional ARG)" t nil)(put 'ws-butler-global-mode 'globalized-minor-mode t)(defvar ws-butler-global-mode nil "Non-nil if Ws-Butler-Global mode is enabled.
See the `ws-butler-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ws-butler-global-mode'.")(autoload 'ws-butler-global-mode "ws-butler" "Toggle Ws-Butler mode in all buffers.
With prefix ARG, enable Ws-Butler-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Ws-Butler mode is enabled in all buffers where
`(lambda nil (unless (apply #'derived-mode-p ws-butler-global-exempt-modes) (ws-butler-mode)))' would do it.
See `ws-butler-mode' for more information on Ws-Butler mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ws-butler" '("ws-butler-")))(autoload 'projectile-version "projectile" "Get the Projectile version as string.

If called interactively or if SHOW-VERSION is non-nil, show the
version in the echo area and the messages buffer.

The returned string includes both, the version from package.el
and the library version, if both a present and different.

If the version number could not be determined, signal an error,
if called interactively, or if SHOW-VERSION is non-nil, otherwise
just return nil.

(fn &optional SHOW-VERSION)" t nil)(autoload 'projectile-invalidate-cache "projectile" "Remove the current project's files from `projectile-projects-cache'.

With a prefix argument PROMPT prompts for the name of the project whose cache
to invalidate.

(fn PROMPT)" t nil)(autoload 'projectile-purge-file-from-cache "projectile" "Purge FILE from the cache of the current project.

(fn FILE)" t nil)(autoload 'projectile-purge-dir-from-cache "projectile" "Purge DIR from the cache of the current project.

(fn DIR)" t nil)(autoload 'projectile-cache-current-file "projectile" "Add the currently visited file to the cache." t nil)(autoload 'projectile-discover-projects-in-directory "projectile" "Discover any projects in DIRECTORY and add them to the projectile cache.

If DEPTH is non-nil recursively descend exactly DEPTH levels below DIRECTORY and
discover projects there.

(fn DIRECTORY &optional DEPTH)" t nil)(autoload 'projectile-discover-projects-in-search-path "projectile" "Discover projects in `projectile-project-search-path'.
Invoked automatically when `projectile-mode' is enabled." t nil)(autoload 'projectile-switch-to-buffer "projectile" "Switch to a project buffer." t nil)(autoload 'projectile-switch-to-buffer-other-window "projectile" "Switch to a project buffer and show it in another window." t nil)(autoload 'projectile-switch-to-buffer-other-frame "projectile" "Switch to a project buffer and show it in another frame." t nil)(autoload 'projectile-display-buffer "projectile" "Display a project buffer in another window without selecting it." t nil)(autoload 'projectile-project-buffers-other-buffer "projectile" "Switch to the most recently selected buffer project buffer.
Only buffers not visible in windows are returned." t nil)(autoload 'projectile-multi-occur "projectile" "Do a `multi-occur' in the project's buffers.
With a prefix argument, show NLINES of context.

(fn &optional NLINES)" t nil)(autoload 'projectile-find-other-file "projectile" "Switch between files with the same name but different extensions.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t nil)(autoload 'projectile-find-other-file-other-window "projectile" "Switch between files with the same name but different extensions in other window.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t nil)(autoload 'projectile-find-other-file-other-frame "projectile" "Switch between files with the same name but different extensions in other frame.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t nil)(autoload 'projectile-find-file-dwim "projectile" "Jump to a project's files using completion based on context.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works even
if the filename is incomplete, but there's only a single file in the current project
that matches the filename at point.  For example, if there's only a single file named
\"projectile/projectile.el\" but the current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim' still switches to \"projectile/projectile.el\" immediately
 because this is the only filename that matches.

- If it finds a list of files, the list is displayed for selecting.  A list of
files is displayed when a filename appears more than one in the project or the
filename at point is a prefix of more than two files in a project.  For example,
if `projectile-find-file-dwim' is executed on a filepath like \"projectile/\", it lists
the content of that directory.  If it is executed on a partial filename like
 \"projectile/a\", a list of files with character 'a' in that directory is presented.

- If it finds nothing, display a list of all files in project for selecting.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file-dwim-other-window "projectile" "Jump to a project's files using completion based on context in other window.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works even
if the filename is incomplete, but there's only a single file in the current project
that matches the filename at point.  For example, if there's only a single file named
\"projectile/projectile.el\" but the current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim-other-window' still switches to \"projectile/projectile.el\"
immediately because this is the only filename that matches.

- If it finds a list of files, the list is displayed for selecting.  A list of
files is displayed when a filename appears more than one in the project or the
filename at point is a prefix of more than two files in a project.  For example,
if `projectile-find-file-dwim-other-window' is executed on a filepath like \"projectile/\", it lists
the content of that directory.  If it is executed on a partial filename
like \"projectile/a\", a list of files with character 'a' in that directory
is presented.

- If it finds nothing, display a list of all files in project for selecting.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file-dwim-other-frame "projectile" "Jump to a project's files using completion based on context in other frame.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works even
if the filename is incomplete, but there's only a single file in the current project
that matches the filename at point.  For example, if there's only a single file named
\"projectile/projectile.el\" but the current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim-other-frame' still switches to \"projectile/projectile.el\"
immediately because this is the only filename that matches.

- If it finds a list of files, the list is displayed for selecting.  A list of
files is displayed when a filename appears more than one in the project or the
filename at point is a prefix of more than two files in a project.  For example,
if `projectile-find-file-dwim-other-frame' is executed on a filepath like \"projectile/\", it lists
the content of that directory.  If it is executed on a partial filename
like \"projectile/a\", a list of files with character 'a' in that directory
is presented.

- If it finds nothing, display a list of all files in project for selecting.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file "projectile" "Jump to a project's file using completion.
With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file-other-window "projectile" "Jump to a project's file using completion and show it in another window.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file-other-frame "projectile" "Jump to a project's file using completion and show it in another frame.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-toggle-project-read-only "projectile" "Toggle project read only." t nil)(autoload 'projectile-find-dir "projectile" "Jump to a project's directory using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-dir-other-window "projectile" "Jump to a project's directory in other window using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-dir-other-frame "projectile" "Jump to a project's directory in other frame using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-test-file "projectile" "Jump to a project's test file using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-related-file-other-window "projectile" "Open related file in other window." t nil)(autoload 'projectile-find-related-file-other-frame "projectile" "Open related file in other frame." t nil)(autoload 'projectile-find-related-file "projectile" "Open related file." t nil)(autoload 'projectile-related-files-fn-groups "projectile" "Generate a related-files-fn which relates as KIND for files in each of GROUPS.

(fn KIND GROUPS)" nil nil)(autoload 'projectile-related-files-fn-extensions "projectile" "Generate a related-files-fn which relates as KIND for files having EXTENSIONS.

(fn KIND EXTENSIONS)" nil nil)(autoload 'projectile-related-files-fn-test-with-prefix "projectile" "Generate a related-files-fn which relates tests and impl for files with EXTENSION based on TEST-PREFIX.

(fn EXTENSION TEST-PREFIX)" nil nil)(autoload 'projectile-related-files-fn-test-with-suffix "projectile" "Generate a related-files-fn which relates tests and impl for files with EXTENSION based on TEST-SUFFIX.

(fn EXTENSION TEST-SUFFIX)" nil nil)(autoload 'projectile-project-info "projectile" "Display info for current project." t nil)(autoload 'projectile-find-implementation-or-test-other-window "projectile" "Open matching implementation or test file in other window." t nil)(autoload 'projectile-find-implementation-or-test-other-frame "projectile" "Open matching implementation or test file in other frame." t nil)(autoload 'projectile-toggle-between-implementation-and-test "projectile" "Toggle between an implementation file and its test file." t nil)(autoload 'projectile-grep "projectile" "Perform rgrep in the project.

With a prefix ARG asks for files (globbing-aware) which to grep in.
With prefix ARG of `-' (such as `M--'), default the files (without prompt),
to `projectile-grep-default-files'.

With REGEXP given, don't query the user for a regexp.

(fn &optional REGEXP ARG)" t nil)(autoload 'projectile-ag "projectile" "Run an ag search with SEARCH-TERM in the project.

With an optional prefix argument ARG SEARCH-TERM is interpreted as a
regular expression.

(fn SEARCH-TERM &optional ARG)" t nil)(autoload 'projectile-ripgrep "projectile" "Run a ripgrep (rg) search with `SEARCH-TERM' at current project root.

With an optional prefix argument ARG SEARCH-TERM is interpreted as a
regular expression.

This command depends on of the Emacs packages ripgrep or rg being
installed to work.

(fn SEARCH-TERM &optional ARG)" t nil)(autoload 'projectile-regenerate-tags "projectile" "Regenerate the project's [e|g]tags." t nil)(autoload 'projectile-find-tag "projectile" "Find tag in project." t nil)(autoload 'projectile-run-command-in-root "projectile" "Invoke `execute-extended-command' in the project's root." t nil)(autoload 'projectile-run-shell-command-in-root "projectile" "Invoke `shell-command' in the project's root.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER)" t nil)(autoload 'projectile-run-async-shell-command-in-root "projectile" "Invoke `async-shell-command' in the project's root.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER)" t nil)(autoload 'projectile-run-gdb "projectile" "Invoke `gdb' in the project's root." t nil)(autoload 'projectile-run-shell "projectile" "Invoke `shell' in the project's root.

Switch to the project specific shell buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t nil)(autoload 'projectile-run-eshell "projectile" "Invoke `eshell' in the project's root.

Switch to the project specific eshell buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t nil)(autoload 'projectile-run-ielm "projectile" "Invoke `ielm' in the project's root.

Switch to the project specific ielm buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t nil)(autoload 'projectile-run-term "projectile" "Invoke `term' in the project's root.

Switch to the project specific term buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t nil)(autoload 'projectile-run-vterm "projectile" "Invoke `vterm' in the project's root.

Switch to the project specific term buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t nil)(autoload 'projectile-replace "projectile" "Replace literal string in project using non-regexp `tags-query-replace'.

With a prefix argument ARG prompts you for a directory on which
to run the replacement.

(fn &optional ARG)" t nil)(autoload 'projectile-replace-regexp "projectile" "Replace a regexp in the project using `tags-query-replace'.

With a prefix argument ARG prompts you for a directory on which
to run the replacement.

(fn &optional ARG)" t nil)(autoload 'projectile-kill-buffers "projectile" "Kill project buffers.

The buffer are killed according to the value of
`projectile-kill-buffers-filter'." t nil)(autoload 'projectile-save-project-buffers "projectile" "Save all project buffers." t nil)(autoload 'projectile-dired "projectile" "Open `dired' at the root of the project." t nil)(autoload 'projectile-dired-other-window "projectile" "Open `dired'  at the root of the project in another window." t nil)(autoload 'projectile-dired-other-frame "projectile" "Open `dired' at the root of the project in another frame." t nil)(autoload 'projectile-vc "projectile" "Open `vc-dir' at the root of the project.

For git projects `magit-status-internal' is used if available.
For hg projects `monky-status' is used if available.

If PROJECT-ROOT is given, it is opened instead of the project
root directory of the current buffer file.  If interactively
called with a prefix argument, the user is prompted for a project
directory to open.

(fn &optional PROJECT-ROOT)" t nil)(autoload 'projectile-recentf "projectile" "Show a list of recently visited files in a project." t nil)(autoload 'projectile-configure-project "projectile" "Run project configure command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-compile-project "projectile" "Run project compilation command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-test-project "projectile" "Run project test command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-install-project "projectile" "Run project install command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-package-project "projectile" "Run project package command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-run-project "projectile" "Run project run command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-repeat-last-command "projectile" "Run last projectile external command.

External commands are: `projectile-configure-project',
`projectile-compile-project', `projectile-test-project',
`projectile-install-project', `projectile-package-project',
and `projectile-run-project'.

If the prefix argument SHOW_PROMPT is non nil, the command can be edited.

(fn SHOW-PROMPT)" t nil)(autoload 'projectile-switch-project "projectile" "Switch to a project we have visited before.
Invokes the command referenced by `projectile-switch-project-action' on switch.
With a prefix ARG invokes `projectile-commander' instead of
`projectile-switch-project-action.'

(fn &optional ARG)" t nil)(autoload 'projectile-switch-open-project "projectile" "Switch to a project we have currently opened.
Invokes the command referenced by `projectile-switch-project-action' on switch.
With a prefix ARG invokes `projectile-commander' instead of
`projectile-switch-project-action.'

(fn &optional ARG)" t nil)(autoload 'projectile-find-file-in-directory "projectile" "Jump to a file in a (maybe regular) DIRECTORY.

This command will first prompt for the directory the file is in.

(fn &optional DIRECTORY)" t nil)(autoload 'projectile-find-file-in-known-projects "projectile" "Jump to a file in any of the known projects." t nil)(autoload 'projectile-cleanup-known-projects "projectile" "Remove known projects that don't exist anymore." t nil)(autoload 'projectile-clear-known-projects "projectile" "Clear both `projectile-known-projects' and `projectile-known-projects-file'." t nil)(autoload 'projectile-reset-known-projects "projectile" "Clear known projects and rediscover." t nil)(autoload 'projectile-remove-known-project "projectile" "Remove PROJECT from the list of known projects.

(fn &optional PROJECT)" t nil)(autoload 'projectile-remove-current-project-from-known-projects "projectile" "Remove the current project from the list of known projects." t nil)(autoload 'projectile-add-known-project "projectile" "Add PROJECT-ROOT to the list of known projects.

(fn PROJECT-ROOT)" t nil)(autoload 'projectile-ibuffer "projectile" "Open an IBuffer window showing all buffers in the current project.

Let user choose another project when PROMPT-FOR-PROJECT is supplied.

(fn PROMPT-FOR-PROJECT)" t nil)(autoload 'projectile-commander "projectile" "Execute a Projectile command with a single letter.
The user is prompted for a single character indicating the action to invoke.
The `?' character describes then
available actions.

See `def-projectile-commander-method' for defining new methods." t nil)(autoload 'projectile-browse-dirty-projects "projectile" "Browse dirty version controlled projects.

With a prefix argument, or if CACHED is non-nil, try to use the cached
dirty project list.

(fn &optional CACHED)" t nil)(autoload 'projectile-edit-dir-locals "projectile" "Edit or create a .dir-locals.el file of the project." t nil)(defvar projectile-mode nil "Non-nil if Projectile mode is enabled.
See the `projectile-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `projectile-mode'.")(autoload 'projectile-mode "projectile" "Minor mode to assist project management and navigation.

When called interactively, toggle `projectile-mode'.  With prefix
ARG, enable `projectile-mode' if ARG is positive, otherwise disable
it.

When called from Lisp, enable `projectile-mode' if ARG is omitted,
nil or positive.  If ARG is `toggle', toggle `projectile-mode'.
Otherwise behave as if called interactively.

\\{projectile-mode-map}

(fn &optional ARG)" t nil)(define-obsolete-function-alias 'projectile-global-mode 'projectile-mode "1.0")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "projectile" '("??" "compilation-find-file-projectile-find-compilation-buffer" "def-projectile-commander-method" "delete-file-projectile-remove-from-cache" "projectile-")))(autoload 'project-current "project" "Return the project instance in DIRECTORY, defaulting to `default-directory'.

When no project is found in that directory, the result depends on
the value of MAYBE-PROMPT: if it is nil or omitted, return nil,
else ask the user for a directory in which to look for the
project, and if no project is found there, return a \"transient\"
project instance.

The \"transient\" project instance is a special kind of value
which denotes a project rooted in that directory and includes all
the files under the directory except for those that should be
ignored (per `project-ignores').

See the doc string of `project-find-functions' for the general form
of the project instance object.

(fn &optional MAYBE-PROMPT DIRECTORY)" nil nil)(defvar project-prefix-map (let ((map (make-sparse-keymap))) (define-key map "!" 'project-shell-command) (define-key map "&" 'project-async-shell-command) (define-key map "f" 'project-find-file) (define-key map "F" 'project-or-external-find-file) (define-key map "b" 'project-switch-to-buffer) (define-key map "s" 'project-shell) (define-key map "d" 'project-find-dir) (define-key map "D" 'project-dired) (define-key map "v" 'project-vc-dir) (define-key map "c" 'project-compile) (define-key map "e" 'project-eshell) (define-key map "k" 'project-kill-buffers) (define-key map "p" 'project-switch-project) (define-key map "g" 'project-find-regexp) (define-key map "G" 'project-or-external-find-regexp) (define-key map "r" 'project-query-replace-regexp) (define-key map "x" 'project-execute-extended-command) map) "Keymap for project commands.")(define-key ctl-x-map "p" project-prefix-map)(autoload 'project-other-window-command "project" "Run project command, displaying resultant buffer in another window.

The following commands are available:

\\{project-prefix-map}
\\{project-other-window-map}" t nil)(define-key ctl-x-4-map "p" #'project-other-window-command)(autoload 'project-other-frame-command "project" "Run project command, displaying resultant buffer in another frame.

The following commands are available:

\\{project-prefix-map}
\\{project-other-frame-map}" t nil)(define-key ctl-x-5-map "p" #'project-other-frame-command)(autoload 'project-other-tab-command "project" "Run project command, displaying resultant buffer in a new tab.

The following commands are available:

\\{project-prefix-map}" t nil)(when (bound-and-true-p tab-prefix-map) (define-key tab-prefix-map "p" #'project-other-tab-command))(autoload 'project-find-regexp "project" "Find all matches for REGEXP in the current project's roots.
With \\[universal-argument] prefix, you can specify the directory
to search in, and the file name pattern to search for.  The
pattern may use abbreviations defined in `grep-files-aliases',
e.g. entering `ch' is equivalent to `*.[ch]'.  As whitespace
triggers completion when entering a pattern, including it
requires quoting, e.g. `\\[quoted-insert]<space>'.

(fn REGEXP)" t nil)(autoload 'project-or-external-find-regexp "project" "Find all matches for REGEXP in the project roots or external roots.
With \\[universal-argument] prefix, you can specify the file name
pattern to search for.

(fn REGEXP)" t nil)(autoload 'project-find-file "project" "Visit a file (with completion) in the current project.

The filename at point (determined by `thing-at-point'), if any,
is available as part of \"future history\".

If INCLUDE-ALL is non-nil, or with prefix argument when called
interactively, include all files under the project root, except
for VCS directories listed in `vc-directory-exclusion-list'.

(fn &optional INCLUDE-ALL)" t nil)(autoload 'project-or-external-find-file "project" "Visit a file (with completion) in the current project or external roots.

The filename at point (determined by `thing-at-point'), if any,
is available as part of \"future history\".

If INCLUDE-ALL is non-nil, or with prefix argument when called
interactively, include all files under the project root, except
for VCS directories listed in `vc-directory-exclusion-list'.

(fn &optional INCLUDE-ALL)" t nil)(autoload 'project-find-dir "project" "Start Dired in a directory inside the current project." t nil)(autoload 'project-dired "project" "Start Dired in the current project's root." t nil)(autoload 'project-vc-dir "project" "Run VC-Dir in the current project's root." t nil)(autoload 'project-shell "project" "Start an inferior shell in the current project's root directory.
If a buffer already exists for running a shell in the project's root,
switch to it.  Otherwise, create a new shell buffer.
With \\[universal-argument] prefix arg, create a new inferior shell buffer even
if one already exists." t nil)(autoload 'project-eshell "project" "Start Eshell in the current project's root directory.
If a buffer already exists for running Eshell in the project's root,
switch to it.  Otherwise, create a new Eshell buffer.
With \\[universal-argument] prefix arg, create a new Eshell buffer even
if one already exists." t nil)(autoload 'project-async-shell-command "project" "Run `async-shell-command' in the current project's root directory." t nil)(function-put 'project-async-shell-command 'interactive-only 'async-shell-command)(autoload 'project-shell-command "project" "Run `shell-command' in the current project's root directory." t nil)(function-put 'project-shell-command 'interactive-only 'shell-command)(autoload 'project-search "project" "Search for REGEXP in all the files of the project.
Stops when a match is found.
To continue searching for the next match, use the
command \\[fileloop-continue].

(fn REGEXP)" t nil)(autoload 'project-query-replace-regexp "project" "Query-replace REGEXP in all the files of the project.
Stops when a match is found and prompts for whether to replace it.
If you exit the `query-replace', you can later continue the
`query-replace' loop using the command \\[fileloop-continue].

(fn FROM TO)" t nil)(autoload 'project-compile "project" "Run `compile' in the project root." t nil)(function-put 'project-compile 'interactive-only 'compile)(autoload 'project-switch-to-buffer "project" "Display buffer BUFFER-OR-NAME in the selected window.
When called interactively, prompts for a buffer belonging to the
current project.  Two buffers belong to the same project if their
project instances, as reported by `project-current' in each
buffer, are identical.

(fn BUFFER-OR-NAME)" t nil)(autoload 'project-display-buffer "project" "Display BUFFER-OR-NAME in some window, without selecting it.
When called interactively, prompts for a buffer belonging to the
current project.  Two buffers belong to the same project if their
project instances, as reported by `project-current' in each
buffer, are identical.

This function uses `display-buffer' as a subroutine, which see
for how it is determined where the buffer will be displayed.

(fn BUFFER-OR-NAME)" t nil)(autoload 'project-display-buffer-other-frame "project" "Display BUFFER-OR-NAME preferably in another frame.
When called interactively, prompts for a buffer belonging to the
current project.  Two buffers belong to the same project if their
project instances, as reported by `project-current' in each
buffer, are identical.

This function uses `display-buffer-other-frame' as a subroutine,
which see for how it is determined where the buffer will be
displayed.

(fn BUFFER-OR-NAME)" t nil)(autoload 'project-kill-buffers "project" "Kill the buffers belonging to the current project.
Two buffers belong to the same project if their project
instances, as reported by `project-current' in each buffer, are
identical.  Only the buffers that match a condition in
`project-kill-buffer-conditions' will be killed.  If NO-CONFIRM
is non-nil, the command will not ask the user for confirmation.
NO-CONFIRM is always nil when the command is invoked
interactively.

(fn &optional NO-CONFIRM)" t nil)(autoload 'project-remember-project "project" "Add project PR to the front of the project list.
Save the result in `project-list-file' if the list of projects
has changed, and NO-WRITE is nil.

(fn PR &optional NO-WRITE)" nil nil)(autoload 'project-forget-project "project" "Remove directory PROJECT-ROOT from the project list.
PROJECT-ROOT is the root directory of a known project listed in
the project list.

(fn PROJECT-ROOT)" t nil)(autoload 'project-known-project-roots "project" "Return the list of root directories of all known projects." nil nil)(autoload 'project-execute-extended-command "project" "Execute an extended command in project root." t nil)(function-put 'project-execute-extended-command 'interactive-only 'command-execute)(autoload 'project-switch-project "project" "\"Switch\" to another project by running an Emacs command.
The available commands are presented as a dispatch menu
made from `project-switch-commands'.

When called in a program, it will use the project corresponding
to directory DIR.

(fn DIR)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "project" '("project-")))(autoload 'xref-find-backend "xref" nil nil nil)(define-obsolete-function-alias 'xref-pop-marker-stack #'xref-go-back "29.1")(autoload 'xref-go-back "xref" "Go back to the previous position in xref history.
To undo, use \\[xref-go-forward]." t nil)(autoload 'xref-go-forward "xref" "Got to the point where a previous \\[xref-go-back] was invoked." t nil)(autoload 'xref-marker-stack-empty-p "xref" "Whether the xref back-history is empty." nil nil)(autoload 'xref-forward-history-empty-p "xref" "Whether the xref forward-history is empty." nil nil)(autoload 'xref-find-definitions "xref" "Find the definition of the identifier at point.
With prefix argument or when there's no identifier at point,
prompt for it.

If sufficient information is available to determine a unique
definition for IDENTIFIER, display it in the selected window.
Otherwise, display the list of the possible definitions in a
buffer where the user can select from the list.

Use \\[xref-go-back] to return back to where you invoked this command.

(fn IDENTIFIER)" t nil)(autoload 'xref-find-definitions-other-window "xref" "Like `xref-find-definitions' but switch to the other window.

(fn IDENTIFIER)" t nil)(autoload 'xref-find-definitions-other-frame "xref" "Like `xref-find-definitions' but switch to the other frame.

(fn IDENTIFIER)" t nil)(autoload 'xref-find-references "xref" "Find references to the identifier at point.
This command might prompt for the identifier as needed, perhaps
offering the symbol at point as the default.
With prefix argument, or if `xref-prompt-for-identifier' is t,
always prompt for the identifier.  If `xref-prompt-for-identifier'
is nil, prompt only if there's no usable symbol at point.

(fn IDENTIFIER)" t nil)(autoload 'xref-find-definitions-at-mouse "xref" "Find the definition of identifier at or around mouse click.
This command is intended to be bound to a mouse event.

(fn EVENT)" t nil)(autoload 'xref-find-references-at-mouse "xref" "Find references to the identifier at or around mouse click.
This command is intended to be bound to a mouse event.

(fn EVENT)" t nil)(autoload 'xref-find-apropos "xref" "Find all meaningful symbols that match PATTERN.
The argument has the same meaning as in `apropos'.
See `tags-apropos-additional-actions' for how to augment the
output of this command when the backend is etags.

(fn PATTERN)" t nil)(define-key esc-map "." #'xref-find-definitions)(define-key esc-map "," #'xref-go-back)(define-key esc-map [67108908] #'xref-go-forward)(define-key esc-map "?" #'xref-find-references)(define-key esc-map [67108910] #'xref-find-apropos)(define-key ctl-x-4-map "." #'xref-find-definitions-other-window)(define-key ctl-x-5-map "." #'xref-find-definitions-other-frame)(autoload 'xref-references-in-directory "xref" "Find all references to SYMBOL in directory DIR.
Return a list of xref values.

This function uses the Semantic Symbol Reference API, see
`semantic-symref-tool-alist' for details on which tools are used,
and when.

(fn SYMBOL DIR)" nil nil)(autoload 'xref-matches-in-directory "xref" "Find all matches for REGEXP in directory DIR.
Return a list of xref values.
Only files matching some of FILES and none of IGNORES are searched.
FILES is a string with glob patterns separated by spaces.
IGNORES is a list of glob patterns for files to ignore.

(fn REGEXP FILES DIR IGNORES)" nil nil)(autoload 'xref-matches-in-files "xref" "Find all matches for REGEXP in FILES.
Return a list of xref values.
FILES must be a list of absolute file names.

See `xref-search-program' and `xref-search-program-alist' for how
to control which program to use when looking for matches.

(fn REGEXP FILES)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xref" '("xref-")))(autoload 'general-define-key "general" "The primary key definition function provided by general.el.

Define MAPS, optionally using DEFINER, in the keymap(s) corresponding to STATES
and KEYMAPS.

MAPS consists of paired keys (vectors or strings; also see
`general-implicit-kbd') and definitions (those mentioned in `define-key''s
docstring and general.el's \"extended\" definitions). All pairs (when not
ignored) will be recorded and can be later displayed with
`general-describe-keybindings'.

If DEFINER is specified, a custom key definer will be used to bind MAPS. See
general.el's documentation/README for more information.

Unlike with normal key definitions functions, the keymaps in KEYMAPS should be
quoted (this allows using the keymap name for other purposes, e.g. deferring
keybindings if the keymap symbol is not bound, optionally inferring the
corresponding major mode for a symbol by removing \"-map\" for :which-key,
easily storing the keymap name for use with `general-describe-keybindings',
etc.). Note that general.el provides other key definer macros that do not
require quoting keymaps.

STATES corresponds to the evil state(s) to bind the keys in. Non-evil users
should not set STATES. When STATES is non-nil, `evil-define-key*' will be
used (the evil auxiliary keymaps corresponding STATES and KEYMAPS will be used);
otherwise `define-key' will be used (unless DEFINER is specified). KEYMAPS
defaults to 'global. There is also 'local, which create buffer-local
keybindings for both evil and non-evil keybindings. There are other special,
user-alterable \"shorthand\" symbols for keymaps and states (see
`general-keymap-aliases' and `general-state-aliases').

Note that STATES and KEYMAPS can either be lists or single symbols. If any
keymap does not exist, those keybindings will be deferred until the keymap does
exist, so using `eval-after-load' is not necessary with this function.

PREFIX corresponds to a key to prefix keys in MAPS with and defaults to none. To
bind/unbind a key specified with PREFIX, \"\" can be specified as a key in
MAPS (e.g. ...:prefix \"SPC\" \"\" nil... will unbind space).

The keywords in this paragraph are only useful for evil users. If
NON-NORMAL-PREFIX is specified, this prefix will be used instead of PREFIX for
states in `general-non-normal-states' (e.g. the emacs and insert states). This
argument will only have an effect if one of these states is in STATES or if
corresponding global keymap (e.g. `evil-insert-state-map') is in KEYMAPS.
Alternatively, GLOBAL-PREFIX can be used with PREFIX and/or NON-NORMAL-PREFIX to
bind keys in all states under the specified prefix. Like with NON-NORMAL-PREFIX,
GLOBAL-PREFIX will prevent PREFIX from applying to `general-non-normal-states'.
INFIX can be used to append a string to all of the specified prefixes. This is
potentially useful when you are using GLOBAL-PREFIX and/or NON-NORMAL-PREFIX so
that you can sandwich keys in between all the prefixes and the specified keys in
MAPS. This may be particularly useful if you are using default prefixes in a
wrapper function/macro so that you can add to them without needing to re-specify
all of them. If none of the other prefix keyword arguments are specified, INFIX
will have no effect.

If PREFIX-COMMAND or PREFIX-MAP is specified, a prefix command and/or keymap
will be created. PREFIX-NAME can be additionally specified to set the keymap
menu name/prompt. If PREFIX-COMMAND is specified, `define-prefix-command' will
be used. Otherwise, only a prefix keymap will be created. Previously created
prefix commands/keymaps will never be redefined/cleared. All prefixes (including
the INFIX key, if specified) will then be bound to PREFIX-COMMAND or PREFIX-MAP.
If the user did not specify any PREFIX or manually specify any KEYMAPS, general
will bind all MAPS in the prefix keymap corresponding to either PREFIX-MAP or
PREFIX-COMMAND instead of in the default keymap.

PREDICATE corresponds to a predicate to check to determine whether a definition
should be active (e.g. \":predicate '(eobp)\"). Definitions created with a
predicate will only be active when the predicate is true. When the predicate is
false, key lookup will continue to search for a match in lower-precedence
keymaps.

In addition to the normal definitions supported by `define-key', general.el also
provides \"extended\" definitions, which are plists containing the normal
definition as well as other keywords. For example, PREDICATE can be specified
globally or locally in an extended definition. New global (~general-define-key~)
and local (extended definition) keywords can be added by the user. See
`general-extended-def-keywords' and general.el's documentation/README for more
information.

PACKAGE is the global version of the extended definition keyword that specifies
the package a keymap is defined in (used for \"autoloading\" keymaps)

PROPERTIES, REPEAT, and JUMP are the global versions of the extended definition
keywords used for adding evil command properties to commands.

MAJOR-MODES, WK-MATCH-KEYS, WK-MATCH-BINDINGS, and WK-FULL-KEYS are the
corresponding global versions of which-key extended definition keywords. They
will only have an effect for extended definitions that specify :which-key or
:wk. See the section on extended definitions in the general.el
documentation/README for more information.

LISPY-PLIST and WORF-PLIST are the global versions of extended definition
keywords that are used for each corresponding custom DEFINER.

(fn &rest MAPS &key DEFINER (STATES general-default-states) (KEYMAPS general-default-keymaps KEYMAPS-SPECIFIED-P) (PREFIX general-default-prefix) (NON-NORMAL-PREFIX general-default-non-normal-prefix) (GLOBAL-PREFIX general-default-global-prefix) INFIX PREFIX-COMMAND PREFIX-MAP PREFIX-NAME PREDICATE PACKAGE PROPERTIES REPEAT JUMP MAJOR-MODES (WK-MATCH-KEYS t) (WK-MATCH-BINDING t) (WK-FULL-KEYS t) LISPY-PLIST WORF-PLIST &allow-other-keys)" nil nil)(autoload 'general-emacs-define-key "general" "A wrapper for `general-define-key' that is similar to `define-key'.
It has a positional argument for KEYMAPS (that will not be overridden by a later
:keymaps argument). Besides this, it acts the same as `general-define-key', and
ARGS can contain keyword arguments in addition to keybindings. This can
basically act as a drop-in replacement for `define-key', and unlike with
`general-define-key', KEYMAPS does not need to be quoted.

(fn KEYMAPS &rest ARGS)" nil t)(function-put 'general-emacs-define-key 'lisp-indent-function '1)(autoload 'general-evil-define-key "general" "A wrapper for `general-define-key' that is similar to `evil-define-key'.
It has positional arguments for STATES and KEYMAPS (that will not be overridden
by a later :keymaps or :states argument). Besides this, it acts the same as
`general-define-key', and ARGS can contain keyword arguments in addition to
keybindings. This can basically act as a drop-in replacement for
`evil-define-key', and unlike with `general-define-key', KEYMAPS does not need
to be quoted.

(fn STATES KEYMAPS &rest ARGS)" nil t)(function-put 'general-evil-define-key 'lisp-indent-function '2)(autoload 'general-def "general" "General definer that takes a variable number of positional arguments in ARGS.
This macro will act as `general-define-key', `general-emacs-define-key', or
`general-evil-define-key' based on how many of the initial arguments do not
correspond to keybindings. All quoted and non-quoted lists and symbols before
the first string, vector, or keyword are considered to be positional arguments.
This means that you cannot use a function or variable for a key that starts
immediately after the positional arguments. If you need to do this, you should
use one of the definers that `general-def' dispatches to or explicitly separate
the positional arguments from the maps with a bogus keyword pair like
\":start-maps t\"

(fn &rest ARGS)" nil t)(function-put 'general-def 'lisp-indent-function 'defun)(autoload 'general-create-definer "general" "A helper macro to create wrappers for `general-def'.
This can be used to create key definers that will use a certain keymap, evil
state, prefix key, etc. by default. NAME is the wrapper name and DEFAULTS are
the default arguments. WRAPPING can also be optionally specified to use a
different definer than `general-def'. It should not be quoted.

(fn NAME &rest DEFAULTS &key WRAPPING &allow-other-keys)" nil t)(function-put 'general-create-definer 'lisp-indent-function 'defun)(autoload 'general-defs "general" "A wrapper that splits into multiple `general-def's.
Each consecutive grouping of positional argument followed by keyword/argument
pairs (having only one or the other is fine) marks the start of a new section.
Each section corresponds to one use of `general-def'. This means that settings
only apply to the keybindings that directly follow.

Since positional arguments can appear at any point, unqouted symbols are always
considered to be positional arguments (e.g. a keymap). This means that variables
can never be used for keys with `general-defs'. Variables can still be used for
definitions or as arguments to keywords.

(fn &rest ARGS)" nil t)(function-put 'general-defs 'lisp-indent-function 'defun)(autoload 'general-unbind "general" "A wrapper for `general-def' to unbind multiple keys simultaneously.
Insert after all keys in ARGS before passing ARGS to `general-def.' \":with
 #'func\" can optionally specified to use a custom function instead (e.g.
 `ignore').

(fn &rest ARGS)" nil t)(function-put 'general-unbind 'lisp-indent-function 'defun)(autoload 'general-describe-keybindings "general" "Show all keys that have been bound with general in an org buffer.
Any local keybindings will be shown first followed by global keybindings.
With a non-nil prefix ARG only show bindings in active maps.

(fn &optional ARG)" t nil)(autoload 'general-key "general" "Act as KEY's definition in the current context.
This uses an extended menu item's capability of dynamically computing a
definition. It is recommended over `general-simulate-key' wherever possible. See
the docstring of `general-simulate-key' and the readme for information about the
benefits and downsides of `general-key'.

KEY should be a string given in `kbd' notation and should correspond to a single
definition (as opposed to a sequence of commands). When STATE is specified, look
up KEY with STATE as the current evil state. When specified, DOCSTRING will be
the menu item's name/description.

Let can be used to bind variables around key lookup. For example:
(general-key \"some key\"
  :let ((some-var some-val)))

SETUP and TEARDOWN can be used to run certain functions before and after key
lookup. For example, something similar to using :state 'emacs would be:
(general-key \"some key\"
  :setup (evil-local-mode -1)
  :teardown (evil-local-mode))

ACCEPT-DEFAULT, NO-REMAP, and POSITION are passed to `key-binding'.

(fn KEY &key STATE DOCSTRING LET SETUP TEARDOWN ACCEPT-DEFAULT NO-REMAP POSITION)" nil t)(function-put 'general-key 'lisp-indent-function '1)(autoload 'general-simulate-keys "general" "Deprecated. Please use `general-simulate-key' instead.

(fn KEYS &optional STATE KEYMAP (LOOKUP t) DOCSTRING NAME)" nil t)(autoload 'general-simulate-key "general" "Create and return a command that simulates KEYS in STATE and KEYMAP.

`general-key' should be prefered over this whenever possible as it is simpler
and has saner functionality in many cases because it does not rely on
`unread-command-events' (e.g. \"C-h k\" will show the docstring of the command
to be simulated ; see the readme for more information). The main downsides of
`general-key' are that it cannot simulate a command followed by keys or
subsequent commands, and which-key does not currently work well with it when
simulating a prefix key/incomplete key sequence.

KEYS should be a string given in `kbd' notation. It can also be a list of a
single command followed by a string of the key(s) to simulate after calling that
command. STATE should only be specified by evil users and should be a quoted
evil state. KEYMAP should not be quoted. Both STATE and KEYMAP aliases are
supported (but they have to be set when the macro is expanded). When neither
STATE or KEYMAP are specified, the key(s) will be simulated in the current
context.

If NAME is specified, it will replace the automatically generated function name.
NAME should not be quoted. If DOCSTRING is specified, it will replace the
automatically generated docstring.

Normally the generated function will look up KEY in the correct context to try
to match a command. To prevent this lookup, LOOKUP can be specified as nil.
Generally, you will want to keep LOOKUP non-nil because this will allow checking
the evil repeat property of matched commands to determine whether or not they
should be recorded. See the docstring for `general--simulate-keys' for more
information about LOOKUP.

When a WHICH-KEY description is specified, it will replace the command name in
the which-key popup.

When a command name is specified and that command has been remapped (i.e. [remap
command] is currently bound), the remapped version will be used instead of the
original command unless REMAP is specified as nil (it is true by default).

The advantages of this over a keyboard macro are as follows:
- Prefix arguments are supported
- The user can control the context in which the keys are simulated
- The user can simulate both a named command and keys
- The user can simulate an incomplete key sequence (e.g. for a keymap)

(fn KEYS &key STATE KEYMAP NAME DOCSTRING (LOOKUP t) WHICH-KEY (REMAP t))" nil t)(function-put 'general-simulate-key 'lisp-indent-function 'defun)(autoload 'general-key-dispatch "general" "Create and return a command that runs FALLBACK-COMMAND or a command in MAPS.
MAPS consists of <key> <command> pairs. If a key in MAPS is matched, the
corresponding command will be run. Otherwise FALLBACK-COMMAND will be run with
the unmatched keys. So, for example, if \"ab\" was pressed, and \"ab\" is not
one of the key sequences from MAPS, the FALLBACK-COMMAND will be run followed by
the simulated keypresses of \"ab\". Prefix arguments will still work regardless
of which command is run. This is useful for binding under non-prefix keys. For
example, this can be used to redefine a sequence like \"cw\" or \"cow\" in evil
but still have \"c\" work as `evil-change'. If TIMEOUT is specified,
FALLBACK-COMMAND will also be run in the case that the user does not press the
next key within the TIMEOUT (e.g. 0.5).

NAME and DOCSTRING are optional keyword arguments. They can be used to replace
the automatically generated name and docstring for the created function. By
default, `cl-gensym' is used to prevent name clashes (e.g. allows the user to
create multiple different commands using `self-insert-command' as the
FALLBACK-COMMAND without explicitly specifying NAME to manually prevent
clashes).

When INHERIT-KEYMAP is specified, all the keybindings from that keymap will be
inherited in MAPS.

When a WHICH-KEY description is specified, it will replace the command name in
the which-key popup.

When command to be executed has been remapped (i.e. [remap command] is currently
bound), the remapped version will be used instead of the original command unless
REMAP is specified as nil (it is true by default).

(fn FALLBACK-COMMAND &rest MAPS &key TIMEOUT INHERIT-KEYMAP NAME DOCSTRING WHICH-KEY (REMAP t) &allow-other-keys)" nil t)(function-put 'general-key-dispatch 'lisp-indent-function '1)(autoload 'general-predicate-dispatch "general" "

(fn FALLBACK-DEF &rest DEFS &key DOCSTRING &allow-other-keys)" nil t)(function-put 'general-predicate-dispatch 'lisp-indent-function '1)(autoload 'general-translate-key "general" "Translate keys in the keymap(s) corresponding to STATES and KEYMAPS.
STATES should be the name of an evil state, a list of states, or nil. KEYMAPS
should be a symbol corresponding to the keymap to make the translations in or a
list of keymap names. Keymap and state aliases are supported (as well as 'local
and 'global for KEYMAPS).

MAPS corresponds to a list of translations (key replacement pairs). For example,
specifying \"a\" \"b\" will bind \"a\" to \"b\"'s definition in the keymap.
Specifying nil as a replacement will unbind a key.

If DESTRUCTIVE is non-nil, the keymap will be destructively altered without
creating a backup. If DESTRUCTIVE is nil, store a backup of the keymap on the
initial invocation, and for future invocations always look up keys in the
original/backup keymap. On the other hand, if DESTRUCTIVE is non-nil, calling
this function multiple times with \"a\" \"b\" \"b\" \"a\", for example, would
continue to swap and unswap the definitions of these keys. This means that when
DESTRUCTIVE is non-nil, all related swaps/cycles should be done in the same
invocation.

If both MAPS and DESCTRUCTIVE are nil, only create the backup keymap.

(fn STATES KEYMAPS &rest MAPS &key DESTRUCTIVE &allow-other-keys)" nil nil)(function-put 'general-translate-key 'lisp-indent-function 'defun)(autoload 'general-swap-key "general" "Wrapper around `general-translate-key' for swapping keys.
STATES, KEYMAPS, and ARGS are passed to `general-translate-key'. ARGS should
consist of key swaps (e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\" \"a\"
with `general-translate-key') and optionally keyword arguments for
`general-translate-key'.

(fn STATES KEYMAPS &rest ARGS)" nil t)(function-put 'general-swap-key 'lisp-indent-function 'defun)(autoload 'general-auto-unbind-keys "general" "Advise `define-key' to automatically unbind keys when necessary.
This will prevent errors when a sub-sequence of a key is already bound (e.g. the
user attempts to bind \"SPC a\" when \"SPC\" is bound, resulting in a \"Key
sequnce starts with non-prefix key\" error). When UNDO is non-nil, remove
advice.

(fn &optional UNDO)" nil nil)(autoload 'general-add-hook "general" "A drop-in replacement for `add-hook'.
Unlike `add-hook', HOOKS and FUNCTIONS can be single items or lists. APPEND and
LOCAL are passed directly to `add-hook'. When TRANSIENT is non-nil, each
function will remove itself from the hook it is in after it is run once. If
TRANSIENT is a function, call it on the return value in order to determine
whether to remove a function from the hook. For example, if TRANSIENT is
#'identity, remove each function only if it returns non-nil. TRANSIENT could
alternatively check something external and ignore the function's return value.

(fn HOOKS FUNCTIONS &optional APPEND LOCAL TRANSIENT)" nil nil)(autoload 'general-remove-hook "general" "A drop-in replacement for `remove-hook'.
Unlike `remove-hook', HOOKS and FUNCTIONS can be single items or lists. LOCAL is
passed directly to `remove-hook'.

(fn HOOKS FUNCTIONS &optional LOCAL)" nil nil)(autoload 'general-advice-add "general" "A drop-in replacement for `advice-add'.
SYMBOLS, WHERE, FUNCTIONS, and PROPS correspond to the arguments for
`advice-add'. Unlike `advice-add', SYMBOLS and FUNCTIONS can be single items or
lists. When TRANSIENT is non-nil, each function will remove itself as advice
after it is run once. If TRANSIENT is a function, call it on the return value in
order to determine whether to remove a function as advice. For example, if
TRANSIENT is #'identity, remove each function only if it returns non-nil.
TRANSIENT could alternatively check something external and ignore the function's
return value.

(fn SYMBOLS WHERE FUNCTIONS &optional PROPS TRANSIENT)" nil nil)(autoload 'general-add-advice "general")(autoload 'general-advice-remove "general" "A drop-in replacement for `advice-remove'.
Unlike `advice-remove', SYMBOLS and FUNCTIONS can be single items or lists.

(fn SYMBOLS FUNCTIONS)" nil nil)(autoload 'general-remove-advice "general")(autoload 'general-evil-setup "general" "Set up some basic equivalents for vim mapping functions.
This creates global key definition functions for the evil states.
Specifying SHORT-NAMES as non-nil will create non-prefixed function
aliases such as `nmap' for `general-nmap'.

(fn &optional SHORT-NAMES _)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "general" '("general-")))(defvar which-key-mode nil "Non-nil if Which-Key mode is enabled.
See the `which-key-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `which-key-mode'.")(autoload 'which-key-mode "which-key" "Toggle which-key-mode.

If called interactively, enable Which-Key mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'which-key-setup-side-window-right "which-key" "Apply suggested settings for side-window that opens on right." t nil)(autoload 'which-key-setup-side-window-right-bottom "which-key" "Apply suggested settings for side-window that opens on right
if there is space and the bottom otherwise." t nil)(autoload 'which-key-setup-side-window-bottom "which-key" "Apply suggested settings for side-window that opens on bottom." t nil)(autoload 'which-key-setup-minibuffer "which-key" "Apply suggested settings for minibuffer.
Do not use this setup if you use the paging commands. Instead use
`which-key-setup-side-window-bottom', which is nearly identical
but more functional." t nil)(autoload 'which-key-add-keymap-based-replacements "which-key" "Replace the description of KEY using REPLACEMENT in KEYMAP.
KEY should take a format suitable for use in `kbd'. REPLACEMENT
should be a cons cell of the form (STRING . COMMAND) for each
REPLACEMENT, where STRING is the replacement string and COMMAND
is a symbol corresponding to the intended command to be
replaced. COMMAND can be nil if the binding corresponds to a key
prefix. An example is

(which-key-add-keymap-based-replacements global-map
  \"C-x w\" '(\"Save as\" . write-file)).

For backwards compatibility, REPLACEMENT can also be a string,
but the above format is preferred, and the option to use a string
for REPLACEMENT will eventually be removed.

(fn KEYMAP KEY REPLACEMENT &rest MORE)" nil nil)(autoload 'which-key-add-key-based-replacements "which-key" "Replace the description of KEY-SEQUENCE with REPLACEMENT.
KEY-SEQUENCE is a string suitable for use in `kbd'. REPLACEMENT
may either be a string, as in

(which-key-add-key-based-replacements \"C-x 1\" \"maximize\")

a cons of two strings as in

(which-key-add-key-based-replacements \"C-x 8\"
                                        '(\"unicode\" . \"Unicode keys\"))

or a function that takes a (KEY . BINDING) cons and returns a
replacement.

In the second case, the second string is used to provide a longer
name for the keys under a prefix.

MORE allows you to specifcy additional KEY REPLACEMENT pairs.  All
replacements are added to `which-key-replacement-alist'.

(fn KEY-SEQUENCE REPLACEMENT &rest MORE)" nil nil)(autoload 'which-key-add-major-mode-key-based-replacements "which-key" "Functions like `which-key-add-key-based-replacements'.
The difference is that MODE specifies the `major-mode' that must
be active for KEY-SEQUENCE and REPLACEMENT (MORE contains
addition KEY-SEQUENCE REPLACEMENT pairs) to apply.

(fn MODE KEY-SEQUENCE REPLACEMENT &rest MORE)" nil nil)(autoload 'which-key-reload-key-sequence "which-key" "Simulate entering the key sequence KEY-SEQ.
KEY-SEQ should be a list of events as produced by
`listify-key-sequence'. If nil, KEY-SEQ defaults to
`which-key--current-key-list'. Any prefix arguments that were
used are reapplied to the new key sequence.

(fn &optional KEY-SEQ)" nil nil)(autoload 'which-key-show-standard-help "which-key" "Call the command in `which-key--prefix-help-cmd-backup'.
Usually this is `describe-prefix-bindings'.

(fn &optional _)" t nil)(autoload 'which-key-show-next-page-no-cycle "which-key" "Show next page of keys unless on the last page, in which case
call `which-key-show-standard-help'." t nil)(autoload 'which-key-show-previous-page-no-cycle "which-key" "Show previous page of keys unless on the first page, in which
case do nothing." t nil)(autoload 'which-key-show-next-page-cycle "which-key" "Show the next page of keys, cycling from end to beginning
after last page.

(fn &optional _)" t nil)(autoload 'which-key-show-previous-page-cycle "which-key" "Show the previous page of keys, cycling from beginning to end
after first page.

(fn &optional _)" t nil)(autoload 'which-key-show-top-level "which-key" "Show top-level bindings.

(fn &optional _)" t nil)(autoload 'which-key-show-major-mode "which-key" "Show top-level bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. 

(fn &optional ALL)" t nil)(autoload 'which-key-show-full-major-mode "which-key" "Show all bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. " t nil)(autoload 'which-key-dump-bindings "which-key" "Dump bindings from PREFIX into buffer named BUFFER-NAME.

PREFIX should be a string suitable for `kbd'.

(fn PREFIX BUFFER-NAME)" t nil)(autoload 'which-key-undo-key "which-key" "Undo last keypress and force which-key update.

(fn &optional _)" t nil)(autoload 'which-key-C-h-dispatch "which-key" "Dispatch C-h commands by looking up key in
`which-key-C-h-map'. This command is always accessible (from any
prefix) if `which-key-use-C-h-commands' is non nil." t nil)(autoload 'which-key-show-keymap "which-key" "Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

If NO-PAGING is non-nil, which-key will not intercept subsequent
keypresses for the paging functionality.

(fn KEYMAP &optional NO-PAGING)" t nil)(autoload 'which-key-show-full-keymap "which-key" "Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

(fn KEYMAP)" t nil)(autoload 'which-key-show-minor-mode-keymap "which-key" "Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'.

(fn &optional ALL)" t nil)(autoload 'which-key-show-full-minor-mode-keymap "which-key" "Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "which-key" '("evil-state" "which-key-")))(autoload 'company-mode "company" "\"complete anything\"; is an in-buffer completion framework.
Completion starts automatically, depending on the values
`company-idle-delay' and `company-minimum-prefix-length'.

If called interactively, enable Company mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Completion can be controlled with the commands:
`company-complete-common', `company-complete-selection', `company-complete',
`company-select-next', `company-select-previous'.  If these commands are
called before `company-idle-delay', completion will also start.

Completions can be searched with `company-search-candidates' or
`company-filter-candidates'.  These can be used while completion is
inactive, as well.

The completion data is retrieved using `company-backends' and displayed
using `company-frontends'.  If you want to start a specific backend, call
it interactively or use `company-begin-backend'.

By default, the completions list is sorted alphabetically, unless the
backend chooses otherwise, or `company-transformers' changes it later.

regular keymap (`company-mode-map'):

\\{company-mode-map}
keymap during active completions (`company-active-map'):

\\{company-active-map}

(fn &optional ARG)" t nil)(put 'global-company-mode 'globalized-minor-mode t)(defvar global-company-mode nil "Non-nil if Global Company mode is enabled.
See the `global-company-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-company-mode'.")(autoload 'global-company-mode "company" "Toggle Company mode in all buffers.
With prefix ARG, enable Global Company mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Company mode is enabled in all buffers where
`company-mode-on' would do it.
See `company-mode' for more information on Company mode.

(fn &optional ARG)" t nil)(autoload 'company-manual-begin "company" nil t nil)(autoload 'company-complete "company" "Insert the common part of all candidates or the current selection.
The first time this is called, the common part is inserted, the second
time, or when the selection has been changed, the selected candidate is
inserted." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company" '("company-")))(autoload 'company-abbrev "company-abbrev" "`company-mode' completion backend for abbrev.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-abbrev" '("company-abbrev-insert")))(autoload 'company-bbdb "company-bbdb" "`company-mode' completion backend for BBDB.

(fn COMMAND &optional ARG &rest IGNORE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-bbdb" '("company-bbdb-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-capf" '("company-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-clang" '("company-clang")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-cmake" '("company-cmake")))(autoload 'company-css "company-css" "`company-mode' completion backend for `css-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-css" '("company-css-")))(autoload 'company-dabbrev "company-dabbrev" "dabbrev-like `company-mode' completion backend.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-dabbrev" '("company-dabbrev-")))(autoload 'company-dabbrev-code "company-dabbrev-code" "dabbrev-like `company-mode' backend for code.
The backend looks for all symbols in the current buffer that aren't in
comments or strings.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-dabbrev-code" '("company-dabbrev-code-")))(autoload 'company-elisp "company-elisp" "`company-mode' completion backend for Emacs Lisp.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-elisp" '("company-elisp-")))(autoload 'company-etags "company-etags" "`company-mode' completion backend for etags.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-etags" '("company-etags-")))(autoload 'company-files "company-files" "`company-mode' completion backend existing file names.
Completions works for proper absolute and relative files paths.
File paths with spaces are only supported inside strings.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-files" '("company-file")))(autoload 'company-gtags "company-gtags" "`company-mode' completion backend for GNU Global.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-gtags" '("company-gtags-")))(autoload 'company-ispell "company-ispell" "`company-mode' completion backend using Ispell.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-ispell" '("company-ispell-")))(autoload 'company-keywords "company-keywords" "`company-mode' backend for programming language keywords.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-keywords" '("company-keywords-")))(autoload 'company-nxml "company-nxml" "`company-mode' completion backend for `nxml-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-nxml" '("company-nxml-")))(autoload 'company-oddmuse "company-oddmuse" "`company-mode' completion backend for `oddmuse-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-oddmuse" '("company-oddmuse-")))(autoload 'company-semantic "company-semantic" "`company-mode' completion backend using CEDET Semantic.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-semantic" '("company-semantic-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-template" '("company-template-")))(autoload 'company-tempo "company-tempo" "`company-mode' completion backend for tempo.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-tempo" '("company-tempo-")))(autoload 'company-tng-frontend "company-tng" "When the user changes the selection at least once, this
frontend will display the candidate in the buffer as if it's
already there and any key outside of `company-active-map' will
confirm the selection and finish the completion.

(fn COMMAND)" nil nil)(define-obsolete-function-alias 'company-tng-configure-default 'company-tng-mode "0.9.14" "Applies the default configuration to enable company-tng.")(defvar company-tng-mode nil "Non-nil if Company-Tng mode is enabled.
See the `company-tng-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `company-tng-mode'.")(autoload 'company-tng-mode "company-tng" "This minor mode enables `company-tng-frontend'.

If called interactively, enable Company-Tng mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-tng" '("company-tng-")))(autoload 'company-yasnippet "company-yasnippet" "`company-mode' backend for `yasnippet'.

This backend should be used with care, because as long as there are
snippets defined for the current major mode, this backend will always
shadow backends that come after it.  Recommended usages:

* In a buffer-local value of `company-backends', grouped with a backend or
  several that provide actual text completions.

  (add-hook \\='js-mode-hook
            (lambda ()
              (set (make-local-variable \\='company-backends)
                   \\='((company-dabbrev-code company-yasnippet)))))

* After keyword `:with', grouped with other backends.

  (push \\='(company-semantic :with company-yasnippet) company-backends)

* Not in `company-backends', just bound to a key.

  (global-set-key (kbd \"C-c y\") \\='company-yasnippet)

(fn COMMAND &optional ARG &rest IGNORE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-yasnippet" '("company-yasnippet-")))(autoload 'company-dict-refresh "company-dict" "Refresh all loaded dictionaries." t nil)(autoload 'company-dict "company-dict" "`company-mode' backend for user-provided dictionaries. Dictionary files are lazy
loaded.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-dict" '("company-dict-")))(autoload 'helm-configuration "helm" "Customize Helm." t nil)(autoload 'helm-define-multi-key "helm" "In KEYMAP, define key sequence KEY for function list FUNCTIONS.
Each function runs sequentially for each KEY press.
If DELAY is specified, switch back to initial function of FUNCTIONS list
after DELAY seconds.
The functions in FUNCTIONS list take no args.
E.g.
    (defun foo ()
      (interactive)
      (message \"Run foo\"))
    (defun bar ()
      (interactive)
      (message \"Run bar\"))
    (defun baz ()
      (interactive)
      (message \"Run baz\"))

(helm-define-multi-key global-map (kbd \"<f5> q\") '(foo bar baz) 2)

Each time \"<f5> q\" is pressed, the next function is executed.
Waiting more than 2 seconds between key presses switches back to
executing the first function on the next hit.

(fn KEYMAP KEY FUNCTIONS &optional DELAY)" nil nil)(autoload 'helm-multi-key-defun "helm" "Define NAME as a multi-key command running FUNS.
After DELAY seconds, the FUNS list is reinitialized.
See `helm-define-multi-key'.

(fn NAME DOCSTRING FUNS &optional DELAY)" nil t)(function-put 'helm-multi-key-defun 'lisp-indent-function '2)(autoload 'helm-define-key-with-subkeys "helm" "Define in MAP a KEY and SUBKEY to COMMAND.

This allows typing KEY to call COMMAND the first time and
type only SUBKEY on subsequent calls.

Arg MAP is the keymap to use, SUBKEY is the initial short
key binding to call COMMAND.

Arg OTHER-SUBKEYS is an alist specifying other short key bindings
to use once started, e.g.:

    (helm-define-key-with-subkeys global-map
       (kbd \"C-x v n\") ?n 'git-gutter:next-hunk
       '((?p . git-gutter:previous-hunk)))

In this example, `C-x v n' will run `git-gutter:next-hunk'
subsequent \"n\" will run this command again and subsequent \"p\"
will run `git-gutter:previous-hunk'.

If specified PROMPT can be displayed in minibuffer to describe
SUBKEY and OTHER-SUBKEYS.  Arg EXIT-FN specifies a function to run
on exit.

For any other key pressed, run their assigned command as defined
in MAP and then exit the loop running EXIT-FN, if specified.

If DELAY an integer is specified exit after DELAY seconds.

NOTE: SUBKEY and OTHER-SUBKEYS bindings support only char syntax
and vectors, so don't use strings to define them.

(fn MAP KEY SUBKEY COMMAND &optional OTHER-SUBKEYS PROMPT EXIT-FN DELAY)" nil nil)(function-put 'helm-define-key-with-subkeys 'lisp-indent-function '1)(autoload 'helm-debug-open-last-log "helm" "Open Helm log file or buffer of last Helm session." t nil)(autoload 'helm "helm" "Main function to execute helm sources.

PLIST is a list like

(:key1 val1 :key2 val2 ...)

 or

(&optional sources input prompt resume preselect
            buffer keymap default history allow-nest).

** Keywords

Keywords supported:

- :sources
- :input
- :prompt
- :resume
- :preselect
- :buffer
- :keymap
- :default
- :history
- :allow-nest

Extra LOCAL-VARS keywords are supported, see the \"** Other
keywords\" section below.

Basic keywords are the following:

*** :sources

One of the following:

- List of sources
- Symbol whose value is a list of sources
- Alist representing a Helm source.
  - In this case the source has no name and is referenced in
    `helm-sources' as a whole alist.

*** :input

Initial input of minibuffer (temporary value of `helm-pattern')

*** :prompt

Minibuffer prompt. Default value is `helm--prompt'.

*** :resume

If t, allow resumption of the previous session of this Helm
command, skipping initialization.

If 'noresume, this instance of `helm' cannot be resumed.

*** :preselect

Initially selected candidate (string or regexp).

*** :buffer

Buffer name for this Helm session. `helm-buffer' will take this value.

*** :keymap

[Obsolete]

Keymap used at the start of this Helm session.

It is overridden by keymaps specified in sources, and is kept
only for backward compatibility.

Keymaps should be specified in sources using the :keymap slot
instead. See `helm-source'.

This keymap is not restored by `helm-resume'.

*** :default

Default value inserted into the minibuffer with
\\<minibuffer-local-map>\\[next-history-element].

It can be a string or a list of strings, in this case
\\<minibuffer-local-map>\\[next-history-element] cycles through
the list items, starting with the first.

If nil, `thing-at-point' is used.

If `helm-maybe-use-default-as-input' is non-nil, display is
updated using this value if this value matches, otherwise it is
ignored. If :input is specified, it takes precedence on :default.

*** :history

Minibuffer input, by default, is pushed to `minibuffer-history'.

When an argument HISTORY is provided, input is pushed to
HISTORY. HISTORY should be a valid symbol.

*** :allow-nest

Allow running this Helm command in a running Helm session.

** Other keywords

Other keywords are interpreted as local variables of this Helm
session. The `helm-' prefix can be omitted. For example,

(helm :sources 'helm-source-buffers-list
       :buffer \"*helm buffers*\"
       :candidate-number-limit 10)

Starts a Helm session with the variable
`helm-candidate-number-limit' set to 10.

** Backward compatibility

For backward compatibility, positional parameters are
supported:

(helm sources input prompt resume preselect
       buffer keymap default history allow-nest)

However, the use of non-keyword args is deprecated.

(fn &key SOURCES INPUT PROMPT RESUME PRESELECT BUFFER KEYMAP DEFAULT HISTORY ALLOW-NEST OTHER-LOCAL-VARS)" nil nil)(autoload 'helm-cycle-resume "helm" "Cycle in `helm-buffers' list and resume when waiting more than 1.2s." t nil)(autoload 'helm-other-buffer "helm" "Simplified Helm interface with other `helm-buffer'.
Call `helm' only with SOURCES and BUFFER as args.

(fn SOURCES BUFFER)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm" '("helm-" "with-helm-")))(defvar helm-adaptive-mode nil "Non-nil if Helm-Adaptive mode is enabled.
See the `helm-adaptive-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-adaptive-mode'.")(autoload 'helm-adaptive-mode "helm-adaptive" "Toggle adaptive sorting in all sources.

If called interactively, enable Helm-Adaptive mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'helm-reset-adaptive-history "helm-adaptive" "Delete all `helm-adaptive-history' and his file.
Useful when you have a old or corrupted
`helm-adaptive-history-file'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-adaptive" '("helm-adapt")))(autoload 'helm-bookmarks "helm-bookmark" "Preconfigured `helm' for bookmarks." t nil)(autoload 'helm-filtered-bookmarks "helm-bookmark" "Preconfigured `helm' for bookmarks (filtered by category).
Optional source `helm-source-bookmark-addressbook' is loaded only
if external addressbook-bookmark package is installed." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-bookmark" '("bmkext-jump-" "bookmark" "helm-")))(autoload 'helm-buffers-list "helm-buffers" "Preconfigured `helm' to list buffers." t nil)(autoload 'helm-mini "helm-buffers" "Preconfigured `helm' displaying `helm-mini-default-sources'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-buffers" '("helm-")))(autoload 'helm-colors "helm-color" "Preconfigured `helm' for color." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-color" '("helm-")))(autoload 'helm-comint-prompts "helm-comint" "Pre-configured `helm' to browse the prompts of the current comint buffer." t nil)(autoload 'helm-comint-prompts-all "helm-comint" "Pre-configured `helm' to browse the prompts of all comint sessions." t nil)(autoload 'helm-comint-input-ring "helm-comint" "Preconfigured `helm' that provide completion of `comint' history." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-comint" '("helm-")))(autoload 'helm-M-x "helm-command" "Preconfigured `helm' for Emacs commands.
It is `helm' replacement of regular `M-x'
`execute-extended-command'.

Unlike regular `M-x' Emacs vanilla `execute-extended-command'
command, the prefix args if needed, can be passed AFTER starting
`helm-M-x'.  When a prefix arg is passed BEFORE starting
`helm-M-x', the first `C-u' while in `helm-M-x' session will
disable it.

You can get help on each command by persistent action.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-command" '("helm-")))(autoload 'helm-dabbrev "helm-dabbrev" "Preconfigured helm for dynamic abbreviations." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-dabbrev" '("helm-dabbrev-")))(autoload 'helm-lisp-completion-at-point "helm-elisp" "Preconfigured Helm for Lisp symbol completion at point." t nil)(autoload 'helm-complete-file-name-at-point "helm-elisp" "Preconfigured Helm to complete file name at point.

(fn &optional FORCE)" t nil)(autoload 'helm-lisp-indent "helm-elisp" nil t nil)(autoload 'helm-lisp-completion-or-file-name-at-point "helm-elisp" "Preconfigured Helm to complete Lisp symbol or filename at point.
Filename completion happens if string start after or between a
double quote." t nil)(autoload 'helm-apropos "helm-elisp" "Preconfigured Helm to describe commands, functions, variables and faces.
In non interactives calls DEFAULT argument should be provided as
a string, i.e. the `symbol-name' of any existing symbol.

(fn DEFAULT)" t nil)(autoload 'helm-manage-advice "helm-elisp" "Preconfigured `helm' to disable/enable function advices." t nil)(autoload 'helm-locate-library "helm-elisp" "Preconfigured helm to locate elisp libraries." t nil)(autoload 'helm-timers "helm-elisp" "Preconfigured `helm' for timers." t nil)(autoload 'helm-complex-command-history "helm-elisp" "Preconfigured `helm' for complex command history." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-elisp" '("helm-" "with-helm-show-completion")))(autoload 'helm-list-elisp-packages "helm-elisp-package" "Preconfigured `helm' for listing and handling Emacs packages.

(fn ARG)" t nil)(autoload 'helm-list-elisp-packages-no-fetch "helm-elisp-package" "Preconfigured Helm for Emacs packages.

Same as `helm-list-elisp-packages' but don't fetch packages on
remote.  Called with a prefix ARG always fetch packages on
remote.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-elisp-package" '("helm-")))(defvar helm-epa-mode nil "Non-nil if Helm-Epa mode is enabled.
See the `helm-epa-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-epa-mode'.")(autoload 'helm-epa-mode "helm-epa" "Enable helm completion on gpg keys in epa functions.

If called interactively, enable Helm-Epa mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'helm-epa-list-keys "helm-epa" "List all gpg keys.
This is the helm interface for `epa-list-keys'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-epa" '("helm-epa")))(autoload 'helm-esh-pcomplete "helm-eshell" "Preconfigured `helm' to provide Helm completion in Eshell." t nil)(autoload 'helm-eshell-history "helm-eshell" "Preconfigured Helm for Eshell history." t nil)(autoload 'helm-eshell-prompts "helm-eshell" "Pre-configured `helm' to browse the prompts of the current Eshell." t nil)(autoload 'helm-eshell-prompts-all "helm-eshell" "Pre-configured `helm' to browse the prompts of all Eshell sessions." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-eshell" '("helm-e")))(autoload 'helm-eval-expression "helm-eval" "Preconfigured `helm' for `helm-source-evaluation-result'.

(fn ARG)" t nil)(autoload 'helm-eval-expression-with-eldoc "helm-eval" "Preconfigured `helm' for `helm-source-evaluation-result' with `eldoc' support." t nil)(autoload 'helm-calcul-expression "helm-eval" "Preconfigured `helm' for `helm-source-calculation-result'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-eval" '("helm-")))(autoload 'helm-run-external-command "helm-external" "Preconfigured `helm' to run External PROGRAM asyncronously from Emacs.
If program is already running try to run `helm-raise-command' if
defined otherwise exit with error. You can set your own list of
commands with `helm-external-commands-list'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-external" '("helm-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-fd" '("helm-fd-")))(autoload 'helm-projects-history "helm-files" "

(fn ARG)" t nil)(autoload 'helm-browse-project "helm-files" "Preconfigured helm to browse projects.
Browse files and see status of project with its VCS.
Only HG and GIT are supported for now.
Fall back to `helm-browse-project-find-files' if current
directory is not under control of one of those VCS.
With a prefix ARG browse files recursively, with two prefix ARG
rebuild the cache.
If the current directory is found in the cache, start
`helm-browse-project-find-files' even with no prefix ARG.
NOTE: The prefix ARG have no effect on the VCS controlled
directories.

Needed dependencies for VCS:
<https://github.com/emacs-helm/helm-ls-git>
and
<https://github.com/emacs-helm/helm-ls-hg>.

(fn ARG)" t nil)(autoload 'helm-find-files "helm-files" "Preconfigured `helm' for helm implementation of `find-file'.
Called with a prefix arg show history if some.
Don't call it from programs, use `helm-find-files-1' instead.
This is the starting point for nearly all actions you can do on
files.

(fn ARG)" t nil)(autoload 'helm-delete-tramp-connection "helm-files" "Allow deleting tramp connection or marked tramp connections at once.

This replace `tramp-cleanup-connection' which is partially broken
in Emacs < to 25.1.50.1 (See Emacs bug http://debbugs.gnu.org/cgi/bugreport.cgi?bug=24432).

It allows additionally to delete more than one connection at
once." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-files" '("eshell-command-aliases-list" "helm-")))(autoload 'helm-find "helm-find" "Preconfigured `helm' for the find shell command.

Recursively find files whose names are matched by all specified
globbing PATTERNs under the current directory using the external
program specified in `find-program' (usually \"find\").  Every
input PATTERN is silently wrapped into two stars: *PATTERN*.

With prefix argument, prompt for a directory to search.

When user option `helm-findutils-search-full-path' is non-nil,
match against complete paths, otherwise, against file names
without directory part.

The (possibly empty) list of globbing PATTERNs can be followed by
the separator \"*\" plus any number of additional arguments that
are passed to \"find\" literally.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-find" '("helm-")))(autoload 'helm-select-xfont "helm-font" "Preconfigured `helm' to select Xfont." t nil)(autoload 'helm-ucs "helm-font" "Preconfigured `helm' for `ucs-names'.

Called with a prefix arg force reloading cache.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-font" '("helm-")))(autoload 'helm-for-files "helm-for-files" "Preconfigured `helm' for opening files.
Run all sources defined in `helm-for-files-preferred-list'." t nil)(autoload 'helm-multi-files "helm-for-files" "Preconfigured helm like `helm-for-files' but running locate only on demand.

Allow toggling back and forth from locate to others sources with
`helm-multi-files-toggle-locate-binding' key.
This avoids launching locate needlessly when what you are
searching for is already found." t nil)(autoload 'helm-recentf "helm-for-files" "Preconfigured `helm' for `recentf'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-for-files" '("helm-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-global-bindings" '("helm-command-")))(autoload 'helm-goto-precedent-file "helm-grep" "Go to previous file in Helm grep/etags buffers." t nil)(autoload 'helm-goto-next-file "helm-grep" "Go to previous file in Helm grep/etags buffers." t nil)(autoload 'helm-do-grep-ag "helm-grep" "Preconfigured `helm' for grepping with AG in `default-directory'.
With prefix arg prompt for type if available with your AG
version.

(fn ARG)" t nil)(autoload 'helm-grep-do-git-grep "helm-grep" "Preconfigured `helm' for git-grepping `default-directory'.
With a prefix arg ARG git-grep the whole repository.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-grep" '("helm-")))(autoload 'helm-documentation "helm-help" "Preconfigured `helm' for Helm documentation.
With a prefix arg refresh the documentation.

Find here the documentation of all documented sources." t nil)(defvar helm-comp-read-mode-line "\\<helm-comp-read-map>C/\\[helm-cr-empty-string]:Empty \\<helm-map>\\[helm-help]:Help \\[helm-select-action]:Act \\[helm-maybe-exit-minibuffer]/f1/f2/f-n:NthAct \\[helm-toggle-suspend-update]:Tog.suspend \\[helm-customize-group]:Conf")(defvar helm-read-file-name-mode-line-string "\\<helm-read-file-map>\\[helm-help]:Help C/\\[helm-cr-empty-string]:Empty \\<helm-map>\\[helm-select-action]:Act \\[helm-maybe-exit-minibuffer]/f1/f2/f-n:NthAct \\[helm-toggle-suspend-update]:Tog.suspend \\[helm-customize-group]:Conf" "String displayed in mode-line in `helm-source-find-files'.")(defvar helm-top-mode-line "\\<helm-top-map>\\[helm-help]:Help \\<helm-map>\\[helm-select-action]:Act \\[helm-maybe-exit-minibuffer]/f1/f2/f-n:NthAct \\[helm-toggle-suspend-update]:Tog.suspend \\[helm-customize-group]:Conf")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-help" '("helm-")))(autoload 'helm-gid "helm-id-utils" "Preconfigured `helm' for `gid' command line of `ID-Utils'.
Need A database created with the command `mkid' above
`default-directory'.
Need id-utils as dependency which provide `mkid', `gid' etc..
See <https://www.gnu.org/software/idutils/>." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-id-utils" '("helm-gid-")))(autoload 'helm-imenu "helm-imenu" "Preconfigured `helm' for `imenu'." t nil)(autoload 'helm-imenu-in-all-buffers "helm-imenu" "Preconfigured `helm' for fetching imenu entries in all buffers with similar mode as current.
A mode is similar as current if it is the same, it is derived
i.e. `derived-mode-p' or it have an association in
`helm-imenu-all-buffer-assoc'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-imenu" '("helm-")))(autoload 'helm-info "helm-info" "Preconfigured `helm' for searching Info files' indices.

With a prefix argument \\[universal-argument], set REFRESH to
non-nil.

Optional parameter REFRESH, when non-nil, re-evaluates
`helm-default-info-index-list'.  If the variable has been
customized, set it to its saved value.  If not, set it to its
standard value. See `custom-reevaluate-setting' for more.

REFRESH is useful when new Info files are installed.  If
`helm-default-info-index-list' has not been customized, the new
Info files are made available.

(fn &optional REFRESH)" t nil)(autoload 'helm-info-at-point "helm-info" "Preconfigured `helm' for searching info at point." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-info" '("helm-")))(autoload 'helm-projects-find-files "helm-locate" "Find files with locate in `helm-locate-project-list'.
With a prefix arg refresh the database in each project.

(fn UPDATE)" t nil)(autoload 'helm-locate "helm-locate" "Preconfigured `helm' for Locate.
Note: you can add locate options after entering pattern.
See 'man locate' for valid options and also `helm-locate-command'.

You can specify a local database with prefix argument ARG.
With two prefix arg, refresh the current local db or create it if
it doesn't exists.

To create a user specific db, use
\"updatedb -l 0 -o db_path -U directory\".
Where db_path is a filename matched by
`helm-locate-db-file-regexp'.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-locate" '("helm-")))(autoload 'helm-man-woman "helm-man" "Preconfigured `helm' for Man and Woman pages.
With a prefix arg reinitialize the cache.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-man" '("helm-")))(defvar helm-minibuffer-history-mode nil "Non-nil if Helm-Minibuffer-History mode is enabled.
See the `helm-minibuffer-history-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-minibuffer-history-mode'.")(autoload 'helm-minibuffer-history-mode "helm-misc" "Bind `helm-minibuffer-history-key' in al minibuffer maps.
This mode is enabled by `helm-mode', so there is no need to enable it directly.

If called interactively, enable Helm-Minibuffer-History mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'helm-world-time "helm-misc" "Preconfigured `helm' to show world time.
Default action change TZ environment variable locally to emacs." t nil)(autoload 'helm-insert-latex-math "helm-misc" "Preconfigured helm for latex math symbols completion." t nil)(autoload 'helm-ratpoison-commands "helm-misc" "Preconfigured `helm' to execute ratpoison commands." t nil)(autoload 'helm-stumpwm-commands "helm-misc" "Preconfigured helm for stumpwm commands." t nil)(autoload 'helm-minibuffer-history "helm-misc" "Preconfigured `helm' for `minibuffer-history'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-misc" '("helm-")))(autoload 'helm-comp-read "helm-mode" "Read a string in the minibuffer, with helm completion.

It is helm `completing-read' equivalent.

- PROMPT is the prompt name to use.

- COLLECTION can be a list, alist, vector, obarray or hash-table.
  For alists and hash-tables their car are use as real value of
  candidate unless ALISTP is non-nil.
  It can be also a function that receives three arguments:
  the values string, predicate and t. See `all-completions' for more details.

Keys description:

- TEST: A predicate called with one arg i.e candidate.

- INITIAL-INPUT: Same as input arg in `helm'.

- PRESELECT: See preselect arg of `helm'.

- DEFAULT: This option is used only for compatibility with regular
  Emacs `completing-read' (Same as DEFAULT arg of `completing-read').

- BUFFER: Name of helm-buffer.

- MUST-MATCH: Candidate selected must be one of COLLECTION.

- FUZZY: Enable fuzzy matching.

- REVERSE-HISTORY: When non--nil display history source after current
  source completion.

- REQUIRES-PATTERN: Same as helm attribute, default is 0.

- HISTORY: A symbol where each result will be saved.
  If not specified as a symbol an error will popup.
  When specified, all elements of HISTORY are displayed in
  a special source before or after COLLECTION according to REVERSE-HISTORY.
  The main difference with INPUT-HISTORY is that the result of the
  completion is saved whereas in INPUT-HISTORY it is the minibuffer
  contents which is saved when you exit.
  Don't use the same symbol for INPUT-HISTORY and HISTORY.
  NOTE: As mentionned above this has nothing to do with
  `minibuffer-history-variable', therefore if you want to save this
  history persistently, you will have to add this variable to the
  relevant variable of your favorite tool for persistent emacs session
  i.e. psession, desktop etc...

- RAW-HISTORY: When non-nil do not remove backslashs if some in
  HISTORY candidates.

- INPUT-HISTORY: A symbol. The minibuffer input history will be
  stored there, if nil or not provided, `minibuffer-history'
  will be used instead.  You can navigate in this history with
  `M-p' and `M-n'.
  Don't use the same symbol for INPUT-HISTORY and HISTORY.

- CASE-FOLD: Same as `helm-case-fold-search'.

- PERSISTENT-ACTION: A function called with one arg i.e candidate.

- PERSISTENT-HELP: A string to document PERSISTENT-ACTION.

- MODE-LINE: A string or list to display in mode line.
  Default is `helm-comp-read-mode-line'.

- KEYMAP: A keymap to use in this `helm-comp-read'.
  (the keymap will be shared with history source)

- NAME: The name related to this local source.

- HEADER-NAME: A function to alter NAME, see `helm'.

- EXEC-WHEN-ONLY-ONE: Bound `helm-execute-action-at-once-if-one'
  to non--nil. (possibles values are t or nil).

- VOLATILE: Use volatile attribute.

- SORT: A predicate to give to `sort' e.g `string-lessp'
  Use this only on small data as it is inefficient.
  If you want to sort faster add a sort function to
  FC-TRANSFORMER.
  Note that FUZZY when enabled is already providing a sort function.

- FC-TRANSFORMER: A `filtered-candidate-transformer' function
  or a list of functions.

- HIST-FC-TRANSFORMER: A `filtered-candidate-transformer'
  function for the history source.

- MARKED-CANDIDATES: If non--nil return candidate or marked candidates as a list.

- NOMARK: When non--nil don't allow marking candidates.

- ALISTP:
  When non-nil (default) pass the value of (DISPLAY . REAL)
  candidate in COLLECTION to action when COLLECTION is an alist or a
  hash-table, otherwise DISPLAY is always returned as result on exit,
  which is the default when using `completing-read'.
  See `helm-comp-read-get-candidates'.

- CANDIDATES-IN-BUFFER: when non--nil use a source build with
  `helm-source-in-buffer' which is much faster.
  Argument VOLATILE have no effect when CANDIDATES-IN-BUFFER is non--nil.

- MATCH-PART: Allow matching only one part of candidate.
  See match-part documentation in `helm-source'.

- MATCH-DYNAMIC: See match-dynamic in `helm-source-sync'
  It has no effect when used with CANDIDATES-IN-BUFFER.

- ALLOW-NEST: Allow nesting this `helm-comp-read' in a helm session.
  See `helm'.

- MULTILINE: See multiline in `helm-source'.

- COERCE: See coerce in `helm-source'.

- GROUP: See group in `helm-source'.

Any prefix args passed during `helm-comp-read' invocation will be recorded
in `helm-current-prefix-arg', otherwise if prefix args were given before
`helm-comp-read' invocation, the value of `current-prefix-arg' will be used.
That means you can pass prefix args before or after calling a command
that use `helm-comp-read'.  See `helm-M-x' for example.

(fn PROMPT COLLECTION &key TEST INITIAL-INPUT DEFAULT PRESELECT (BUFFER \"*Helm Completions*\") MUST-MATCH FUZZY REVERSE-HISTORY (REQUIRES-PATTERN 0) (HISTORY nil SHISTORY) RAW-HISTORY INPUT-HISTORY (CASE-FOLD helm-comp-read-case-fold-search) (PERSISTENT-ACTION nil) (PERSISTENT-HELP \"DoNothing\") (MODE-LINE helm-comp-read-mode-line) HELP-MESSAGE (KEYMAP helm-comp-read-map) (NAME \"Helm Completions\") HEADER-NAME CANDIDATES-IN-BUFFER MATCH-PART MATCH-DYNAMIC EXEC-WHEN-ONLY-ONE QUIT-WHEN-NO-CAND (VOLATILE t) SORT FC-TRANSFORMER HIST-FC-TRANSFORMER (MARKED-CANDIDATES helm-comp-read-use-marked) NOMARK (ALISTP t) (CANDIDATE-NUMBER-LIMIT helm-candidate-number-limit) MULTILINE ALLOW-NEST COERCE (GROUP \\='helm))" nil nil)(autoload 'helm-read-file-name "helm-mode" "Read a file name with helm completion.
It is helm `read-file-name' emulation.

Argument PROMPT is the default prompt to use.

Keys description:

- NAME: Source name, default to \"Read File Name\".

- INITIAL-INPUT: Where to start reading file name, default to `default-directory' or $HOME.

- BUFFER: `helm-buffer' name, defaults to \"*Helm Completions*\".

- TEST: A predicate called with one arg 'candidate'.

- NORET: Allow disabling helm-ff-RET (have no effect if helm-ff-RET
                                      isn't bound to RET).

- CASE-FOLD: Same as `helm-case-fold-search'.

- PRESELECT: helm preselection.

- HISTORY: Display HISTORY in a special source.

- MUST-MATCH: Can be 'confirm, nil, or t.

- FUZZY: Enable fuzzy matching when non-nil (Enabled by default).

- MARKED-CANDIDATES: When non--nil return a list of marked candidates.

- NOMARK: When non--nil don't allow marking candidates.

- ALISTP: Don't use `all-completions' in history (take effect only on history).

- PERSISTENT-ACTION-IF: a persistent if action function.

- PERSISTENT-HELP: persistent help message.

- MODE-LINE: A mode line message, default is `helm-read-file-name-mode-line-string'.

(fn PROMPT &key (NAME \"Read File Name\") INITIAL-INPUT (BUFFER \"*Helm file completions*\") TEST NORET (CASE-FOLD helm-file-name-case-fold-search) PRESELECT HISTORY MUST-MATCH (FUZZY t) DEFAULT MARKED-CANDIDATES (CANDIDATE-NUMBER-LIMIT helm-ff-candidate-number-limit) NOMARK (ALISTP t) (PERSISTENT-ACTION-IF \\='helm-find-files-persistent-action-if) (PERSISTENT-HELP \"Hit1 Expand Candidate, Hit2 or (C-u) Find file\") (MODE-LINE helm-read-file-name-mode-line-string))" nil nil)(defvar helm-mode nil "Non-nil if Helm mode is enabled.
See the `helm-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-mode'.")(autoload 'helm-mode "helm-mode" "Toggle generic helm completion.

If called interactively, enable Helm mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

All functions in Emacs that use `completing-read',
`read-file-name', `completion-in-region' and friends will use helm
interface when this mode is turned on.

However you can modify this behavior for functions of your choice
with `helm-completing-read-handlers-alist'.

Called with a positive arg, turn on unconditionally, with a
negative arg turn off.
You can toggle it with M-x `helm-mode'.

About `ido-mode':
DO NOT enable `ido-everywhere' when using `helm-mode'.  Instead of
using `ido-mode', add the commands where you want to use ido to
`helm-completing-read-handlers-alist' with `ido' as value.

Note: This mode is incompatible with Emacs23.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-mode" '("helm-")))(autoload 'helm-browse-url-firefox "helm-net" "Same as `browse-url-firefox' but detach from Emacs.

So when you quit Emacs you can keep your Firefox session open and
not be prompted to kill the Firefox process.

NOTE: Probably not supported on some systems (e.g., Windows).

(fn URL &optional IGNORE)" t nil)(autoload 'helm-browse-url-opera "helm-net" "Browse URL with Opera browser and detach from Emacs.

So when you quit Emacs you can keep your Opera session open and
not be prompted to kill the Opera process.

NOTE: Probably not supported on some systems (e.g., Windows).

(fn URL &optional IGNORE)" t nil)(autoload 'helm-browse-url-chromium "helm-net" "Browse URL with Google Chrome browser.

(fn URL &optional IGNORE)" t nil)(autoload 'helm-browse-url-uzbl "helm-net" "Browse URL with uzbl browser.

(fn URL &optional IGNORE)" t nil)(autoload 'helm-browse-url-conkeror "helm-net" "Browse URL with conkeror browser.

(fn URL &optional IGNORE)" t nil)(autoload 'helm-browse-url-nyxt "helm-net" "Browse URL with nyxt browser.

(fn URL &optional IGNORE)" t nil)(autoload 'helm-surfraw "helm-net" "Preconfigured `helm' to search PATTERN with search ENGINE.

(fn PATTERN ENGINE)" t nil)(autoload 'helm-google-suggest "helm-net" "Preconfigured `helm' for Google search with Google suggest." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-net" '("helm-")))(autoload 'helm-occur "helm-occur" "Preconfigured helm for searching lines matching pattern in `current-buffer'.

When `helm-source-occur' is member of
`helm-sources-using-default-as-input' which is the default,
symbol at point is searched at startup.

When a region is marked search only in this region by narrowing.

To search in multiples buffers start from one of the commands listing
buffers (i.e. a helm command using `helm-source-buffers-list' like
`helm-mini') and use the multi occur buffers action.

This is the helm implementation that collect lines matching pattern
like vanilla Emacs `occur' but have nothing to do with it, the search
engine beeing completely different and also much faster." t nil)(autoload 'helm-occur-visible-buffers "helm-occur" "Run helm-occur on all visible buffers in frame." t nil)(autoload 'helm-occur-from-isearch "helm-occur" "Invoke `helm-occur' from isearch.

To use this bind it to a key in `isearch-mode-map'." t nil)(autoload 'helm-multi-occur-from-isearch "helm-occur" "Invoke `helm-multi-occur' from isearch.

With a prefix arg, reverse the behavior of
`helm-moccur-always-search-in-current'.
The prefix arg can be set before calling
`helm-multi-occur-from-isearch' or during the buffer selection.

To use this bind it to a key in `isearch-mode-map'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-occur" '("helm-")))(autoload 'helm-regexp "helm-regexp" "Preconfigured helm to build regexps.
`query-replace-regexp' can be run from there against found regexp." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-regexp" '("helm-")))(autoload 'helm-mark-ring "helm-ring" "Preconfigured `helm' for `helm-source-mark-ring'." t nil)(autoload 'helm-global-mark-ring "helm-ring" "Preconfigured `helm' for `helm-source-global-mark-ring'." t nil)(autoload 'helm-all-mark-rings "helm-ring" "Preconfigured `helm' for `helm-source-global-mark-ring' and `helm-source-mark-ring'." t nil)(autoload 'helm-register "helm-ring" "Preconfigured `helm' for Emacs registers." t nil)(autoload 'helm-show-kill-ring "helm-ring" "Preconfigured `helm' for `kill-ring'.
It is drop-in replacement of `yank-pop'.

First call open the kill-ring browser, next calls move to next line." t nil)(autoload 'helm-execute-kmacro "helm-ring" "Preconfigured helm for keyboard macros.
Define your macros with `f3' and `f4'.
See (info \"(emacs) Keyboard Macros\") for detailed infos.
This command is useful when used with persistent action." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-ring" '("helm-")))(autoload 'helm-semantic "helm-semantic" "Preconfigured `helm' for `semantic'.
If ARG is supplied, pre-select symbol at point instead of current.

(fn ARG)" t nil)(autoload 'helm-semantic-or-imenu "helm-semantic" "Preconfigured helm for `semantic' or `imenu'.
If ARG is supplied, pre-select symbol at point instead of current
semantic tag in scope.

If `semantic-mode' is active in the current buffer, then use
semantic for generating tags, otherwise fall back to `imenu'.
Fill in the symbol at point by default.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-semantic" '("helm-s")))(defalias 'helm-shell-prompts 'helm-comint-prompts)(defalias 'helm-shell-prompts-all 'helm-comint-prompts-all)(defvar helm-top-poll-mode nil "Non-nil if Helm-Top-Poll mode is enabled.
See the `helm-top-poll-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-top-poll-mode'.")(autoload 'helm-top-poll-mode "helm-sys" "Refresh automatically helm top buffer once enabled.

If called interactively, enable Helm-Top-Poll mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'helm-top "helm-sys" "Preconfigured `helm' for top command." t nil)(autoload 'helm-list-emacs-process "helm-sys" "Preconfigured `helm' for Emacs process." t nil)(autoload 'helm-xrandr-set "helm-sys" "Preconfigured helm for xrandr." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-sys" '("helm-")))(autoload 'helm-etags-select "helm-tags" "Preconfigured helm for etags.
If called with a prefix argument REINIT
or if any of the tag files have been modified, reinitialize cache.

This function aggregates three sources of tag files:

  1) An automatically located file in the parent directories,
     by `helm-etags-get-tag-file'.
  2) `tags-file-name', which is commonly set by `find-tag' command.
  3) `tags-table-list' which is commonly set by `visit-tags-table' command.

(fn REINIT)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-tags" '("helm-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-types" '("helm-")))(defvar helm-popup-tip-mode nil "Non-nil if Helm-Popup-Tip mode is enabled.
See the `helm-popup-tip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-popup-tip-mode'.")(autoload 'helm-popup-tip-mode "helm-utils" "Show help-echo informations in a popup tip at end of line.

If called interactively, enable Helm-Popup-Tip mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-utils" '("helm-" "with-helm-display-marked-candidates")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-x-files" '("helm-")))(autoload 'async-start-process "async" "Start the executable PROGRAM asynchronously named NAME.  See `async-start'.
PROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the
process object when done.  If FINISH-FUNC is nil, the future
object will return the process object when the program is
finished.  Set DEFAULT-DIRECTORY to change PROGRAM's current
working directory.

(fn NAME PROGRAM FINISH-FUNC &rest PROGRAM-ARGS)" nil nil)(autoload 'async-start "async" "Execute START-FUNC (often a lambda) in a subordinate Emacs process.
When done, the return value is passed to FINISH-FUNC.  Example:

    (async-start
       ;; What to do in the child process
       (lambda ()
         (message \"This is a test\")
         (sleep-for 3)
         222)

       ;; What to do when it finishes
       (lambda (result)
         (message \"Async process done, result should be 222: %s\"
                  result)))

If FINISH-FUNC is nil or missing, a future is returned that can
be inspected using `async-get', blocking until the value is
ready.  Example:

    (let ((proc (async-start
                   ;; What to do in the child process
                   (lambda ()
                     (message \"This is a test\")
                     (sleep-for 3)
                     222))))

        (message \"I'm going to do some work here\") ;; ....

        (message \"Waiting on async process, result should be 222: %s\"
                 (async-get proc)))

If you don't want to use a callback, and you don't care about any
return value from the child process, pass the `ignore' symbol as
the second argument (if you don't, and never call `async-get', it
will leave *emacs* process buffers hanging around):

    (async-start
     (lambda ()
       (delete-file \"a remote file on a slow link\" nil))
     \\='ignore)

Special case:
If the output of START-FUNC is a string with properties
e.g. (buffer-string) RESULT will be transformed in a list where the
car is the string itself (without props) and the cdr the rest of
properties, this allows using in FINISH-FUNC the string without
properties and then apply the properties in cdr to this string (if
needed).
Properties handling special objects like markers are returned as
list to allow restoring them later.
See <https://github.com/jwiegley/emacs-async/issues/145> for more infos.

Note: Even when FINISH-FUNC is present, a future is still
returned except that it yields no value (since the value is
passed to FINISH-FUNC).  Call `async-get' on such a future always
returns nil.  It can still be useful, however, as an argument to
`async-ready' or `async-wait'.

(fn START-FUNC &optional FINISH-FUNC)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "async" '("async-")))(autoload 'async-byte-recompile-directory "async-bytecomp" "Compile all *.el files in DIRECTORY asynchronously.
All *.elc files are systematically deleted before proceeding.

(fn DIRECTORY &optional QUIET)" nil nil)(defvar async-bytecomp-package-mode nil "Non-nil if Async-Bytecomp-Package mode is enabled.
See the `async-bytecomp-package-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `async-bytecomp-package-mode'.")(autoload 'async-bytecomp-package-mode "async-bytecomp" "Byte compile asynchronously packages installed with package.el.
Async compilation of packages can be controlled by
`async-bytecomp-allowed-packages'.

If called interactively, enable Async-Bytecomp-Package mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'async-byte-compile-file "async-bytecomp" "Byte compile Lisp code FILE asynchronously.

Same as `byte-compile-file' but asynchronous.

(fn FILE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "async-bytecomp" '("async-")))(defvar dired-async-mode nil "Non-nil if Dired-Async mode is enabled.
See the `dired-async-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dired-async-mode'.")(autoload 'dired-async-mode "dired-async" "Do dired actions asynchronously.

If called interactively, enable Dired-Async mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'dired-async-do-copy "dired-async" "Run ‘dired-do-copy’ asynchronously.

(fn &optional ARG)" t nil)(autoload 'dired-async-do-symlink "dired-async" "Run ‘dired-do-symlink’ asynchronously.

(fn &optional ARG)" t nil)(autoload 'dired-async-do-hardlink "dired-async" "Run ‘dired-do-hardlink’ asynchronously.

(fn &optional ARG)" t nil)(autoload 'dired-async-do-rename "dired-async" "Run ‘dired-do-rename’ asynchronously.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dired-async" '("dired-async-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smtpmail-async" '("async-smtpmail-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "popup" '("popup-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-lib" '("helm-" "with-helm-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-multi-match" '("helm-m")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-source" '("helm-")))(autoload 'helm-rg "helm-rg" "Search for the PCRE regexp RG-PATTERN extremely quickly with ripgrep.

When invoked interactively with a prefix argument, or when PFX is non-nil,
set the cwd for the ripgrep process to `default-directory'. Otherwise use the
cwd as described by `helm-rg-default-directory'.

If PATHS is non-nil, ripgrep will search only those paths, relative to the
process's cwd. Otherwise, the process's cwd will be searched.

Note that ripgrep respects glob patterns from .gitignore, .rgignore, and .ignore
files, excluding files matching those patterns. This composes with the glob
defined by `helm-rg-default-glob-string', which only finds files matching the
glob, and can be overridden with `helm-rg--set-glob', which is defined in
`helm-rg-map'.

There are many more `defcustom' forms, which are visible by searching for \"defcustom\" in the
`helm-rg' source (which can be located using `find-function'). These `defcustom' forms set defaults
for options which can be modified while invoking `helm-rg' using the keybindings listed below.

The ripgrep command's help output can be printed into its own buffer for
reference with the interactive command `helm-rg-display-help'.

\\{helm-rg-map}

(fn RG-PATTERN &optional PFX PATHS)" t nil)(autoload 'helm-rg-display-help "helm-rg" "Display a buffer with the ripgrep command's usage help.

The help buffer will be reused if it was already created. A prefix argument when
invoked interactively, or a non-nil value for PFX, will display the help buffer
in the current window. Otherwise, if the help buffer is already being displayed
in some window, select that window, or else display the help buffer with
`pop-to-buffer'.

(fn &optional PFX)" t nil)(autoload 'helm-rg-from-isearch "helm-rg" "Invoke `helm-rg' from isearch." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-rg" '("helm-")))(autoload 'helm-yas-complete "helm-c-yasnippet" "List of yasnippet snippets using `helm' interface." t nil)(autoload 'helm-yas-visit-snippet-file "helm-c-yasnippet" "List of yasnippet snippet files" t nil)(autoload 'helm-yas-create-snippet-on-region "helm-c-yasnippet" "Create a snippet from region.

(fn &optional START END FILE-NAME)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-c-yasnippet" '("helm-")))(autoload 'yas-minor-mode "yasnippet" "Toggle YASnippet mode.

If called interactively, enable Yas minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When YASnippet mode is enabled, `yas-expand', normally bound to
the TAB key, expands snippets of code depending on the major
mode.

With no argument, this command toggles the mode.
positive prefix argument turns on the mode.
Negative prefix argument turns off the mode.

Key bindings:
\\{yas-minor-mode-map}

(fn &optional ARG)" t nil)(put 'yas-global-mode 'globalized-minor-mode t)(defvar yas-global-mode nil "Non-nil if Yas-Global mode is enabled.
See the `yas-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `yas-global-mode'.")(autoload 'yas-global-mode "yasnippet" "Toggle Yas minor mode in all buffers.
With prefix ARG, enable Yas-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Yas minor mode is enabled in all buffers where
`yas-minor-mode-on' would do it.
See `yas-minor-mode' for more information on Yas minor mode.

(fn &optional ARG)" t nil)(autoload 'snippet-mode "yasnippet" "A mode for editing yasnippets" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "yasnippet" '("help-snippet-def" "snippet-mode-map" "yas")))(autoload 'helm-company "helm-company" "Select `company-complete' candidates by `helm'.
It is useful to narrow candidates." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-company" '("helm-")))(autoload 'helm-describe-modes "helm-describe-modes" "A convenient Helm version of `describe-mode'.

By default, it lists the major mode, active minor modes, and
inactive minor modes.  Sources can be added or removed by
customizing `helm-describe-modes-function-list'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-describe-modes" '("helm-describe-modes-")))(defvar helm-projectile-fuzzy-match t "Enable fuzzy matching for Helm Projectile commands.
This needs to be set before loading helm-projectile.el.")(autoload 'helm-projectile-find-file-dwim "helm-projectile" "Find file at point based on context." t nil)(autoload 'helm-projectile-find-other-file "helm-projectile" "Switch between files with the same name but different extensions using Helm.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t nil)(autoload 'helm-projectile-on "helm-projectile" "Turn on `helm-projectile' key bindings." t nil)(autoload 'helm-projectile-off "helm-projectile" "Turn off `helm-projectile' key bindings." t nil)(autoload 'helm-projectile-grep "helm-projectile" "Helm version of `projectile-grep'.
DIR is the project root, if not set then current directory is used

(fn &optional DIR)" t nil)(autoload 'helm-projectile-ack "helm-projectile" "Helm version of projectile-ack.

(fn &optional DIR)" t nil)(autoload 'helm-projectile-ag "helm-projectile" "Helm version of `projectile-ag'.

(fn &optional OPTIONS)" t nil)(autoload 'helm-projectile-rg "helm-projectile" "Projectile version of `helm-rg'." t nil)(autoload 'helm-projectile-toggle "helm-projectile" "Toggle Helm version of Projectile commands.

(fn TOGGLE)" nil nil)(autoload 'helm-projectile "helm-projectile" "Use projectile with Helm instead of ido.

With a prefix ARG invalidates the cache first.
If invoked outside of a project, displays a list of known projects to jump.

(fn &optional ARG)" t nil)(eval-after-load 'projectile '(progn (define-key projectile-command-map (kbd "h") #'helm-projectile)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-projectile" '("helm-")))(autoload 'swiper-helm "swiper-helm" "`isearch' with an overview using `helm'.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "swiper-helm" '("swiper-")))(autoload 'swiper-avy "swiper" "Jump to one of the current swiper candidates with `avy'." t nil)(autoload 'swiper-backward "swiper" "`isearch-backward' with an overview.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'swiper-thing-at-point "swiper" "`swiper' with `ivy-thing-at-point'." t nil)(autoload 'swiper-all-thing-at-point "swiper" "`swiper-all' with `ivy-thing-at-point'." t nil)(autoload 'swiper "swiper" "`isearch-forward' with an overview.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'swiper-all "swiper" "Run `swiper' for all open buffers.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'swiper-isearch "swiper" "A `swiper' that's not line-based.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'swiper-isearch-backward "swiper" "Like `swiper-isearch' but the first result is before the point.

(fn &optional INITIAL-INPUT)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "swiper" '("swiper-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "colir" '("colir-")))(autoload 'ivy-resume "ivy" "Resume the last completion session, or SESSION if non-nil.
With a prefix arg, try to restore a recorded completion session,
if one exists.

(fn &optional SESSION)" t nil)(autoload 'ivy-read "ivy" "Read a string in the minibuffer, with completion.

PROMPT is a string, normally ending in a colon and a space.
`ivy-count-format' is prepended to PROMPT during completion.

COLLECTION is either a list of strings, a function, an alist, or
a hash table, supplied for `minibuffer-completion-table'.

PREDICATE is applied to filter out the COLLECTION immediately.
This argument is for compatibility with `completing-read'.

When REQUIRE-MATCH is non-nil, only members of COLLECTION can be
selected.

If INITIAL-INPUT is non-nil, then insert that input in the
minibuffer initially.

HISTORY is a name of a variable to hold the completion session
history.

KEYMAP is composed with `ivy-minibuffer-map'.

PRESELECT, when non-nil, determines which one of the candidates
matching INITIAL-INPUT to select initially.  An integer stands
for the position of the desired candidate in the collection,
counting from zero.  Otherwise, use the first occurrence of
PRESELECT in the collection.  Comparison is first done with
`equal'.  If that fails, and when applicable, match PRESELECT as
a regular expression.

DEF is for compatibility with `completing-read'.

UPDATE-FN is called each time the candidate list is re-displayed.

When SORT is non-nil, `ivy-sort-functions-alist' determines how
to sort candidates before displaying them.

ACTION is a function to call after selecting a candidate.
It takes one argument, the selected candidate. If COLLECTION is
an alist, the argument is a cons cell, otherwise it's a string.

MULTI-ACTION, when non-nil, is called instead of ACTION when
there are marked candidates. It takes the list of candidates as
its only argument. When it's nil, ACTION is called on each marked
candidate.

UNWIND is a function of no arguments to call before exiting.

RE-BUILDER is a function transforming input text into a regex
pattern.

MATCHER is a function which can override how candidates are
filtered based on user input.  It takes a regex pattern and a
list of candidates, and returns the list of matching candidates.

DYNAMIC-COLLECTION is a boolean specifying whether the list of
candidates is updated after each input by calling COLLECTION.

EXTRA-PROPS is a plist that can be used to store
collection-specific session-specific data.

CALLER is a symbol to uniquely identify the caller to `ivy-read'.
It is used, along with COLLECTION, to determine which
customizations apply to the current completion session.

(fn PROMPT COLLECTION &key PREDICATE REQUIRE-MATCH INITIAL-INPUT HISTORY PRESELECT DEF KEYMAP UPDATE-FN SORT ACTION MULTI-ACTION UNWIND RE-BUILDER MATCHER DYNAMIC-COLLECTION EXTRA-PROPS CALLER)" nil nil)(autoload 'ivy-completing-read "ivy" "Read a string in the minibuffer, with completion.

This interface conforms to `completing-read' and can be used for
`completing-read-function'.

PROMPT is a string that normally ends in a colon and a space.
COLLECTION is either a list of strings, an alist, an obarray, or a hash table.
PREDICATE limits completion to a subset of COLLECTION.
REQUIRE-MATCH is a boolean value or a symbol.  See `completing-read'.
INITIAL-INPUT is a string inserted into the minibuffer initially.
HISTORY is a list of previously selected inputs.
DEF is the default value.
INHERIT-INPUT-METHOD is currently ignored.

(fn PROMPT COLLECTION &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HISTORY DEF INHERIT-INPUT-METHOD)" nil nil)(defvar ivy-mode nil "Non-nil if Ivy mode is enabled.
See the `ivy-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ivy-mode'.")(autoload 'ivy-mode "ivy" "Toggle Ivy mode on or off.
Turn Ivy mode on if ARG is positive, off otherwise.
Turning on Ivy mode sets `completing-read-function' to
`ivy-completing-read'.

Global bindings:
\\{ivy-mode-map}

Minibuffer bindings:
\\{ivy-minibuffer-map}

(fn &optional ARG)" t nil)(autoload 'ivy-switch-buffer "ivy" "Switch to another buffer." t nil)(autoload 'ivy-switch-view "ivy" "Switch to one of the window views stored by `ivy-push-view'." t nil)(autoload 'ivy-switch-buffer-other-window "ivy" "Switch to another buffer in another window." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy" '("ivy-" "with-ivy-window")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-overlay" '("ivy-")))(require 'helm-easymenu)(easy-menu-add-item nil '("Tools" "Helm") '("Org" ["Org headlines in org agenda files" helm-org-agenda-files-headings t] ["Org headlines in buffer" helm-org-in-buffer-headings t]) "Elpa")(autoload 'helm-org-agenda-files-headings "helm-org" "Preconfigured helm for org files headings.

(fn &optional ARG)" t nil)(autoload 'helm-org-in-buffer-headings "helm-org" "Preconfigured helm for org buffer headings.

(fn &optional ARG)" t nil)(autoload 'helm-org-parent-headings "helm-org" "Preconfigured helm for org headings that are parents of the current heading.

(fn &optional ARG)" t nil)(autoload 'helm-org-capture-templates "helm-org" "Preconfigured helm for org templates." t nil)(autoload 'helm-org-completing-read-tags "helm-org" "Completing read function for Org tags.

This function is used as a `completing-read' function in
`helm-completing-read-handlers-alist' by `org-set-tags' and
`org-capture'.

NOTE: Org tag completion will work only if you disable org fast tag
selection, see (info \"(org) setting tags\").

(fn PROMPT COLLECTION PRED REQ INITIAL HIST DEF INHERIT-INPUT-METHOD NAME BUFFER)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-org" '("helm-")))(defvar helm-descbinds-mode nil "Non-nil if Helm-Descbinds mode is enabled.
See the `helm-descbinds-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `helm-descbinds-mode'.")(autoload 'helm-descbinds-mode "helm-descbinds" "Use `helm' for `describe-bindings'.

If called interactively, enable Helm-Descbinds mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'helm-descbinds-install "helm-descbinds" "Use `helm-descbinds' as a replacement of `describe-bindings'." t nil)(autoload 'helm-descbinds-uninstall "helm-descbinds" "Restore original `describe-bindings'." t nil)(autoload 'helm-descbinds "helm-descbinds" "A convenient helm version of `describe-bindings'.

Turning on `helm-descbinds-mode' is the recommended way to
install this command to replace `describe-bindings'.

You complete against a list of keys + command pairs presented in
a similar way as `describe-bindings' does, split into sections
defined by the types of the key bindings (minor and major modes,
global bindings, etc).

The default action executes a command as if the binding had been
entered, or narrows the commands according to a prefix key,
respectively.

The persistent action pops up a help buffer for the selected
command without quitting.

For key translation maps, the default actions are not very
useful, yet they are listed for completeness.

(fn &optional PREFIX BUFFER)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-descbinds" '("helm-descbind")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-hydra" '("hydra-ivy" "ivy-")))(autoload 'defhydra "hydra" "Create a Hydra - a family of functions with prefix NAME.

NAME should be a symbol, it will be the prefix of all functions
defined here.

BODY has the format:

    (BODY-MAP BODY-KEY &rest BODY-PLIST)

DOCSTRING will be displayed in the echo area to identify the
Hydra.  When DOCSTRING starts with a newline, special Ruby-style
substitution will be performed by `hydra--format'.

Functions are created on basis of HEADS, each of which has the
format:

    (KEY CMD &optional HINT &rest PLIST)

BODY-MAP is a keymap; `global-map' is used quite often.  Each
function generated from HEADS will be bound in BODY-MAP to
BODY-KEY + KEY (both are strings passed to `kbd'), and will set
the transient map so that all following heads can be called
though KEY only.  BODY-KEY can be an empty string.

CMD is a callable expression: either an interactive function
name, or an interactive lambda, or a single sexp (it will be
wrapped in an interactive lambda).

HINT is a short string that identifies its head.  It will be
printed beside KEY in the echo erea if `hydra-is-helpful' is not
nil.  If you don't even want the KEY to be printed, set HINT
explicitly to nil.

The heads inherit their PLIST from BODY-PLIST and are allowed to
override some keys.  The keys recognized are :exit, :bind, and :column.
:exit can be:

- nil (default): this head will continue the Hydra state.
- t: this head will stop the Hydra state.

:bind can be:
- nil: this head will not be bound in BODY-MAP.
- a lambda taking KEY and CMD used to bind a head.

:column is a string that sets the column for all subsequent heads.

It is possible to omit both BODY-MAP and BODY-KEY if you don't
want to bind anything.  In that case, typically you will bind the
generated NAME/body command.  This command is also the return
result of `defhydra'.

(fn NAME BODY &optional DOCSTRING &rest HEADS)" nil t)(function-put 'defhydra 'lisp-indent-function 'defun)(function-put 'defhydra 'doc-string-elt '3)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hydra" '("defhydra" "hydra-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hydra-examples" '("hydra-" "org-agenda-cts" "whitespace-mode")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hydra-ox" '("hydra-ox")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lv" '("lv-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-avy" '("ivy-avy")))(autoload 'avy-process "avy" "Select one of CANDIDATES using `avy-read'.
Use OVERLAY-FN to visualize the decision overlay.
CLEANUP-FN should take no arguments and remove the effects of
multiple OVERLAY-FN invocations.

(fn CANDIDATES &optional OVERLAY-FN CLEANUP-FN)" nil nil)(autoload 'avy-goto-char "avy" "Jump to the currently visible CHAR.
The window scope is determined by `avy-all-windows' (ARG negates it).

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-char-in-line "avy" "Jump to the currently visible CHAR in the current line.

(fn CHAR)" t nil)(autoload 'avy-goto-char-2 "avy" "Jump to the currently visible CHAR1 followed by CHAR2.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn CHAR1 CHAR2 &optional ARG BEG END)" t nil)(autoload 'avy-goto-char-2-above "avy" "Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR1 CHAR2 &optional ARG)" t nil)(autoload 'avy-goto-char-2-below "avy" "Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR1 CHAR2 &optional ARG)" t nil)(autoload 'avy-isearch "avy" "Jump to one of the current isearch candidates." t nil)(autoload 'avy-goto-word-0 "avy" "Jump to a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn ARG &optional BEG END)" t nil)(autoload 'avy-goto-whitespace-end "avy" "Jump to the end of a whitespace sequence.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn ARG &optional BEG END)" t nil)(autoload 'avy-goto-word-1 "avy" "Jump to the currently visible CHAR at a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.
When SYMBOL is non-nil, jump to symbol start instead of word start.

(fn CHAR &optional ARG BEG END SYMBOL)" t nil)(autoload 'avy-goto-word-1-above "avy" "Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-word-1-below "avy" "Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-symbol-1 "avy" "Jump to the currently visible CHAR at a symbol start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-symbol-1-above "avy" "Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-symbol-1-below "avy" "Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-subword-0 "avy" "Jump to a word or subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).

When PREDICATE is non-nil it's a function of zero parameters that
should return true.

BEG and END narrow the scope where candidates are searched.

(fn &optional ARG PREDICATE BEG END)" t nil)(autoload 'avy-goto-subword-1 "avy" "Jump to the currently visible CHAR at a subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).
The case of CHAR is ignored.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-word-or-subword-1 "avy" "Forward to `avy-goto-subword-1' or `avy-goto-word-1'.
Which one depends on variable `subword-mode'." t nil)(autoload 'avy-goto-line "avy" "Jump to a line start in current buffer.

When ARG is 1, jump to lines currently visible, with the option
to cancel to `goto-line' by entering a number.

When ARG is 4, negate the window scope determined by
`avy-all-windows'.

Otherwise, forward to `goto-line' with ARG.

(fn &optional ARG)" t nil)(autoload 'avy-goto-line-above "avy" "Goto visible line above the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

(fn &optional OFFSET BOTTOM-UP)" t nil)(autoload 'avy-goto-line-below "avy" "Goto visible line below the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

(fn &optional OFFSET BOTTOM-UP)" t nil)(autoload 'avy-goto-end-of-line "avy" "Call `avy-goto-line' and move to the end of the line.

(fn &optional ARG)" t nil)(autoload 'avy-copy-line "avy" "Copy a selected line above the current line.
ARG lines can be used.

(fn ARG)" t nil)(autoload 'avy-move-line "avy" "Move a selected line above the current line.
ARG lines can be used.

(fn ARG)" t nil)(autoload 'avy-copy-region "avy" "Select two lines and copy the text between them to point.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

(fn ARG)" t nil)(autoload 'avy-move-region "avy" "Select two lines and move the text between them above the current line." t nil)(autoload 'avy-kill-region "avy" "Select two lines and kill the region between them.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

(fn ARG)" t nil)(autoload 'avy-kill-ring-save-region "avy" "Select two lines and save the region between them to the kill ring.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn ARG)" t nil)(autoload 'avy-kill-whole-line "avy" "Select line and kill the whole selected line.

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

\\[universal-argument] 3 \\[avy-kil-whole-line] kill three lines
starting from the selected line.  \\[universal-argument] -3

\\[avy-kill-whole-line] kill three lines backward including the
selected line.

(fn ARG)" t nil)(autoload 'avy-kill-ring-save-whole-line "avy" "Select line and save the whole selected line as if killed, but don’t kill it.

This command is similar to `avy-kill-whole-line', except that it
saves the line(s) as if killed, but does not kill it(them).

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

(fn ARG)" t nil)(autoload 'avy-setup-default "avy" "Setup the default shortcuts." nil nil)(autoload 'avy-goto-char-timer "avy" "Read one or many consecutive chars and jump to the first one.
The window scope is determined by `avy-all-windows' (ARG negates it).

(fn &optional ARG)" t nil)(autoload 'avy-transpose-lines-in-region "avy" "Transpose lines in the active region." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "avy" '("avy-")))(autoload 'counsel-company "counsel" "Complete using `company-candidates'." t nil)(autoload 'counsel-irony "counsel" "Inline C/C++ completion using Irony." t nil)(autoload 'counsel-describe-variable "counsel" "Forward to `describe-variable'.

Variables declared using `defcustom' are highlighted according to
`ivy-highlight-face'." t nil)(autoload 'counsel-describe-function "counsel" "Forward to `describe-function'.

Interactive functions (i.e., commands) are highlighted according
to `ivy-highlight-face'." t nil)(autoload 'counsel-describe-symbol "counsel" "Forward to `describe-symbol'." t nil)(autoload 'counsel-set-variable "counsel" "Set a variable SYM, with completion.

When the selected variable is a `defcustom' with the type boolean
or radio, offer completion of all possible values.

Otherwise, offer a variant of `eval-expression', with the initial
input corresponding to the chosen variable.

With a prefix arg, restrict list to variables defined using
`defcustom'.

(fn SYM)" t nil)(autoload 'counsel-apropos "counsel" "Show all matching symbols.
See `apropos' for further information on what is considered
a symbol and how to search for them." t nil)(autoload 'counsel-info-lookup-symbol "counsel" "Forward SYMBOL to `info-lookup-symbol' with ivy completion.
With prefix arg MODE a query for the symbol help mode is offered.

(fn SYMBOL &optional MODE)" t nil)(autoload 'counsel-M-x "counsel" "Ivy version of `execute-extended-command'.
Optional INITIAL-INPUT is the initial input in the minibuffer.
This function integrates with either the `amx' or `smex' package
when available, in that order of precedence.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-command-history "counsel" "Show the history of commands." t nil)(autoload 'counsel-load-library "counsel" "Load a selected the Emacs Lisp library.
The libraries are offered from `load-path'." t nil)(autoload 'counsel-find-library "counsel" "Visit a selected the Emacs Lisp library.
The libraries are offered from `load-path'." t nil)(autoload 'counsel-load-theme "counsel" "Forward to `load-theme'.
Usable with `ivy-resume', `ivy-next-line-and-call' and
`ivy-previous-line-and-call'." t nil)(autoload 'counsel-descbinds "counsel" "Show a list of all defined keys and their definitions.
If non-nil, show only bindings that start with PREFIX.
BUFFER defaults to the current one.

(fn &optional PREFIX BUFFER)" t nil)(autoload 'counsel-describe-face "counsel" "Completion for `describe-face'." t nil)(autoload 'counsel-faces "counsel" "Complete faces with preview.
Actions are provided by default for describing or customizing the
selected face." t nil)(autoload 'counsel-git "counsel" "Find file in the current Git repository.
INITIAL-INPUT can be given as the initial minibuffer input.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-git-grep "counsel" "Grep for a string in the current Git repository.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
When CMD is a string, use it as a \"git grep\" command.
When CMD is non-nil, prompt for a specific \"git grep\" command.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY CMD)" t nil)(autoload 'counsel-git-stash "counsel" "Search through all available git stashes." t nil)(autoload 'counsel-git-change-worktree "counsel" "Find the file corresponding to the current buffer on a different worktree." t nil)(autoload 'counsel-git-checkout "counsel" "Call the \"git checkout\" command." t nil)(autoload 'counsel-git-log "counsel" "Call the \"git log --grep\" shell command." t nil)(autoload 'counsel-find-file "counsel" "Forward to `find-file'.
When INITIAL-INPUT is non-nil, use it in the minibuffer during completion.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)(autoload 'counsel-dired "counsel" "Forward to `dired'.
When INITIAL-INPUT is non-nil, use it in the minibuffer during completion.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-recentf "counsel" "Find a file on `recentf-list'." t nil)(autoload 'counsel-buffer-or-recentf "counsel" "Find a buffer visiting a file or file on `recentf-list'." t nil)(autoload 'counsel-bookmark "counsel" "Forward to `bookmark-jump' or `bookmark-set' if bookmark doesn't exist." t nil)(autoload 'counsel-bookmarked-directory "counsel" "Ivy interface for bookmarked directories.

With a prefix argument, this command creates a new bookmark which points to the
current value of `default-directory'." t nil)(autoload 'counsel-file-register "counsel" "Search file in register.

You cannot use Emacs' normal register commands to create file
registers.  Instead you must use the `set-register' function like
so: `(set-register ?i \"/home/eric/.emacs.d/init.el\")'.  Now you
can use `C-x r j i' to open that file." t nil)(autoload 'counsel-locate-action-extern "counsel" "Pass X to `xdg-open' or equivalent command via the shell.

(fn X)" t nil)(autoload 'counsel-locate "counsel" "Call a \"locate\" style shell command.
INITIAL-INPUT can be given as the initial minibuffer input.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-tracker "counsel" nil t nil)(autoload 'counsel-fzf "counsel" "Open a file using the fzf shell command.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
FZF-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY FZF-PROMPT)" t nil)(autoload 'counsel-dpkg "counsel" "Call the \"dpkg\" shell command." t nil)(autoload 'counsel-rpm "counsel" "Call the \"rpm\" shell command." t nil)(autoload 'counsel-file-jump "counsel" "Jump to a file below the current directory.
List all files within the current directory or any of its sub-directories.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)(autoload 'counsel-dired-jump "counsel" "Jump to a directory (see `dired-jump') below the current directory.
List all sub-directories within the current directory.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)(autoload 'counsel-ag "counsel" "Grep for a string in a root directory using `ag'.

By default, the root directory is the first directory containing
a .git subdirectory.

INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
EXTRA-AG-ARGS, if non-nil, is appended to `counsel-ag-base-command'.
AG-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.
CALLER is passed to `ivy-read'.

With a `\\[universal-argument]' prefix argument, prompt for INITIAL-DIRECTORY.
With a `\\[universal-argument] \\[universal-argument]' prefix argument, prompt additionally for EXTRA-AG-ARGS.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY EXTRA-AG-ARGS AG-PROMPT &key CALLER)" t nil)(autoload 'counsel-pt "counsel" "Grep for a string in the current directory using pt.
INITIAL-INPUT can be given as the initial minibuffer input.
This uses `counsel-ag' with `counsel-pt-base-command' instead of
`counsel-ag-base-command'.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-ack "counsel" "Grep for a string in the current directory using ack.
INITIAL-INPUT can be given as the initial minibuffer input.
This uses `counsel-ag' with `counsel-ack-base-command' replacing
`counsel-ag-base-command'.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-rg "counsel" "Grep for a string in the current directory using `rg'.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
EXTRA-RG-ARGS string, if non-nil, is appended to `counsel-rg-base-command'.
RG-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.

Example input with inclusion and exclusion file patterns:
    require i -- -g*.el

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY EXTRA-RG-ARGS RG-PROMPT)" t nil)(autoload 'counsel-grep "counsel" "Grep for a string in the file visited by the current buffer.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-grep-backward "counsel" "Grep for a string in the file visited by the current buffer going
backward similar to `swiper-backward'. When non-nil, INITIAL-INPUT is
the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-grep-or-swiper "counsel" "Call `swiper' for small buffers and `counsel-grep' for large ones.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-grep-or-swiper-backward "counsel" "Call `swiper-backward' for small buffers and `counsel-grep-backward' for
large ones.  When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-recoll "counsel" "Search for a string in the recoll database.
You'll be given a list of files that match.
Selecting a file will launch `swiper' for that file.
INITIAL-INPUT can be given as the initial minibuffer input.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel--org-get-tags "counsel" nil nil nil)(autoload 'counsel-org-tag "counsel" "Add or remove tags in `org-mode'." t nil)(autoload 'counsel-org-tag-agenda "counsel" "Set tags for the current agenda item." t nil)(defalias 'counsel-org-goto #'counsel-outline)(autoload 'counsel-org-goto-all "counsel" "Go to a different location in any org file." t nil)(autoload 'counsel-org-file "counsel" "Browse all attachments for current Org file." t nil)(autoload 'counsel-org-entity "counsel" "Complete Org entities using Ivy." t nil)(autoload 'counsel-org-capture "counsel" "Capture something." t nil)(autoload 'counsel-org-agenda-headlines "counsel" "Choose from headers of `org-mode' files in the agenda." t nil)(autoload 'counsel-org-link "counsel" "Insert a link to an headline with completion." t nil)(autoload 'counsel-mark-ring "counsel" "Browse `mark-ring' interactively.
Obeys `widen-automatically', which see." t nil)(autoload 'counsel-evil-marks "counsel" "Ivy replacement for `evil-show-marks'.
By default, this function respects `counsel-evil-marks-exclude-registers'.
When ARG is non-nil, display all active evil registers.

(fn &optional ARG)" t nil)(autoload 'counsel-package "counsel" "Install or delete packages.

Packages not currently installed are prefixed with \"+\", and
selecting one of these will try to install it.
Packages currently installed are prefixed with \"-\", and
selecting one of these will try to delete it.

Additional actions:\\<ivy-minibuffer-map>

  \\[ivy-dispatching-done] d: Describe package
  \\[ivy-dispatching-done] h: Visit package's homepage" t nil)(autoload 'counsel-tmm "counsel" "Text-mode emulation of looking and choosing from a menu bar." t nil)(autoload 'counsel-yank-pop "counsel" "Ivy replacement for `yank-pop'.
With a plain prefix argument (\\[universal-argument]),
temporarily toggle the value of `counsel-yank-pop-after-point'.
Any other value of ARG has the same meaning as in `yank-pop', but
`counsel-yank-pop-preselect-last' determines its default value.
See also `counsel-yank-pop-filter' for how to filter candidates.

Note: Duplicate elements of `kill-ring' are always deleted.

(fn &optional ARG)" t nil)(autoload 'counsel-register "counsel" "Interactively choose a register." t nil)(autoload 'counsel-evil-registers "counsel" "Ivy replacement for `evil-show-registers'." t nil)(autoload 'counsel-imenu "counsel" "Jump to a buffer position indexed by imenu." t nil)(autoload 'counsel-list-processes "counsel" "Offer completion for `process-list'.
The default action deletes the selected process.
An extra action allows to switch to the process buffer." t nil)(autoload 'counsel-minibuffer-history "counsel" "Browse minibuffer history." t nil)(autoload 'counsel-esh-history "counsel" "Browse Eshell history." t nil)(autoload 'counsel-shell-history "counsel" "Browse shell history." t nil)(autoload 'counsel-slime-repl-history "counsel" "Browse Slime REPL history." t nil)(autoload 'counsel-hydra-heads "counsel" "Call a head of the current/last hydra." t nil)(autoload 'counsel-semantic "counsel" "Jump to a semantic tag in the current buffer." t nil)(autoload 'counsel-semantic-or-imenu "counsel" nil t nil)(autoload 'counsel-outline "counsel" "Jump to an outline heading with completion." t nil)(autoload 'counsel-ibuffer "counsel" "Use ibuffer to switch to another buffer.
NAME specifies the name of the buffer (defaults to \"*Ibuffer*\").

(fn &optional NAME)" t nil)(autoload 'counsel-switch-to-shell-buffer "counsel" "Switch to a shell buffer, or create one." t nil)(autoload 'counsel-unicode-char "counsel" "Insert COUNT copies of a Unicode character at point.
COUNT defaults to 1.

(fn &optional COUNT)" t nil)(autoload 'counsel-colors-emacs "counsel" "Show a list of all supported colors for a particular frame.

You can insert or kill the name or hexadecimal RGB value of the
selected color." t nil)(autoload 'counsel-colors-web "counsel" "Show a list of all W3C web colors for use in CSS.

You can insert or kill the name or hexadecimal RGB value of the
selected color." t nil)(autoload 'counsel-fonts "counsel" "Show a list of all supported font families for a particular frame.

You can insert or kill the name of the selected font." t nil)(autoload 'counsel-kmacro "counsel" "Interactively choose and run a keyboard macro.

With prefix argument, run macro that many times.

Macros are run using the current value of `kmacro-counter-value'
and their respective counter format. Displayed next to each macro is
the counter's format and initial value.

One can use actions to copy the counter format or initial counter
value of a macro, using them for a new macro." t nil)(autoload 'counsel-geiser-doc-look-up-manual "counsel" "Search Scheme documentation." t nil)(autoload 'counsel-rhythmbox "counsel" "Choose a song from the Rhythmbox library to play or enqueue.

(fn &optional ARG)" t nil)(autoload 'counsel-linux-app "counsel" "Launch a Linux desktop application, similar to Alt-<F2>.
When ARG is non-nil, ignore NoDisplay property in *.desktop files.

(fn &optional ARG)" t nil)(autoload 'counsel-wmctrl "counsel" "Select a desktop window using wmctrl." t nil)(autoload 'counsel-switch-buffer "counsel" "Switch to another buffer.
Display a preview of the selected ivy completion candidate buffer
in the current window." t nil)(autoload 'counsel-switch-buffer-other-window "counsel" "Switch to another buffer in another window.
Display a preview of the selected ivy completion candidate buffer
in the current window." t nil)(autoload 'counsel-compile "counsel" "Call `compile' completing with smart suggestions, optionally for DIR.

Additional actions:

\\{counsel-compile-map}

(fn &optional DIR)" t nil)(autoload 'counsel-compile-env "counsel" "Update `counsel-compile-env' interactively." t nil)(autoload 'counsel-minor "counsel" "Enable or disable minor mode.

Disabled minor modes are prefixed with \"+\", and
selecting one of these will enable it.
Enabled minor modes are prefixed with \"-\", and
selecting one of these will enable it.

Additional actions:\\<ivy-minibuffer-map>

  \\[ivy-dispatching-done] d: Go to minor mode definition
  \\[ivy-dispatching-done] h: Describe minor mode" t nil)(autoload 'counsel-major "counsel" nil t nil)(autoload 'counsel-compilation-errors "counsel" "Compilation errors." t nil)(autoload 'counsel-flycheck "counsel" "Flycheck errors." t nil)(defvar counsel-mode nil "Non-nil if Counsel mode is enabled.
See the `counsel-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `counsel-mode'.")(autoload 'counsel-mode "counsel" "Toggle Counsel mode on or off.
Turn Counsel mode on if ARG is positive, off otherwise. Counsel
mode remaps built-in emacs functions that have counsel
replacements.

Local bindings (`counsel-mode-map'):
\\{counsel-mode-map}

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "counsel" '("counsel-" "ivy-function-called-at-point" "tmm-km-list")))(defvar amx-mode nil "Non-nil if Amx mode is enabled.
See the `amx-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `amx-mode'.")(autoload 'amx-mode "amx" "Use ido completion for M-x

If called interactively, enable Amx mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'amx "amx" "Read a command name and execute the command.

This is the main entry point for the Amx package, an alternative
to the normal \\[execute-extended-command] built into Emacs that
provides several extra features." t nil)(autoload 'amx-major-mode-commands "amx" "Like `amx', but limited to commands that are relevant to the active major mode." t nil)(autoload 'amx-initialize "amx" "Ensure that amx is properly initialized.

This function is normally idempotent, only having an effect the
first time it is called, so it is safe to call it at the
beginning of any function that expects amx to be initialized.
However, optional arg REINIT forces the initialization needs to
be re-run. Interactively, reinitialize when a prefix arg is
provided.

(fn &optional REINIT)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "amx" '("amx-")))(autoload 'counsel-projectile-find-file "counsel-projectile" "Jump to a file in the current project.

With a prefix ARG, invalidate the cache first.  If DWIM is
non-nil, use completion based on context.

(fn &optional ARG DWIM)" t nil)(autoload 'counsel-projectile-find-file-dwim "counsel-projectile" "Jump to a file in the current project using completion based on context.

With a prefix ARG, invalidate the cache first.

(fn &optional ARG)" t nil)(autoload 'counsel-projectile-find-dir "counsel-projectile" "Jump to a directory in the current project.

With a prefix ARG, invalidate the cache first.

(fn &optional ARG)" t nil)(autoload 'counsel-projectile-switch-to-buffer "counsel-projectile" "Jump to a buffer in the current project.

If `counsel-projectile-preview-buffers' is non-nil, display a
preview of the selected ivy completion candidate buffer as in
`counsel-switch-buffer', falling back to the current buffer or
optionally FROM-BUFFER.

(fn &optional FROM-BUFFER)" t nil)(autoload 'counsel-projectile-grep "counsel-projectile" "Search the current project with grep.

If inside a git project and `projectile-use-git-grep' is non-nil,
use git grep. Otherwise use grep recursively.

OPTIONS-OR-CMD, if non-nil, is a string containing either
additional options to be passed to grep, or an alternative git
grep command. It is read from the minibuffer if the function is
called with a `\\[universal-argument]' prefix argument.

(fn &optional OPTIONS-OR-CMD)" t nil)(autoload 'counsel-projectile-git-grep "counsel-projectile" "Search the current project with git grep.

CMD, if non-nil, is a string containing an alternative git grep
command. It is read from the minibuffer if the function is called
with a `\\[universal-argument]' prefix argument.

(fn &optional CMD)" t nil)(autoload 'counsel-projectile-ag "counsel-projectile" "Search the current project with ag.

OPTIONS, if non-nil, is a string containing additional options to
be passed to ag. It is read from the minibuffer if the function
is called with a `\\[universal-argument]' prefix argument.

(fn &optional OPTIONS)" t nil)(autoload 'counsel-projectile-rg "counsel-projectile" "Search the current project with rg.

OPTIONS, if non-nil, is a string containing additional options to
be passed to rg. It is read from the minibuffer if the function
is called with a `\\[universal-argument]' prefix argument.

(fn &optional OPTIONS)" t nil)(autoload 'counsel-projectile-org-capture "counsel-projectile" "Capture into the current project.

This command is a replacement for `org-capture' (or
`counsel-org-capture') offering project-specific capture
templates, in addition to the regular templates available from
`org-capture'. These project templates, which are \"expanded\"
relatively to the current project, are determined by the
variables `counsel-projectile-org-capture-templates' and
`counsel-projectile-org-capture-templates-contexts'. See the
former variable in particular for details.

Optional argument FROM-BUFFER specifies the buffer from which to
capture.

(fn &optional FROM-BUFFER)" t nil)(autoload 'counsel-projectile-org-agenda "counsel-projectile" "Open project agenda.

This command simply calls `org-agenda' after filtering out all
agenda files that do not belong to the current project.

Optional arguments ARG, KEYS, and RESTRICTION are as in
`org-agenda'.

(fn &optional ARG KEYS RESTRICTION)" t nil)(autoload 'counsel-projectile-switch-project "counsel-projectile" "Switch project.

Optional argument DEFAULT-ACTION is the key, function, name, or
index in the list `counsel-projectile-switch-project-action' (1
for the first action, etc) of the action to set as default.

(fn &optional DEFAULT-ACTION)" t nil)(autoload 'counsel-projectile "counsel-projectile" "Jump to a buffer or file in the current project.

With a prefix ARG, invalidate the cache first.

If `counsel-projectile-preview-buffers' is non-nil, display a
preview of the selected ivy completion candidate buffer as in
`counsel-switch-buffer', falling back to the current buffer or
optionally FROM-BUFFER.

If `counsel-switch-buffer-preview-virtual-buffers' is also
non-nil, also display a preview of the selected ivy completion
candidate non-visited file.

(fn &optional ARG FROM-BUFFER)" t nil)(defvar counsel-projectile-mode nil "Non-nil if Counsel-Projectile mode is enabled.
See the `counsel-projectile-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `counsel-projectile-mode'.")(autoload 'counsel-projectile-mode "counsel-projectile" "Toggle Counsel-Projectile mode on or off.

With a prefix argument ARG, enable the mode if ARG is positive,
and disable it otherwise.  If called from Lisp, enable the mode
if ARG is omitted or nil, and toggle it if ARG is `toggle'.

Counsel-Projectile mode turns on Projectile mode, thus enabling
all projectile key bindings, and adds the counsel-projectile key
bindings on top of them.

The counsel-projectile key bindings either remap existing
projectile commands to their counsel-projectile replacements or
bind keys to counsel-projectile commands that have no projectile
counterparts.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "counsel-projectile" '("counsel-projectile-")))(defvar ivy-rich-mode nil "Non-nil if Ivy-Rich mode is enabled.
See the `ivy-rich-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ivy-rich-mode'.")(autoload 'ivy-rich-mode "ivy-rich" "Toggle ivy-rich mode globally.

If called interactively, enable Ivy-Rich mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'ivy-rich-reload "ivy-rich" nil nil nil)(defvar ivy-rich-project-root-cache-mode nil "Non-nil if Ivy-Rich-Project-Root-Cache mode is enabled.
See the `ivy-rich-project-root-cache-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ivy-rich-project-root-cache-mode'.")(autoload 'ivy-rich-project-root-cache-mode "ivy-rich" "Toggle ivy-rich-root-cache-mode globally.

If called interactively, enable Ivy-Rich-Project-Root-Cache mode
if ARG is positive, and disable it if ARG is zero or negative.
If called from Lisp, also enable the mode if ARG is omitted or
nil, and toggle it if ARG is `toggle'; disable the mode
otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-rich" '("ivy-rich-")))(autoload 'wgrep-setup "wgrep" "Setup wgrep preparation." nil nil)(add-hook 'grep-setup-hook 'wgrep-setup)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "wgrep" '("wgrep-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-1337-theme" '("doom-1337")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-Iosvkem-theme" '("doom-Iosvkem")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-acario-dark-theme" '("doom-acario-dark")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-acario-light-theme" '("doom-acario-light")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-ayu-light-theme" '("doom-ayu-light")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-ayu-mirage-theme" '("doom-ayu-mirage")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-badger-theme" '("doom-badger")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-challenger-deep-theme" '("doom-challenger-deep")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-city-lights-theme" '("doom-city-lights")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-dark+-theme" '("doom-dark+")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-dracula-theme" '("doom-dracula")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-earl-grey-theme" '("doom-earl-grey")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-ephemeral-theme" '("doom-ephemeral")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-fairy-floss-theme" '("doom-fairy-floss")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-flatwhite-theme" '("doom-f")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-gruvbox-light-theme" '("doom-gruvbox-light")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-gruvbox-theme" '("doom-gruvbox")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-henna-theme" '("doom-henna")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-homage-black-theme" '("doom-homage-black")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-homage-white-theme" '("doom-homage-white")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-horizon-theme" '("doom-horizon")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-ir-black-theme" '("doom-ir-black")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-laserwave-theme" '("doom-laserwave")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-manegarm-theme" '("doom-manegarm")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-material-dark-theme" '("doom-material-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-material-theme" '("doom-material")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-meltbus-theme" '("doom-meltbus")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-miramare-theme" '("doom-miramare")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-molokai-theme" '("doom-molokai")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-monokai-classic-theme" '("doom-monokai-classic")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-monokai-machine-theme" '("doom-monokai-machine")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-monokai-octagon-theme" '("doom-monokai-octagon")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-monokai-pro-theme" '("doom-monokai-pro")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-monokai-ristretto-theme" '("doom-monokai-ristretto")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-monokai-spectrum-theme" '("doom-monokai-spectrum")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-moonlight-theme" '("doom-moonlight")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-nord-light-theme" '("doom-nord-light")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-nord-theme" '("doom-nord")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-nova-theme" '("doom-nova")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-oceanic-next-theme" '("doom-oceanic-next")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-old-hope-theme" '("doom-old-hope")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-one-light-theme" '("doom-one-light")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-one-theme" '("doom-one")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-opera-light-theme" '("doom-opera-light")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-opera-theme" '("doom-opera")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-outrun-electric-theme" '("doom-outrun-electric")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-palenight-theme" '("doom-palenight")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-peacock-theme" '("doom-peacock")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-plain-dark-theme" '("doom-plain-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-plain-theme" '("doom-plain")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-rouge-theme" '("doom-rouge")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-shades-of-purple-theme" '("doom-shades-of-purple")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-snazzy-theme" '("doom-snazzy")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-solarized-dark-high-contrast-theme" '("doom-solarized-dark-high-contrast")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-solarized-dark-theme" '("doom-solarized-dark")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-solarized-light-theme" '("doom-solarized-light")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-sourcerer-theme" '("doom-sourcerer")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-spacegrey-theme" '("doom-spacegrey")))(autoload 'doom-name-to-rgb "doom-themes" "Retrieves the hexidecimal string repesented the named COLOR (e.g. \"red\")
for FRAME (defaults to the current frame).

(fn COLOR)" nil nil)(autoload 'doom-blend "doom-themes" "Blend two colors (hexidecimal strings) together by a coefficient ALPHA (a
float between 0 and 1)

(fn COLOR1 COLOR2 ALPHA)" nil nil)(autoload 'doom-darken "doom-themes" "Darken a COLOR (a hexidecimal string) by a coefficient ALPHA (a float between
0 and 1).

(fn COLOR ALPHA)" nil nil)(autoload 'doom-lighten "doom-themes" "Brighten a COLOR (a hexidecimal string) by a coefficient ALPHA (a float
between 0 and 1).

(fn COLOR ALPHA)" nil nil)(autoload 'doom-color "doom-themes" "Retrieve a specific color named NAME (a symbol) from the current theme.

(fn NAME &optional TYPE)" nil nil)(autoload 'doom-ref "doom-themes" "TODO

(fn FACE PROP &optional CLASS)" nil nil)(autoload 'doom-themes-set-faces "doom-themes" "Customize THEME (a symbol) with FACES.

If THEME is nil, it applies to all themes you load. FACES is a list of Doom
theme face specs. These is a simplified spec. For example:

  (doom-themes-set-faces 'user
    '(default :background red :foreground blue)
    '(doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
    '(doom-modeline-buffer-file :inherit 'mode-line-buffer-id :weight 'bold)
    '(doom-modeline-buffer-path :inherit 'mode-line-emphasis :weight 'bold)
    '(doom-modeline-buffer-project-root :foreground green :weight 'bold))

(fn THEME &rest FACES)" nil nil)(function-put 'doom-themes-set-faces 'lisp-indent-function 'defun)(when (and (boundp 'custom-theme-load-path) "/home/jadench/.emacs.d/.local/straight/build-27.2/doom-themes/doom-themes-autoloads.el") (let* ((base (file-name-directory "/home/jadench/.emacs.d/.local/straight/build-27.2/doom-themes/doom-themes-autoloads.el")) (dir (expand-file-name "themes/" base))) (add-to-list 'custom-theme-load-path (or (and (file-directory-p dir) dir) base))))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-themes" '("def-doom-theme" "doom-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-themes-base" '("doom-themes-base-")))(autoload 'doom-themes-neotree-config "doom-themes-ext-neotree" "Install doom-themes' neotree configuration.

Includes an Atom-esque icon theme and highlighting based on filetype." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-themes-ext-neotree" '("doom-")))(autoload 'doom-themes-org-config "doom-themes-ext-org" "Load `doom-themes-ext-org'." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-themes-ext-org" '("doom-themes-")))(autoload 'doom-themes-treemacs-config "doom-themes-ext-treemacs" "Install doom-themes' treemacs configuration.

Includes an Atom-esque icon theme and highlighting based on filetype." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-themes-ext-treemacs" '("doom-themes-")))(autoload 'doom-themes-visual-bell-fn "doom-themes-ext-visual-bell" "Blink the mode-line red briefly. Set `ring-bell-function' to this to use it." nil nil)(autoload 'doom-themes-visual-bell-config "doom-themes-ext-visual-bell" "Enable flashing the mode-line on error." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-tokyo-night-theme" '("doom-tokyo-night")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-tomorrow-day-theme" '("doom-tomorrow-day")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-tomorrow-night-theme" '("doom-tomorrow-night")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-vibrant-theme" '("doom-vibrant")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-wilmersdorf-theme" '("doom-wilmersdorf")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-xcode-theme" '("doom-xcode")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-zenburn-theme" '("doom-zenburn")))(defface solaire-default-face '((t :inherit default)) "Alternative version of the `default' face." :group 'solaire-mode)(autoload 'solaire-mode "solaire-mode" "Make current buffer a different color so others can be grossly incandescent.

If called interactively, enable Solaire mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Remaps faces in `solaire-mode-remap-alist', then runs `solaire-mode-hook', where
additional mode-specific fixes may live. Lastly, adjusts the fringes for the
current frame.

(fn &optional ARG)" t nil)(put 'solaire-global-mode 'globalized-minor-mode t)(defvar solaire-global-mode nil "Non-nil if Solaire-Global mode is enabled.
See the `solaire-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `solaire-global-mode'.")(autoload 'solaire-global-mode "solaire-mode" "Toggle Solaire mode in all buffers.
With prefix ARG, enable Solaire-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Solaire mode is enabled in all buffers where
`turn-on-solaire-mode' would do it.
See `solaire-mode' for more information on Solaire mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-solaire-mode "solaire-mode" "Conditionally enable `solaire-mode' in the current buffer.

Does nothing if the current buffer doesn't satisfy the function in
`solaire-mode-real-buffer-fn'.

(fn &rest _)" t nil)(autoload 'turn-off-solaire-mode "solaire-mode" "Disable `solaire-mode' in the current buffer.

(fn &rest _)" t nil)(autoload 'solaire-mode-reset "solaire-mode" "Reset `solaire-mode' in all buffers where it is enabled.

Use this in case solaire-mode has caused some sort of problem, e.g. after
changing themes.  are more prelevant in Emacs 25 and 26, but far less so in 27+;
particularly where the fringe is concerned.

(fn &rest _)" t nil)(autoload 'solaire-mode-reset-buffer "solaire-mode" "Reset `solaire-mode' incurrent buffer.

See `solaire-mode-reset' for details." nil nil)(defun solaire-mode--prepare-for-theme-a (theme &rest _) "Prepare solaire-mode for THEME.
Meant to be used as a `load-theme' advice." (when (and (get theme 'theme-feature) (memq theme custom-enabled-themes)) (setq solaire-mode--supported-p (ignore-errors (let ((default1 (face-background 'default nil t)) (default2 (face-background 'solaire-default-face nil t))) (and default1 default2 (not (equal default1 default2))))) solaire-mode--swapped-p nil solaire-mode--theme theme) (when (bound-and-true-p solaire-global-mode) (if solaire-mode--supported-p (solaire-mode-swap-faces-maybe) (solaire-global-mode -1)))))(advice-add #'load-theme :after #'solaire-mode--prepare-for-theme-a)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "solaire-mode" '("solaire-mode-")))(autoload 'hl-todo-mode "hl-todo" "Highlight TODO and similar keywords in comments and strings.

If called interactively, enable Hl-Todo mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-hl-todo-mode 'globalized-minor-mode t)(defvar global-hl-todo-mode nil "Non-nil if Global Hl-Todo mode is enabled.
See the `global-hl-todo-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-hl-todo-mode'.")(autoload 'global-hl-todo-mode "hl-todo" "Toggle Hl-Todo mode in all buffers.
With prefix ARG, enable Global Hl-Todo mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Hl-Todo mode is enabled in all buffers where
`hl-todo--turn-on-mode-if-desired' would do it.
See `hl-todo-mode' for more information on Hl-Todo mode.

(fn &optional ARG)" t nil)(autoload 'hl-todo-next "hl-todo" "Jump to the next TODO or similar keyword.
The prefix argument ARG specifies how many keywords to move.
A negative argument means move backward that many keywords.

(fn ARG)" t nil)(autoload 'hl-todo-previous "hl-todo" "Jump to the previous TODO or similar keyword.
The prefix argument ARG specifies how many keywords to move.
A negative argument means move forward that many keywords.

(fn ARG)" t nil)(autoload 'hl-todo-occur "hl-todo" "Use `occur' to find all TODO or similar keywords.
This actually finds a superset of the highlighted keywords,
because it uses a regexp instead of a more sophisticated
matcher.  It also finds occurrences that are not within a
string or comment." t nil)(autoload 'hl-todo-insert "hl-todo" "Insert TODO or similar keyword.
If point is not inside a string or comment, then insert a new
comment.  If point is at the end of the line, then insert the
comment there, otherwise insert it as a new line before the
current line.

(fn KEYWORD)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hl-todo" '("hl-todo-")))(autoload 'highlight-indent-guides-auto-set-faces "highlight-indent-guides" "Automatically calculate indent guide faces.
If this feature is enabled, calculate reasonable values for the indent guide
colors based on the current theme's colorscheme, and set them appropriately.
This runs whenever a theme is loaded, but it can also be run interactively." t nil)(autoload 'highlight-indent-guides-mode "highlight-indent-guides" "Display indent guides in a buffer.

If called interactively, enable Highlight-Indent-Guides mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "highlight-indent-guides" '("highlight-indent-guides-")))(defvar minimap-mode nil "Non-nil if Minimap mode is enabled.
See the `minimap-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `minimap-mode'.")(autoload 'minimap-mode "minimap" "Toggle minimap mode.

If called interactively, enable Minimap mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "minimap" '("minimap-")))(autoload 'doom-modeline-init "doom-modeline" "Initialize doom mode-line." nil nil)(autoload 'doom-modeline-set-main-modeline "doom-modeline" "Set main mode-line.
If DEFAULT is non-nil, set the default mode-line for all buffers.

(fn &optional DEFAULT)" nil nil)(autoload 'doom-modeline-set-minimal-modeline "doom-modeline" "Set minimal mode-line." nil nil)(autoload 'doom-modeline-set-special-modeline "doom-modeline" "Set special mode-line." nil nil)(autoload 'doom-modeline-set-project-modeline "doom-modeline" "Set project mode-line." nil nil)(autoload 'doom-modeline-set-dashboard-modeline "doom-modeline" "Set dashboard mode-line." nil nil)(autoload 'doom-modeline-set-vcs-modeline "doom-modeline" "Set vcs mode-line." nil nil)(autoload 'doom-modeline-set-info-modeline "doom-modeline" "Set Info mode-line." nil nil)(autoload 'doom-modeline-set-package-modeline "doom-modeline" "Set package mode-line." nil nil)(autoload 'doom-modeline-set-media-modeline "doom-modeline" "Set media mode-line." nil nil)(autoload 'doom-modeline-set-message-modeline "doom-modeline" "Set message mode-line." nil nil)(autoload 'doom-modeline-set-pdf-modeline "doom-modeline" "Set pdf mode-line." nil nil)(autoload 'doom-modeline-set-org-src-modeline "doom-modeline" "Set org-src mode-line." nil nil)(autoload 'doom-modeline-set-helm-modeline "doom-modeline" "Set helm mode-line.

(fn &rest _)" nil nil)(autoload 'doom-modeline-set-timemachine-modeline "doom-modeline" "Set timemachine mode-line." nil nil)(defvar doom-modeline-mode nil "Non-nil if Doom-Modeline mode is enabled.
See the `doom-modeline-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `doom-modeline-mode'.")(autoload 'doom-modeline-mode "doom-modeline" "Toggle doom-modeline on or off.

If called interactively, enable Doom-Modeline mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-modeline" '("doom-modeline-mode-map")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-modeline-core" '("doom-modeline")))(autoload 'doom-modeline-env-setup-python "doom-modeline-env")(autoload 'doom-modeline-env-setup-ruby "doom-modeline-env")(autoload 'doom-modeline-env-setup-perl "doom-modeline-env")(autoload 'doom-modeline-env-setup-go "doom-modeline-env")(autoload 'doom-modeline-env-setup-elixir "doom-modeline-env")(autoload 'doom-modeline-env-setup-rust "doom-modeline-env")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-modeline-env" '("doom-modeline-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-modeline-segments" '("doom-modeline-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "shrink-path" '("shrink-path-")))(autoload 'anzu-mode "anzu" "minor-mode which display search information in mode-line.

If called interactively, enable Anzu mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-anzu-mode 'globalized-minor-mode t)(defvar global-anzu-mode nil "Non-nil if Global Anzu mode is enabled.
See the `global-anzu-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-anzu-mode'.")(autoload 'global-anzu-mode "anzu" "Toggle Anzu mode in all buffers.
With prefix ARG, enable Global Anzu mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Anzu mode is enabled in all buffers where
`anzu--turn-on' would do it.
See `anzu-mode' for more information on Anzu mode.

(fn &optional ARG)" t nil)(autoload 'anzu-query-replace-at-cursor "anzu" "Replace symbol at cursor with to-string." t nil)(autoload 'anzu-query-replace-at-cursor-thing "anzu" "Replace symbol at cursor within `anzu-replace-at-cursor-thing' area." t nil)(autoload 'anzu-query-replace "anzu" "anzu version of `query-replace'.

(fn ARG)" t nil)(autoload 'anzu-query-replace-regexp "anzu" "anzu version of `query-replace-regexp'.

(fn ARG)" t nil)(autoload 'anzu-replace-at-cursor-thing "anzu" "anzu-query-replace-at-cursor-thing without query." t nil)(autoload 'anzu-isearch-query-replace "anzu" "anzu version of `isearch-query-replace'.

(fn ARG)" t nil)(autoload 'anzu-isearch-query-replace-regexp "anzu" "anzu version of `isearch-query-replace-regexp'.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "anzu" '("anzu")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-anzu" '("evil-anzu-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-command-window" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-commands" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-common" '("bounds-of-evil-" "evil-" "forward-evil-")))(autoload 'evil-mode "evil" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-core" '("evil-" "turn-o")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-digraphs" '("evil-digraph")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-ex" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-integration" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-jumps" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-macros" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-maps" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-repeat" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-search" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-states" '("evil-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-types" '("evil-ex-get-optional-register-and-count")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-vars" '("evil-")))(autoload 'goto-last-change "goto-chg" "Go to the point where the last edit was made in the current buffer.
Repeat the command to go to the second last edit, etc.

To go back to more recent edit, the reverse of this command, use \\[goto-last-change-reverse]
or precede this command with \\[universal-argument] - (minus).

It does not go to the same point twice even if there has been many edits
there. I call the minimal distance between distinguishable edits \"span\".
Set variable `glc-default-span' to control how close is \"the same point\".
Default span is 8.
The span can be changed temporarily with \\[universal-argument] right before \\[goto-last-change]:
\\[universal-argument] <NUMBER> set current span to that number,
\\[universal-argument] (no number) multiplies span by 4, starting with default.
The so set span remains until it is changed again with \\[universal-argument], or the consecutive
repetition of this command is ended by any other command.

When span is zero (i.e. \\[universal-argument] 0) subsequent \\[goto-last-change] visits each and
every point of edit and a message shows what change was made there.
In this case it may go to the same point twice.

This command uses undo information. If undo is disabled, so is this command.
At times, when undo information becomes too large, the oldest information is
discarded. See variable `undo-limit'.

(fn ARG)" t nil)(autoload 'goto-last-change-reverse "goto-chg" "Go back to more recent changes after \\[goto-last-change] have been used.
See `goto-last-change' for use of prefix argument.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "goto-chg" '("glc-")))(defvar evil-goggles-mode nil "Non-nil if Evil-Goggles mode is enabled.
See the `evil-goggles-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-goggles-mode'.")(autoload 'evil-goggles-mode "evil-goggles" "evil-goggles global minor mode.

If called interactively, enable Evil-Goggles mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-goggles" '("evil-goggles-")))(autoload 'treemacs-version "treemacs" "Return the `treemacs-version'." t nil)(autoload 'treemacs "treemacs" "Initialise or toggle treemacs.
* If the treemacs window is visible hide it.
* If a treemacs buffer exists, but is not visible show it.
* If no treemacs buffer exists for the current frame create and show it.
* If the workspace is empty additionally ask for the root path of the first
  project to add." t nil)(autoload 'treemacs-find-file "treemacs" "Find and focus the current file in the treemacs window.
If the current buffer has visits no file or with a prefix ARG ask for the
file instead.
Will show/create a treemacs buffers if it is not visible/does not exist.
For the most part only useful when `treemacs-follow-mode' is not active.

(fn &optional ARG)" t nil)(autoload 'treemacs-find-tag "treemacs" "Find and move point to the tag at point in the treemacs view.
Most likely to be useful when `treemacs-tag-follow-mode' is not active.

Will ask to change the treemacs root if the file to find is not under the
root.  If no treemacs buffer exists it will be created with the current file's
containing directory as root.  Will do nothing if the current buffer is not
visiting a file or Emacs cannot find any tags for the current file." t nil)(autoload 'treemacs-select-window "treemacs" "Select the treemacs window if it is visible.
Bring it to the foreground if it is not visible.
Initialise a new treemacs buffer as calling `treemacs' would if there is no
treemacs buffer for this frame.
Jump back to the previously used window if point is already in treemacs." t nil)(autoload 'treemacs-show-changelog "treemacs" "Show the changelog of treemacs." t nil)(autoload 'treemacs-edit-workspaces "treemacs" "Edit your treemacs workspaces and projects as an `org-mode' file." t nil)(autoload 'treemacs-display-current-project-exclusively "treemacs" "Display the current project, and *only* the current project.
Like `treemacs-add-and-display-current-project' this will add the current
project to treemacs based on either projectile, the built-in project.el, or the
current working directory.

However the 'exclusive' part means that it will make the current project the
only project, all other projects *will be removed* from the current workspace." t nil)(autoload 'treemacs-add-and-display-current-project "treemacs" "Open treemacs and add the current project root to the workspace.
The project is determined first by projectile (if treemacs-projectile is
installed), then by project.el, then by the current working directory.

If the project is already registered with treemacs just move point to its root.
An error message is displayed if the current buffer is not part of any project." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs" '("treemacs-version")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-async" '("treemacs-")))(autoload 'treemacs-bookmark "treemacs-bookmarks" "Find a bookmark in treemacs.
Only bookmarks marking either a file or a directory are offered for selection.
Treemacs will try to find and focus the given bookmark's location, in a similar
fashion to `treemacs-find-file'.

With a prefix argument ARG treemacs will also open the bookmarked location.

(fn &optional ARG)" t nil)(autoload 'treemacs--bookmark-handler "treemacs-bookmarks" "Open Treemacs into a bookmark RECORD.

(fn RECORD)" nil nil)(autoload 'treemacs-add-bookmark "treemacs-bookmarks" "Add the current node to Emacs' list of bookmarks.
For file and directory nodes their absolute path is saved.  Tag nodes
additionally also save the tag's position.  A tag can only be bookmarked if the
treemacs node is pointing to a valid buffer position." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-bookmarks" '("treemacs--")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-compatibility" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-core-utils" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-customization" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-diagnostics" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-dom" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-extensions" '("treemacs-")))(autoload 'treemacs-delete-file "treemacs-file-management" "Delete node at point.
A delete action must always be confirmed.  Directories are deleted recursively.
By default files are deleted by moving them to the trash.  With a prefix ARG
they will instead be wiped irreversibly.

(fn &optional ARG)" t nil)(autoload 'treemacs-move-file "treemacs-file-management" "Move file (or directory) at point.
Destination may also be a filename, in which case the moved file will also
be renamed." t nil)(autoload 'treemacs-copy-file "treemacs-file-management" "Copy file (or directory) at point.
Destination may also be a filename, in which case the copied file will also
be renamed." t nil)(autoload 'treemacs-rename-file "treemacs-file-management" "Rename the currently selected node.
Buffers visiting the renamed file or visiting a file inside a renamed directory
and windows showing them will be reloaded.  The list of recent files will
likewise be updated." t nil)(autoload 'treemacs-create-file "treemacs-file-management" "Create a new file.
Enter first the directory to create the new file in, then the new file's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t nil)(autoload 'treemacs-create-dir "treemacs-file-management" "Create a new directory.
Enter first the directory to create the new dir in, then the new dir's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-file-management" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-filewatch-mode" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-follow-mode" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-fringe-indicator" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-header-line" '("treemacs-header-buttons-format")))(autoload 'treemacs-common-helpful-hydra "treemacs-hydras" "Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the most commonly used keybinds for treemacs.  For the more
advanced (probably rarely used keybinds) see `treemacs-advanced-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t nil)(autoload 'treemacs-advanced-helpful-hydra "treemacs-hydras" "Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the more advanced (rarely used) keybinds for treemacs.  For
the more commonly used keybinds see `treemacs-common-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-hydras" '("treemacs-helpful-hydra")))(autoload 'treemacs-resize-icons "treemacs-icons" "Resize the current theme's icons to the given SIZE.

If SIZE is 'nil' the icons are not resized and will retain their default size of
22 pixels.

There is only one size, the icons are square and the aspect ratio will be
preserved when resizing them therefore width and height are the same.

Resizing the icons only works if Emacs was built with ImageMagick support, or if
using Emacs >= 27.1,which has native image resizing support.  If this is not the
case this function will not have any effect.

Custom icons are not taken into account, only the size of treemacs' own icons
png are changed.

(fn SIZE)" t nil)(autoload 'treemacs-define-custom-icon "treemacs-icons" "Define a custom ICON for the current theme to use for FILE-EXTENSIONS.

Note that treemacs has a very loose definition of what constitutes a file
extension - it's either everything past the last period, or just the file's full
name if there is no period.  This makes it possible to match file names like
'.gitignore' and 'Makefile'.

Additionally FILE-EXTENSIONS are also not case sensitive and will be stored in a
down-cased state.

(fn ICON &rest FILE-EXTENSIONS)" nil nil)(autoload 'treemacs-define-custom-image-icon "treemacs-icons" "Same as `treemacs-define-custom-icon' but for image icons instead of strings.
FILE is the path to an icon image (and not the actual icon string).
FILE-EXTENSIONS are all the (not case-sensitive) file extensions the icon
should be used for.

(fn FILE &rest FILE-EXTENSIONS)" nil nil)(autoload 'treemacs-map-icons-with-auto-mode-alist "treemacs-icons" "Remaps icons for EXTENSIONS according to `auto-mode-alist'.
EXTENSIONS should be a list of file extensions such that they match the regex
stored in `auto-mode-alist', for example '(\".cc\").
MODE-ICON-ALIST is an alist that maps which mode from `auto-mode-alist' should
be assigned which treemacs icon, for example
'((c-mode . treemacs-icon-c)
  (c++-mode . treemacs-icon-cpp))

(fn EXTENSIONS MODE-ICON-ALIST)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-icons" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-interface" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-logging" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-macros" '("treemacs-")))(autoload 'treemacs-mode "treemacs-mode" "A major mode for displaying the file system in a tree layout.

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-mode" '("treemacs-")))(autoload 'treemacs-leftclick-action "treemacs-mouse-interface" "Move focus to the clicked line.
Must be bound to a mouse click, or EVENT will not be supplied.

(fn EVENT)" t nil)(autoload 'treemacs-doubleclick-action "treemacs-mouse-interface" "Run the appropriate double-click action for the current node.
In the default configuration this means to expand/collapse directories and open
files and tags in the most recently used window.

This function's exact configuration is stored in
`treemacs-doubleclick-actions-config'.

Must be bound to a mouse double click to properly handle a click EVENT.

(fn EVENT)" t nil)(autoload 'treemacs-single-click-expand-action "treemacs-mouse-interface" "A modified single-leftclick action that expands the clicked nodes.
Can be bound to <mouse1> if you prefer to expand nodes with a single click
instead of a double click.  Either way it must be bound to a mouse click, or
EVENT will not be supplied.

Clicking on icons will expand a file's tags, just like
`treemacs-leftclick-action'.

(fn EVENT)" t nil)(autoload 'treemacs-dragleftclick-action "treemacs-mouse-interface" "Drag a file/dir node to be opened in a window.
Must be bound to a mouse click, or EVENT will not be supplied.

(fn EVENT)" t nil)(autoload 'treemacs-define-doubleclick-action "treemacs-mouse-interface" "Define the behaviour of `treemacs-doubleclick-action'.
Determines that a button with a given STATE should lead to the execution of
ACTION.

The list of possible states can be found in `treemacs-valid-button-states'.
ACTION should be one of the `treemacs-visit-node-*' commands.

(fn STATE ACTION)" nil nil)(autoload 'treemacs-node-buffer-and-position "treemacs-mouse-interface" "Return source buffer or list of buffer and position for the current node.
This information can be used for future display.  Stay in the selected window
and ignore any prefix argument.

(fn &optional _)" t nil)(autoload 'treemacs-rightclick-menu "treemacs-mouse-interface" "Show a contextual right click menu based on click EVENT.

(fn EVENT)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-mouse-interface" '("treemacs--")))(defvar treemacs-peek-mode nil "Non-nil if Treemacs-Peek mode is enabled.
See the `treemacs-peek-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-peek-mode'.")(autoload 'treemacs-peek-mode "treemacs-peek-mode" "Minor mode that allows you to peek at buffers before deciding to open them.

If called interactively, enable Treemacs-Peek mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

While the mode is active treemacs will automatically display the file at point,
without leving the treemacs window.

Peeking will stop when you leave the treemacs window, be it through a command
like `treemacs-RET-action' or some other window selection change.

Files' buffers that have been opened for peeking will be cleaned up if they did
not exist before peeking started.

The peeked window can be scrolled using
`treemacs-next/previous-line-other-window' and
`treemacs-next/previous-page-other-window'

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-peek-mode" '("treemacs--")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-persistence" '("treemacs-")))(defvar treemacs-project-follow-mode nil "Non-nil if Treemacs-Project-Follow mode is enabled.
See the `treemacs-project-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-project-follow-mode'.")(autoload 'treemacs-project-follow-mode "treemacs-project-follow-mode" "Toggle `treemacs-only-current-project-mode'.

If called interactively, enable Treemacs-Project-Follow mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This is a minor mode meant for those who do not care about treemacs' workspace
features, or its preference to work with multiple projects simultaneously.  When
enabled it will function as an automated version of
`treemacs-display-current-project-exclusively', making sure that, after a small
idle delay, the current project, and *only* the current project, is displayed in
treemacs.

The project detection is based on the current buffer, and will try to determine
the project using the following methods, in the order they are listed:

- the current projectile.el project, if `treemacs-projectile' is installed
- the current project.el project
- the current `default-directory'

The update will only happen when treemacs is in the foreground, meaning a
treemacs window must exist in the current scope.

This mode requires at least Emacs version 27 since it relies on
`window-buffer-change-functions' and `window-selection-change-functions'.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-project-follow-mode" '("treemacs--")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-rendering" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-scope" '("treemacs-")))(autoload 'treemacs--flatten&sort-imenu-index "treemacs-tag-follow-mode" "Flatten current file's imenu index and sort it by tag position.
The tags are sorted into the order in which they appear, regardless of section
or nesting depth." nil nil)(defvar treemacs-tag-follow-mode nil "Non-nil if Treemacs-Tag-Follow mode is enabled.
See the `treemacs-tag-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-tag-follow-mode'.")(autoload 'treemacs-tag-follow-mode "treemacs-tag-follow-mode" "Toggle `treemacs-tag-follow-mode'.

If called interactively, enable Treemacs-Tag-Follow mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This acts as more fine-grained alternative to `treemacs-follow-mode' and will
thus disable `treemacs-follow-mode' on activation.  When enabled treemacs will
focus not only the file of the current buffer, but also the tag at point.

The follow action is attached to Emacs' idle timer and will run
`treemacs-tag-follow-delay' seconds of idle time.  The delay value is not an
integer, meaning it accepts floating point values like 1.5.

Every time a tag is followed a re--scan of the imenu index is forced by
temporarily setting `imenu-auto-rescan' to t (though a cache is applied as long
as the buffer is unmodified).  This is necessary to assure that creation or
deletion of tags does not lead to errors and guarantees an always up-to-date tag
view.

Note that in order to move to a tag in treemacs the treemacs buffer's window
needs to be temporarily selected, which will reset blink-cursor-mode's timer if
it is enabled.  This will result in the cursor blinking seemingly pausing for a
short time and giving the appearance of the tag follow action lasting much
longer than it really does.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-tag-follow-mode" '("treemacs--")))(autoload 'treemacs--expand-file-node "treemacs-tags" "Open tag items for file BTN.
Recursively open all tags below BTN when RECURSIVE is non-nil.

(fn BTN &optional RECURSIVE)" nil nil)(autoload 'treemacs--collapse-file-node "treemacs-tags" "Close node given by BTN.
Remove all open tag entries under BTN when RECURSIVE.

(fn BTN &optional RECURSIVE)" nil nil)(autoload 'treemacs--visit-or-expand/collapse-tag-node "treemacs-tags" "Visit tag section BTN if possible, expand or collapse it otherwise.
Pass prefix ARG on to either visit or toggle action.

FIND-WINDOW is a special provision depending on this function's invocation
context and decides whether to find the window to display in (if the tag is
visited instead of the node being expanded).

On the one hand it can be called based on `treemacs-RET-actions-config' (or
TAB).  The functions in these configs are expected to find the windows they need
to display in themselves, so FIND-WINDOW must be t. On the other hand this
function is also called from the top level vist-node functions like
`treemacs-visit-node-vertical-split' which delegates to the
`treemacs--execute-button-action' macro which includes the determination of
the display window.

(fn BTN ARG FIND-WINDOW)" nil nil)(autoload 'treemacs--expand-tag-node "treemacs-tags" "Open tags node items for BTN.
Open all tag section under BTN when call is RECURSIVE.

(fn BTN &optional RECURSIVE)" nil nil)(autoload 'treemacs--collapse-tag-node "treemacs-tags" "Close tags node at BTN.
Remove all open tag entries under BTN when RECURSIVE.

(fn BTN &optional RECURSIVE)" nil nil)(autoload 'treemacs--goto-tag "treemacs-tags" "Go to the tag at BTN.

(fn BTN)" nil nil)(autoload 'treemacs--create-imenu-index-function "treemacs-tags" "The `imenu-create-index-function' for treemacs buffers." nil nil)(function-put 'treemacs--create-imenu-index-function 'side-effect-free 't)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-tags" '("treemacs--")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-themes" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-visuals" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-workspaces" '("treemacs-")))(autoload 'ace-select-window "ace-window" "Ace select window." t nil)(autoload 'ace-delete-window "ace-window" "Ace delete window." t nil)(autoload 'ace-swap-window "ace-window" "Ace swap window." t nil)(autoload 'ace-delete-other-windows "ace-window" "Ace delete other windows." t nil)(autoload 'ace-display-buffer "ace-window" "Make `display-buffer' and `pop-to-buffer' select using `ace-window'.
See sample config for `display-buffer-base-action' and `display-buffer-alist':
https://github.com/abo-abo/ace-window/wiki/display-buffer.

(fn BUFFER ALIST)" nil nil)(autoload 'ace-window "ace-window" "Select a window.
Perform an action based on ARG described below.

By default, behaves like extended `other-window'.
See `aw-scope' which extends it to work with frames.

Prefixed with one \\[universal-argument], does a swap between the
selected window and the current window, so that the selected
buffer moves to current window (and current buffer moves to
selected window).

Prefixed with two \\[universal-argument]'s, deletes the selected
window.

(fn ARG)" t nil)(defvar ace-window-display-mode nil "Non-nil if Ace-Window-Display mode is enabled.
See the `ace-window-display-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ace-window-display-mode'.")(autoload 'ace-window-display-mode "ace-window" "Minor mode for showing the ace window key in the mode line.

If called interactively, enable Ace-Window-Display mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ace-window" '("ace-window-mode" "aw-")))(autoload 'pfuture-new "pfuture" "Create a new future process for command CMD.
Any arguments after the command are interpreted as arguments to the command.
This will return a process object with additional 'stderr and 'stdout
properties, which can be read via (process-get process 'stdout) and
(process-get process 'stderr) or alternatively with
(pfuture-result process) or (pfuture-stderr process).

Note that CMD must be a *sequence* of strings, meaning
this is wrong: (pfuture-new \"git status\")
this is right: (pfuture-new \"git\" \"status\")

(fn &rest CMD)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pfuture" '("pfuture-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ht" 'nil))(autoload 'cfrs-read "cfrs" "Read a string using a pos-frame with given PROMPT and INITIAL-INPUT.

(fn PROMPT &optional INITIAL-INPUT)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cfrs" '("cfrs-")))(autoload 'posframe-workable-p "posframe" "Test posframe workable status." nil nil)(autoload 'posframe-show "posframe" "Pop up a posframe to show STRING at POSITION.

 (1) POSITION

POSITION can be:
1. An integer, meaning point position.
2. A cons of two integers, meaning absolute X and Y coordinates.
3. Other type, in which case the corresponding POSHANDLER should be
   provided.

 (2) POSHANDLER

POSHANDLER is a function of one argument returning an actual
position.  Its argument is a plist of the following form:

  (:position xxx
   :poshandler xxx
   :font-height xxx
   :font-width xxx
   :posframe xxx
   :posframe-width xxx
   :posframe-height xxx
   :posframe-buffer xxx
   :parent-frame xxx
   :parent-window-left xxx
   :parent-window-top xxx
   :parent-frame-width xxx
   :parent-frame-height xxx
   :parent-window xxx
   :parent-window-width  xxx
   :parent-window-height xxx
   :mouse-x xxx
   ;mouse-y xxx
   :minibuffer-height xxx
   :mode-line-height  xxx
   :header-line-height xxx
   :tab-line-height xxx
   :x-pixel-offset xxx
   :y-pixel-offset xxx)

By default, poshandler is auto-selected based on the type of POSITION,
but the selection can be overridden using the POSHANDLER argument.

The names of poshandler functions are like:

   `posframe-poshandler-p0.5p0-to-w0.5p1'

which mean align posframe(0.5, 0) to a position(a, b)

1. a = x of window(0.5, 0)
2. b = y of point(1, 1)

    posframe(p), frame(f), window(w), point(p), mouse(m)

         (0,0)      (0.5,0)      (1,0)
          +------------+-----------+
          |                        |
          |                        |
          |                        |
 (0, 0.5) +                        + (1, 0.5)
          |                        |
          |                        |
          |                        |
          +------------+-----------+
         (0,1)      (0.5,1)      (1,1)

The alias of builtin poshandler functions are listed below:

1.  `posframe-poshandler-frame-center'
2.  `posframe-poshandler-frame-top-center'
3.  `posframe-poshandler-frame-top-left-corner'
4.  `posframe-poshandler-frame-top-right-corner'
5.  `posframe-poshandler-frame-bottom-center'
6.  `posframe-poshandler-frame-bottom-left-corner'
7.  `posframe-poshandler-frame-bottom-right-corner'
8.  `posframe-poshandler-window-center'
9.  `posframe-poshandler-window-top-center'
10. `posframe-poshandler-window-top-left-corner'
11. `posframe-poshandler-window-top-right-corner'
12. `posframe-poshandler-window-bottom-center'
13. `posframe-poshandler-window-bottom-left-corner'
14. `posframe-poshandler-window-bottom-right-corner'
15. `posframe-poshandler-point-top-left-corner'
16. `posframe-poshandler-point-bottom-left-corner'
17. `posframe-poshandler-point-bottom-left-corner-upward'
18. `posframe-poshandler-point-window-center'

by the way, poshandler can be used by other packages easily with
the help of function `posframe-poshandler-argbuilder'.  like:

   (let* ((info (posframe-poshandler-argbuilder *MY-CHILD-FRAME*))
          (posn (posframe-poshandler-window-center
                 `(:posframe-width 800 :posframe-height 400 ,@info))))
     `((left . ,(car posn))
       (top . ,(cdr posn))))

 (3) POSHANDLER-EXTRA-INFO

POSHANDLER-EXTRA-INFO is a plist, which will prepend to the
argument of poshandler function: 'info', it will *OVERRIDE* the
exist key in 'info'.

 (4) BUFFER-OR-NAME

This posframe's buffer is BUFFER-OR-NAME, which can be a buffer
or a name of a (possibly nonexistent) buffer.

buffer name can prefix with space, for example ' *mybuffer*', so
the buffer name will hide for ibuffer and `list-buffers'.

 (5) NO-PROPERTIES

If NO-PROPERTIES is non-nil, The STRING's properties will
be removed before being shown in posframe.

 (6) HEIGHT, MAX-HEIGHT, MIN-HEIGHT, WIDTH, MAX-WIDTH and MIN-WIDTH

These arguments are specified in the canonical character width
and height of posframe, more details can be found in docstring of
function `fit-frame-to-buffer',

 (7) LEFT-FRINGE and RIGHT-FRINGE

If LEFT-FRINGE or RIGHT-FRINGE is a number, left fringe or
right fringe with be shown with the specified width.

 (8) BORDER-WIDTH, BORDER-COLOR, INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR

By default, posframe shows no borders, but users can specify
borders by setting BORDER-WIDTH to a positive number.  Border
color can be specified by BORDER-COLOR.

INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR are same as
BORDER-WIDTH and BORDER-COLOR, but do not suggest to use for the
reason:

   Add distinct controls for child frames' borders (Bug#45620)
   http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=ff7b1a133bfa7f2614650f8551824ffaef13fadc

 (9) FONT, FOREGROUND-COLOR and BACKGROUND-COLOR

Posframe's font as well as foreground and background colors are
derived from the current frame by default, but can be overridden
using the FONT, FOREGROUND-COLOR and BACKGROUND-COLOR arguments,
respectively.

 (10) RESPECT-HEADER-LINE and RESPECT-MODE-LINE

By default, posframe will display no header-line, mode-line and
tab-line.  In case a header-line, mode-line or tab-line is
desired, users can set RESPECT-HEADER-LINE and RESPECT-MODE-LINE
to t.

 (11) INITIALIZE

INITIALIZE is a function with no argument.  It will run when
posframe buffer is first selected with `with-current-buffer'
in `posframe-show', and only run once (for performance reasons).

 (12) LINES-TRUNCATE

If LINES-TRUNCATE is non-nil, then lines will truncate in the
posframe instead of wrap.

 (13) OVERRIDE-PARAMETERS

OVERRIDE-PARAMETERS is very powful, *all* the valid frame parameters
used by posframe's frame can be overridden by it.

NOTE: some `posframe-show' arguments are not frame parameters, so they
can not be overrided by this argument.

 (14) TIMEOUT

TIMEOUT can specify the number of seconds after which the posframe
will auto-hide.

 (15) REFRESH

If REFRESH is a number, posframe's frame-size will be re-adjusted
every REFRESH seconds.

 (16) ACCEPT-FOCUS

When ACCEPT-FOCUS is non-nil, posframe will accept focus.
be careful, you may face some bugs when set it to non-nil.

 (17) HIDEHANDLER

HIDEHANDLER is a function, when it return t, posframe will be
hide, this function has a plist argument:

  (:posframe-buffer xxx
   :posframe-parent-buffer xxx)

The builtin hidehandler functions are listed below:

1. `posframe-hidehandler-when-buffer-switch'

 (18) REFPOSHANDLER

REFPOSHANDLER is a function, a reference position (most is
top-left of current frame) will be returned when call this
function.

when it is nil or it return nil, child-frame feature will be used
and reference position will be deal with in Emacs.

The user case I know at the moment is let ivy-posframe work well
in EXWM environment (let posframe show on the other appliction
window).

         DO NOT USE UNLESS NECESSARY!!!

An example parent frame poshandler function is:

1. `posframe-refposhandler-xwininfo'

 (19) Others

You can use `posframe-delete-all' to delete all posframes.

(fn BUFFER-OR-NAME &key STRING POSITION POSHANDLER POSHANDLER-EXTRA-INFO WIDTH HEIGHT MAX-WIDTH MAX-HEIGHT MIN-WIDTH MIN-HEIGHT X-PIXEL-OFFSET Y-PIXEL-OFFSET LEFT-FRINGE RIGHT-FRINGE BORDER-WIDTH BORDER-COLOR INTERNAL-BORDER-WIDTH INTERNAL-BORDER-COLOR FONT FOREGROUND-COLOR BACKGROUND-COLOR RESPECT-HEADER-LINE RESPECT-MODE-LINE INITIALIZE NO-PROPERTIES KEEP-RATIO LINES-TRUNCATE OVERRIDE-PARAMETERS TIMEOUT REFRESH ACCEPT-FOCUS HIDEHANDLER REFPOSHANDLER &allow-other-keys)" nil nil)(autoload 'posframe-hide-all "posframe" "Hide all posframe frames." t nil)(autoload 'posframe-delete-all "posframe" "Delete all posframe frames and buffers." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "posframe" '("posframe-")))(autoload 'posframe-benchmark "posframe-benchmark" "Benchmark tool for posframe." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "posframe-benchmark" '("posframe-benchmark-alist")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-evil" '("treemacs-evil--")))(autoload 'treemacs-projectile "treemacs-projectile" "Add one of `projectile-known-projects' to the treemacs workspace.
With a prefix ARG was for the name of the project instead of using the name of
the project's root directory.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-projectile" '("treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-magit" '("treemacs-magit--")))(autoload 'git-rebase-current-line "git-rebase" "Parse current line into a `git-rebase-action' instance.
If the current line isn't recognized as a rebase line, an
instance with all nil values is returned." nil nil)(autoload 'git-rebase-mode "git-rebase" "Major mode for editing of a Git rebase file.

Rebase files are generated when you run 'git rebase -i' or run
`magit-interactive-rebase'.  They describe how Git should perform
the rebase.  See the documentation for git-rebase (e.g., by
running 'man git-rebase' at the command line) for details.

(fn)" t nil)(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-rebase" '("git-rebase-")))(define-obsolete-variable-alias 'global-magit-file-mode 'magit-define-global-key-bindings "Magit 3.0.0")(defvar magit-define-global-key-bindings t "Whether to bind some Magit commands in the global keymap.

If this variable is non-nil, then the following bindings may
be added to the global keymap.  The default is t.

key             binding
---             -------
C-x g           magit-status
C-x M-g         magit-dispatch
C-c M-g         magit-file-dispatch

These bindings may be added when `after-init-hook' is run.
Each binding is added if and only if at that time no other key
is bound to the same command and no other command is bound to
the same key.  In other words we try to avoid adding bindings
that are unnecessary, as well as bindings that conflict with
other bindings.

Adding the above bindings is delayed until `after-init-hook'
is called to allow users to set the variable anywhere in their
init file (without having to make sure to do so before `magit'
is loaded or autoloaded) and to increase the likelihood that
all the potentially conflicting user bindings have already
been added.

To set this variable use either `setq' or the Custom interface.
Do not use the function `customize-set-variable' because doing
that would cause Magit to be loaded immediately when that form
is evaluated (this differs from `custom-set-variables', which
doesn't load the libraries that define the customized variables).

Setting this variable to nil has no effect if that is done after
the key bindings have already been added.

We recommend that you bind \"C-c g\" instead of \"C-c M-g\" to
`magit-file-dispatch'.  The former is a much better binding
but the \"C-c <letter>\" namespace is strictly reserved for
users; preventing Magit from using it by default.

Also see info node `(magit)Commands for Buffers Visiting Files'.")(defun magit-maybe-define-global-key-bindings nil (when magit-define-global-key-bindings (let ((map (current-global-map))) (dolist (elt '(("C-x g" . magit-status) ("C-x M-g" . magit-dispatch) ("C-c M-g" . magit-file-dispatch))) (let ((key (kbd (car elt))) (def (cdr elt))) (unless (or (lookup-key map key) (where-is-internal def (make-sparse-keymap) t)) (define-key map key def)))))))(if after-init-time (magit-maybe-define-global-key-bindings) (add-hook 'after-init-hook 'magit-maybe-define-global-key-bindings t))(autoload 'magit-dispatch "magit" nil t)(autoload 'magit-info "magit" "Show Magit's Info manual." t nil)(autoload 'magit-run "magit" nil t)(autoload 'magit-git-command "magit" "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

With a prefix argument COMMAND is run in the top-level directory
of the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t nil)(autoload 'magit-git-command-topdir "magit" "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

COMMAND is run in the top-level directory of the current
working tree.

(fn COMMAND)" t nil)(autoload 'magit-shell-command "magit" "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  With a
prefix argument COMMAND is run in the top-level directory of
the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t nil)(autoload 'magit-shell-command-topdir "magit" "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  COMMAND
is run in the top-level directory of the current working tree.

(fn COMMAND)" t nil)(autoload 'magit-version "magit" "Return the version of Magit currently in use.
If optional argument PRINT-DEST is non-nil, output
stream (interactively, the echo area, or the current buffer with
a prefix argument), also print the used versions of Magit, Git,
and Emacs to it.

(fn &optional PRINT-DEST)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit" '("magit-")))(autoload 'magit-stage-file "magit-apply" "Stage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be staged.  Otherwise stage the file at point without
requiring confirmation.

(fn FILE)" t nil)(autoload 'magit-stage-modified "magit-apply" "Stage all changes to files modified in the worktree.
Stage all new content of tracked files and remove tracked files
that no longer exist in the working tree from the index also.
With a prefix argument also stage previously untracked (but not
ignored) files.

(fn &optional ALL)" t nil)(autoload 'magit-unstage-file "magit-apply" "Unstage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be unstaged.  Otherwise unstage the file at point
without requiring confirmation.

(fn FILE)" t nil)(autoload 'magit-unstage-all "magit-apply" "Remove all changes from the staging area." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-apply" '("magit-")))(put 'magit-auto-revert-mode 'globalized-minor-mode t)(defvar magit-auto-revert-mode (not (or global-auto-revert-mode noninteractive)) "Non-nil if Magit-Auto-Revert mode is enabled.
See the `magit-auto-revert-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-auto-revert-mode'.")(autoload 'magit-auto-revert-mode "magit-autorevert" "Toggle Auto-Revert mode in all buffers.
With prefix ARG, enable Magit-Auto-Revert mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Auto-Revert mode is enabled in all buffers where
`magit-turn-on-auto-revert-mode-if-desired' would do it.
See `auto-revert-mode' for more information on Auto-Revert mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-autorevert" '("auto-revert-buffer" "magit-")))(autoload 'magit-bisect "magit-bisect" nil t)(autoload 'magit-bisect-start "magit-bisect" "Start a bisect session.

Bisecting a bug means to find the commit that introduced it.
This command starts such a bisect session by asking for a known
good and a known bad commit.  To move the session forward use the
other actions from the bisect transient command (\\<magit-status-mode-map>\\[magit-bisect]).

(fn BAD GOOD ARGS)" t nil)(autoload 'magit-bisect-reset "magit-bisect" "After bisecting, cleanup bisection state and return to original `HEAD'." t nil)(autoload 'magit-bisect-good "magit-bisect" "While bisecting, mark the current commit as good.
Use this after you have asserted that the commit does not contain
the bug in question." t nil)(autoload 'magit-bisect-bad "magit-bisect" "While bisecting, mark the current commit as bad.
Use this after you have asserted that the commit does contain the
bug in question." t nil)(autoload 'magit-bisect-mark "magit-bisect" "While bisecting, mark the current commit with a bisect term.
During a bisect using alternate terms, commits can still be
marked with `magit-bisect-good' and `magit-bisect-bad', as those
commands map to the correct term (\"good\" to --term-old's value
and \"bad\" to --term-new's).  However, in some cases, it can be
difficult to keep that mapping straight in your head; this
command provides an interface that exposes the underlying terms." t nil)(autoload 'magit-bisect-skip "magit-bisect" "While bisecting, skip the current commit.
Use this if for some reason the current commit is not a good one
to test.  This command lets Git choose a different one." t nil)(autoload 'magit-bisect-run "magit-bisect" "Bisect automatically by running commands after each step.

Unlike `git bisect run' this can be used before bisecting has
begun.  In that case it behaves like `git bisect start; git
bisect run'.

(fn CMDLINE &optional BAD GOOD ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-bisect" '("magit-")))(autoload 'magit-blame-echo "magit-blame" nil t)(autoload 'magit-blame-addition "magit-blame" nil t)(autoload 'magit-blame-removal "magit-blame" nil t)(autoload 'magit-blame-reverse "magit-blame" nil t)(autoload 'magit-blame "magit-blame" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-blame" '("magit-")))(autoload 'magit--handle-bookmark "magit-bookmark" "Open a bookmark created by `magit--make-bookmark'.
Call the `magit-*-setup-buffer' function of the the major-mode
with the variables' values as arguments, which were recorded by
`magit--make-bookmark'.  Ignore `magit-display-buffer-function'.

(fn BOOKMARK)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-bookmark" '("magit--make-bookmark")))(autoload 'magit-branch "magit" nil t)(autoload 'magit-checkout "magit-branch" "Checkout REVISION, updating the index and the working tree.
If REVISION is a local branch, then that becomes the current
branch.  If it is something else, then `HEAD' becomes detached.
Checkout fails if the working tree or the staging area contain
changes.

(git checkout REVISION).

(fn REVISION &optional ARGS)" t nil)(autoload 'magit-branch-create "magit-branch" "Create BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT)" t nil)(autoload 'magit-branch-and-checkout "magit-branch" "Create and checkout BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT &optional ARGS)" t nil)(autoload 'magit-branch-or-checkout "magit-branch" "Hybrid between `magit-checkout' and `magit-branch-and-checkout'.

Ask the user for an existing branch or revision.  If the user
input actually can be resolved as a branch or revision, then
check that out, just like `magit-checkout' would.

Otherwise create and checkout a new branch using the input as
its name.  Before doing so read the starting-point for the new
branch.  This is similar to what `magit-branch-and-checkout'
does.

(fn ARG &optional START-POINT)" t nil)(autoload 'magit-branch-checkout "magit-branch" "Checkout an existing or new local branch.

Read a branch name from the user offering all local branches and
a subset of remote branches as candidates.  Omit remote branches
for which a local branch by the same name exists from the list
of candidates.  The user can also enter a completely new branch
name.

- If the user selects an existing local branch, then check that
  out.

- If the user selects a remote branch, then create and checkout
  a new local branch with the same name.  Configure the selected
  remote branch as push target.

- If the user enters a new branch name, then create and check
  that out, after also reading the starting-point from the user.

In the latter two cases the upstream is also set.  Whether it is
set to the chosen START-POINT or something else depends on the
value of `magit-branch-adjust-remote-upstream-alist', just like
when using `magit-branch-and-checkout'.

(fn BRANCH &optional START-POINT)" t nil)(autoload 'magit-branch-orphan "magit-branch" "Create and checkout an orphan BRANCH with contents from revision START-POINT.

(fn BRANCH START-POINT)" t nil)(autoload 'magit-branch-spinout "magit-branch" "Create new branch from the unpushed commits.
Like `magit-branch-spinoff' but remain on the current branch.
If there are any uncommitted changes, then behave exactly like
`magit-branch-spinoff'.

(fn BRANCH &optional FROM)" t nil)(autoload 'magit-branch-spinoff "magit-branch" "Create new branch from the unpushed commits.

Create and checkout a new branch starting at and tracking the
current branch.  That branch in turn is reset to the last commit
it shares with its upstream.  If the current branch has no
upstream or no unpushed commits, then the new branch is created
anyway and the previously current branch is not touched.

This is useful to create a feature branch after work has already
began on the old branch (likely but not necessarily \"master\").

If the current branch is a member of the value of option
`magit-branch-prefer-remote-upstream' (which see), then the
current branch will be used as the starting point as usual, but
the upstream of the starting-point may be used as the upstream
of the new branch, instead of the starting-point itself.

If optional FROM is non-nil, then the source branch is reset
to `FROM~', instead of to the last commit it shares with its
upstream.  Interactively, FROM is only ever non-nil, if the
region selects some commits, and among those commits, FROM is
the commit that is the fewest commits ahead of the source
branch.

The commit at the other end of the selection actually does not
matter, all commits between FROM and `HEAD' are moved to the new
branch.  If FROM is not reachable from `HEAD' or is reachable
from the source branch's upstream, then an error is raised.

(fn BRANCH &optional FROM)" t nil)(autoload 'magit-branch-reset "magit-branch" "Reset a branch to the tip of another branch or any other commit.

When the branch being reset is the current branch, then do a
hard reset.  If there are any uncommitted changes, then the user
has to confirm the reset because those changes would be lost.

This is useful when you have started work on a feature branch but
realize it's all crap and want to start over.

When resetting to another branch and a prefix argument is used,
then also set the target branch as the upstream of the branch
that is being reset.

(fn BRANCH TO &optional SET-UPSTREAM)" t nil)(autoload 'magit-branch-delete "magit-branch" "Delete one or multiple branches.
If the region marks multiple branches, then offer to delete
those, otherwise prompt for a single branch to be deleted,
defaulting to the branch at point.

(fn BRANCHES &optional FORCE)" t nil)(autoload 'magit-branch-rename "magit-branch" "Rename the branch named OLD to NEW.

With a prefix argument FORCE, rename even if a branch named NEW
already exists.

If `branch.OLD.pushRemote' is set, then unset it.  Depending on
the value of `magit-branch-rename-push-target' (which see) maybe
set `branch.NEW.pushRemote' and maybe rename the push-target on
the remote.

(fn OLD NEW &optional FORCE)" t nil)(autoload 'magit-branch-shelve "magit-branch" "Shelve a BRANCH.
Rename \"refs/heads/BRANCH\" to \"refs/shelved/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t nil)(autoload 'magit-branch-unshelve "magit-branch" "Unshelve a BRANCH
Rename \"refs/shelved/BRANCH\" to \"refs/heads/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t nil)(autoload 'magit-branch-configure "magit-branch" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-branch" '("magit-")))(autoload 'magit-bundle "magit-bundle" nil t)(autoload 'magit-bundle-import "magit-bundle" nil t)(autoload 'magit-bundle-create-tracked "magit-bundle" "Create and track a new bundle.

(fn FILE TAG BRANCH REFS ARGS)" t nil)(autoload 'magit-bundle-update-tracked "magit-bundle" "Update a bundle that is being tracked using TAG.

(fn TAG)" t nil)(autoload 'magit-bundle-verify "magit-bundle" "Check whether FILE is valid and applies to the current repository.

(fn FILE)" t nil)(autoload 'magit-bundle-list-heads "magit-bundle" "List the refs in FILE.

(fn FILE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-bundle" '("magit-")))(autoload 'magit-clone "magit-clone" nil t)(autoload 'magit-clone-regular "magit-clone" "Create a clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t nil)(autoload 'magit-clone-shallow "magit-clone" "Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
With a prefix argument read the DEPTH of the clone;
otherwise use 1.

(fn REPOSITORY DIRECTORY ARGS DEPTH)" t nil)(autoload 'magit-clone-shallow-since "magit-clone" "Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits before DATE, which is read from the
user.

(fn REPOSITORY DIRECTORY ARGS DATE)" t nil)(autoload 'magit-clone-shallow-exclude "magit-clone" "Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits reachable from EXCLUDE, which is a
branch or tag read from the user.

(fn REPOSITORY DIRECTORY ARGS EXCLUDE)" t nil)(autoload 'magit-clone-bare "magit-clone" "Create a bare clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t nil)(autoload 'magit-clone-mirror "magit-clone" "Create a mirror of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t nil)(autoload 'magit-clone-sparse "magit-clone" "Clone REPOSITORY into DIRECTORY and create a sparse checkout.

(fn REPOSITORY DIRECTORY ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-clone" '("magit-clone-")))(autoload 'magit-commit "magit-commit" nil t)(autoload 'magit-commit-create "magit-commit" "Create a new commit on `HEAD'.
With a prefix argument, amend to the commit at `HEAD' instead.

(git commit [--amend] ARGS)

(fn &optional ARGS)" t nil)(autoload 'magit-commit-amend "magit-commit" "Amend the last commit.

(git commit --amend ARGS)

(fn &optional ARGS)" t nil)(autoload 'magit-commit-extend "magit-commit" "Amend the last commit, without editing the message.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-extend-override-date' can be used
to inverse the meaning of the prefix argument.  
(git commit
--amend --no-edit)

(fn &optional ARGS OVERRIDE-DATE)" t nil)(autoload 'magit-commit-reword "magit-commit" "Reword the last commit, ignoring staged changes.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-reword-override-date' can be used
to inverse the meaning of the prefix argument.

Non-interactively respect the optional OVERRIDE-DATE argument
and ignore the option.

(git commit --amend --only)

(fn &optional ARGS OVERRIDE-DATE)" t nil)(autoload 'magit-commit-fixup "magit-commit" "Create a fixup commit.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-squash "magit-commit" "Create a squash commit, without editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

If you want to immediately add a message to the squash commit,
then use `magit-commit-augment' instead of this command.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-augment "magit-commit" "Create a squash commit, editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-instant-fixup "magit-commit" "Create a fixup commit targeting COMMIT and instantly rebase.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-instant-squash "magit-commit" "Create a squash commit targeting COMMIT and instantly rebase.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-reshelve "magit-commit" "Change the committer date and possibly the author date of `HEAD'.

The current time is used as the initial minibuffer input and the
original author or committer date is available as the previous
history element.

Both the author and the committer dates are changes, unless one
of the following is true, in which case only the committer date
is updated:
- You are not the author of the commit that is being reshelved.
- The command was invoked with a prefix argument.
- Non-interactively if UPDATE-AUTHOR is nil.

(fn DATE UPDATE-AUTHOR &optional ARGS)" t nil)(autoload 'magit-commit-absorb-modules "magit-commit" "Spread modified modules across recent commits.

(fn PHASE COMMIT)" t nil)(autoload 'magit-commit-absorb "magit-commit" nil t)(autoload 'magit-commit-autofixup "magit-commit" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-commit" '("magit-")))(autoload 'magit-diff "magit-diff" nil t)(autoload 'magit-diff-refresh "magit-diff" nil t)(autoload 'magit-diff-dwim "magit-diff" "Show changes for the thing at point.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-diff-range "magit-diff" "Show differences between two commits.

REV-OR-RANGE should be a range or a single revision.  If it is a
revision, then show changes in the working tree relative to that
revision.  If it is a range, but one side is omitted, then show
changes relative to `HEAD'.

If the region is active, use the revisions on the first and last
line of the region as the two sides of the range.  With a prefix
argument, instead of diffing the revisions, choose a revision to
view changes along, starting at the common ancestor of both
revisions (i.e., use a \"...\" range).

(fn REV-OR-RANGE &optional ARGS FILES)" t nil)(autoload 'magit-diff-working-tree "magit-diff" "Show changes between the current working tree and the `HEAD' commit.
With a prefix argument show changes between the working tree and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t nil)(autoload 'magit-diff-staged "magit-diff" "Show changes between the index and the `HEAD' commit.
With a prefix argument show changes between the index and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t nil)(autoload 'magit-diff-unstaged "magit-diff" "Show changes between the working tree and the index.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-diff-unmerged "magit-diff" "Show changes that are being merged.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-diff-while-committing "magit-diff" "While committing, show the changes that are about to be committed.
While amending, invoking the command again toggles between
showing just the new changes or all the changes that will
be committed.

(fn &optional ARGS)" t nil)(autoload 'magit-diff-buffer-file "magit-diff" "Show diff for the blob or file visited in the current buffer.

When the buffer visits a blob, then show the respective commit.
When the buffer visits a file, then show the differenced between
`HEAD' and the working tree.  In both cases limit the diff to
the file or blob." t nil)(autoload 'magit-diff-paths "magit-diff" "Show changes between any two files on disk.

(fn A B)" t nil)(autoload 'magit-show-commit "magit-diff" "Visit the revision at point in another buffer.
If there is no revision at point or with a prefix argument prompt
for a revision.

(fn REV &optional ARGS FILES MODULE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-diff" '("magit-")))(autoload 'magit-ediff "magit-ediff" nil)(autoload 'magit-ediff-resolve "magit-ediff" "Resolve outstanding conflicts in FILE using Ediff.
FILE has to be relative to the top directory of the repository.

In the rare event that you want to manually resolve all
conflicts, including those already resolved by Git, use
`ediff-merge-revisions-with-ancestor'.

(fn FILE)" t nil)(autoload 'magit-ediff-stage "magit-ediff" "Stage and unstage changes to FILE using Ediff.
FILE has to be relative to the top directory of the repository.

(fn FILE)" t nil)(autoload 'magit-ediff-compare "magit-ediff" "Compare REVA:FILEA with REVB:FILEB using Ediff.

FILEA and FILEB have to be relative to the top directory of the
repository.  If REVA or REVB is nil, then this stands for the
working tree state.

If the region is active, use the revisions on the first and last
line of the region.  With a prefix argument, instead of diffing
the revisions, choose a revision to view changes along, starting
at the common ancestor of both revisions (i.e., use a \"...\"
range).

(fn REVA REVB FILEA FILEB)" t nil)(autoload 'magit-ediff-dwim "magit-ediff" "Compare, stage, or resolve using Ediff.
This command tries to guess what file, and what commit or range
the user wants to compare, stage, or resolve using Ediff.  It
might only be able to guess either the file, or range or commit,
in which case the user is asked about the other.  It might not
always guess right, in which case the appropriate `magit-ediff-*'
command has to be used explicitly.  If it cannot read the user's
mind at all, then it asks the user for a command to run." t nil)(autoload 'magit-ediff-show-staged "magit-ediff" "Show staged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t nil)(autoload 'magit-ediff-show-unstaged "magit-ediff" "Show unstaged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t nil)(autoload 'magit-ediff-show-working-tree "magit-ediff" "Show changes between `HEAD' and working tree using Ediff.
FILE must be relative to the top directory of the repository.

(fn FILE)" t nil)(autoload 'magit-ediff-show-commit "magit-ediff" "Show changes introduced by COMMIT using Ediff.

(fn COMMIT)" t nil)(autoload 'magit-ediff-show-stash "magit-ediff" "Show changes introduced by STASH using Ediff.
`magit-ediff-show-stash-with-index' controls whether a
three-buffer Ediff is used in order to distinguish changes in the
stash that were staged.

(fn STASH)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-ediff" '("magit-ediff-")))(autoload 'magit-run-git-gui "magit-extras" "Run `git gui' for the current git repository." t nil)(autoload 'magit-run-git-gui-blame "magit-extras" "Run `git gui blame' on the given FILENAME and COMMIT.
Interactively run it for the current file and the `HEAD', with a
prefix or when the current file cannot be determined let the user
choose.  When the current buffer is visiting FILENAME instruct
blame to center around the line point is on.

(fn COMMIT FILENAME &optional LINENUM)" t nil)(autoload 'magit-run-gitk "magit-extras" "Run `gitk' in the current repository." t nil)(autoload 'magit-run-gitk-branches "magit-extras" "Run `gitk --branches' in the current repository." t nil)(autoload 'magit-run-gitk-all "magit-extras" "Run `gitk --all' in the current repository." t nil)(autoload 'ido-enter-magit-status "magit-extras" "Drop into `magit-status' from file switching.

This command does not work in Emacs 26.1.
See https://github.com/magit/magit/issues/3634
and https://debbugs.gnu.org/cgi/bugreport.cgi?bug=31707.

To make this command available use something like:

  (add-hook \\='ido-setup-hook
            (lambda ()
              (define-key ido-completion-map
                (kbd \"C-x g\") \\='ido-enter-magit-status)))

Starting with Emacs 25.1 the Ido keymaps are defined just once
instead of every time Ido is invoked, so now you can modify it
like pretty much every other keymap:

  (define-key ido-common-completion-map
    (kbd \"C-x g\") \\='ido-enter-magit-status)" t nil)(autoload 'magit-project-status "magit-extras" "Run `magit-status' in the current project's root." t nil)(autoload 'magit-dired-jump "magit-extras" "Visit file at point using Dired.
With a prefix argument, visit in another window.  If there
is no file at point, then instead visit `default-directory'.

(fn &optional OTHER-WINDOW)" t nil)(autoload 'magit-dired-log "magit-extras" "Show log for all marked files, or the current file.

(fn &optional FOLLOW)" t nil)(autoload 'magit-dired-am-apply-patches "magit-extras" "In Dired, apply the marked (or next ARG) files as patches.
If inside a repository, then apply in that.  Otherwise prompt
for a repository.

(fn REPO &optional ARG)" t nil)(autoload 'magit-do-async-shell-command "magit-extras" "Open FILE with `dired-do-async-shell-command'.
Interactively, open the file at point.

(fn FILE)" t nil)(autoload 'magit-previous-line "magit-extras" "Like `previous-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects an
area that is larger than the region.  This causes `previous-line'
when invoked while holding the shift key to move up one line and
thereby select two lines.  When invoked inside a hunk body this
command does not move point on the first invocation and thereby
it only selects a single line.  Which inconsistency you prefer
is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t nil)(function-put 'magit-previous-line 'interactive-only '"use `forward-line' with negative argument instead.")(autoload 'magit-next-line "magit-extras" "Like `next-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects
an area that is larger than the region.  This causes `next-line'
when invoked while holding the shift key to move down one line
and thereby select two lines.  When invoked inside a hunk body
this command does not move point on the first invocation and
thereby it only selects a single line.  Which inconsistency you
prefer is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t nil)(function-put 'magit-next-line 'interactive-only 'forward-line)(autoload 'magit-clean "magit-extras" "Remove untracked files from the working tree.
With a prefix argument also remove ignored files,
with two prefix arguments remove ignored files only.

(git clean -f -d [-x|-X])

(fn &optional ARG)" t nil)(autoload 'magit-generate-changelog "magit-extras" "Insert ChangeLog entries into the current buffer.

The entries are generated from the diff being committed.
If prefix argument, AMENDING, is non-nil, include changes
in HEAD as well as staged changes in the diff to check.

(fn &optional AMENDING)" t nil)(autoload 'magit-add-change-log-entry "magit-extras" "Find change log file and add date entry and item for current change.
This differs from `add-change-log-entry' (which see) in that
it acts on the current hunk in a Magit buffer instead of on
a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME OTHER-WINDOW)" t nil)(autoload 'magit-add-change-log-entry-other-window "magit-extras" "Find change log file in other window and add entry and item.
This differs from `add-change-log-entry-other-window' (which see)
in that it acts on the current hunk in a Magit buffer instead of
on a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME)" t nil)(autoload 'magit-edit-line-commit "magit-extras" "Edit the commit that added the current line.

With a prefix argument edit the commit that removes the line,
if any.  The commit is determined using `git blame' and made
editable using `git rebase --interactive' if it is reachable
from `HEAD', or by checking out the commit (or a branch that
points at it) otherwise.

(fn &optional TYPE)" t nil)(autoload 'magit-diff-edit-hunk-commit "magit-extras" "From a hunk, edit the respective commit and visit the file.

First visit the file being modified by the hunk at the correct
location using `magit-diff-visit-file'.  This actually visits a
blob.  When point is on a diff header, not within an individual
hunk, then this visits the blob the first hunk is about.

Then invoke `magit-edit-line-commit', which uses an interactive
rebase to make the commit editable, or if that is not possible
because the commit is not reachable from `HEAD' by checking out
that commit directly.  This also causes the actual worktree file
to be visited.

Neither the blob nor the file buffer are killed when finishing
the rebase.  If that is undesirable, then it might be better to
use `magit-rebase-edit-command' instead of this command.

(fn FILE)" t nil)(autoload 'magit-reshelve-since "magit-extras" "Change the author and committer dates of the commits since REV.

Ask the user for the first reachable commit whose dates should
be changed.  Then read the new date for that commit.  The initial
minibuffer input and the previous history element offer good
values.  The next commit will be created one minute later and so
on.

This command is only intended for interactive use and should only
be used on highly rearranged and unpublished history.

If KEYID is non-nil, then use that to sign all reshelved commits.
Interactively use the value of the \"--gpg-sign\" option in the
list returned by `magit-rebase-arguments'.

(fn REV KEYID)" t nil)(autoload 'magit-pop-revision-stack "magit-extras" "Insert a representation of a revision into the current buffer.

Pop a revision from the `magit-revision-stack' and insert it into
the current buffer according to `magit-pop-revision-stack-format'.
Revisions can be put on the stack using `magit-copy-section-value'
and `magit-copy-buffer-revision'.

If the stack is empty or with a prefix argument, instead read a
revision in the minibuffer.  By using the minibuffer history this
allows selecting an item which was popped earlier or to insert an
arbitrary reference or revision without first pushing it onto the
stack.

When reading the revision from the minibuffer, then it might not
be possible to guess the correct repository.  When this command
is called inside a repository (e.g. while composing a commit
message), then that repository is used.  Otherwise (e.g. while
composing an email) then the repository recorded for the top
element of the stack is used (even though we insert another
revision).  If not called inside a repository and with an empty
stack, or with two prefix arguments, then read the repository in
the minibuffer too.

(fn REV TOPLEVEL)" t nil)(autoload 'magit-copy-section-value "magit-extras" "Save the value of the current section for later use.

Save the section value to the `kill-ring', and, provided that
the current section is a commit, branch, or tag section, push
the (referenced) revision to the `magit-revision-stack' for use
with `magit-pop-revision-stack'.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'.

When the current section is a branch or a tag, and a prefix
argument is used, then save the revision at its tip to the
`kill-ring' instead of the reference name.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.  If a prefix argument is used and the region is within
a hunk, then strip the diff marker column and keep only either
the added or removed lines, depending on the sign of the prefix
argument.

(fn ARG)" t nil)(autoload 'magit-copy-buffer-revision "magit-extras" "Save the revision of the current buffer for later use.

Save the revision shown in the current buffer to the `kill-ring'
and push it to the `magit-revision-stack'.

This command is mainly intended for use in `magit-revision-mode'
buffers, the only buffers where it is always unambiguous exactly
which revision should be saved.

Most other Magit buffers usually show more than one revision, in
some way or another, so this command has to select one of them,
and that choice might not always be the one you think would have
been the best pick.

In such buffers it is often more useful to save the value of
the current section instead, using `magit-copy-section-value'.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'." t nil)(autoload 'magit-display-repository-buffer "magit-extras" "Display a Magit buffer belonging to the current Git repository.
The buffer is displayed using `magit-display-buffer', which see.

(fn BUFFER)" t nil)(autoload 'magit-switch-to-repository-buffer "magit-extras" "Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t nil)(autoload 'magit-switch-to-repository-buffer-other-window "magit-extras" "Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t nil)(autoload 'magit-switch-to-repository-buffer-other-frame "magit-extras" "Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t nil)(autoload 'magit-abort-dwim "magit-extras" "Abort current operation.
Depending on the context, this will abort a merge, a rebase, a
patch application, a cherry-pick, a revert, or a bisect." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-extras" '("magit-")))(autoload 'magit-fetch "magit-fetch" nil t)(autoload 'magit-fetch-from-pushremote "magit-fetch" nil t)(autoload 'magit-fetch-from-upstream "magit-fetch" nil t)(autoload 'magit-fetch-other "magit-fetch" "Fetch from another repository.

(fn REMOTE ARGS)" t nil)(autoload 'magit-fetch-branch "magit-fetch" "Fetch a BRANCH from a REMOTE.

(fn REMOTE BRANCH ARGS)" t nil)(autoload 'magit-fetch-refspec "magit-fetch" "Fetch a REFSPEC from a REMOTE.

(fn REMOTE REFSPEC ARGS)" t nil)(autoload 'magit-fetch-all "magit-fetch" "Fetch from all remotes.

(fn ARGS)" t nil)(autoload 'magit-fetch-all-prune "magit-fetch" "Fetch from all remotes, and prune.
Prune remote tracking branches for branches that have been
removed on the respective remote." t nil)(autoload 'magit-fetch-all-no-prune "magit-fetch" "Fetch from all remotes." t nil)(autoload 'magit-fetch-modules "magit-fetch" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-fetch" '("magit-")))(autoload 'magit-find-file "magit-files" "View FILE from REV.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go
to the line and column corresponding to that location.

(fn REV FILE)" t nil)(autoload 'magit-find-file-other-window "magit-files" "View FILE from REV, in another window.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t nil)(autoload 'magit-find-file-other-frame "magit-files" "View FILE from REV, in another frame.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t nil)(autoload 'magit-file-dispatch "magit" nil t)(autoload 'magit-blob-visit-file "magit-files" "View the file from the worktree corresponding to the current blob.
When visiting a blob or the version from the index, then go to
the same location in the respective file in the working tree." t nil)(autoload 'magit-file-checkout "magit-files" "Checkout FILE from REV.

(fn REV FILE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-files" '("magit-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-git" '("magit-")))(autoload 'magit-gitignore "magit-gitignore" nil t)(autoload 'magit-gitignore-in-topdir "magit-gitignore" "Add the Git ignore RULE to the top-level \".gitignore\" file.
Since this file is tracked, it is shared with other clones of the
repository.  Also stage the file.

(fn RULE)" t nil)(autoload 'magit-gitignore-in-subdir "magit-gitignore" "Add the Git ignore RULE to a \".gitignore\" file in DIRECTORY.
Prompt the user for a directory and add the rule to the
\".gitignore\" file in that directory.  Since such files are
tracked, they are shared with other clones of the repository.
Also stage the file.

(fn RULE DIRECTORY)" t nil)(autoload 'magit-gitignore-in-gitdir "magit-gitignore" "Add the Git ignore RULE to \"$GIT_DIR/info/exclude\".
Rules in that file only affects this clone of the repository.

(fn RULE)" t nil)(autoload 'magit-gitignore-on-system "magit-gitignore" "Add the Git ignore RULE to the file specified by `core.excludesFile'.
Rules that are defined in that file affect all local repositories.

(fn RULE)" t nil)(autoload 'magit-skip-worktree "magit-gitignore" "Call \"git update-index --skip-worktree -- FILE\".

(fn FILE)" t nil)(autoload 'magit-no-skip-worktree "magit-gitignore" "Call \"git update-index --no-skip-worktree -- FILE\".

(fn FILE)" t nil)(autoload 'magit-assume-unchanged "magit-gitignore" "Call \"git update-index --assume-unchanged -- FILE\".

(fn FILE)" t nil)(autoload 'magit-no-assume-unchanged "magit-gitignore" "Call \"git update-index --no-assume-unchanged -- FILE\".

(fn FILE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-gitignore" '("magit-")))(autoload 'magit-imenu--log-prev-index-position-function "magit-imenu" "Move point to previous line in current buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--log-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--diff-prev-index-position-function "magit-imenu" "Move point to previous file line in current buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--diff-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--status-create-index-function "magit-imenu" "Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'." nil nil)(autoload 'magit-imenu--refs-create-index-function "magit-imenu" "Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'." nil nil)(autoload 'magit-imenu--cherry-create-index-function "magit-imenu" "Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'." nil nil)(autoload 'magit-imenu--submodule-prev-index-position-function "magit-imenu" "Move point to previous line in magit-submodule-list buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--submodule-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--repolist-prev-index-position-function "magit-imenu" "Move point to previous line in magit-repolist buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--repolist-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--process-prev-index-position-function "magit-imenu" "Move point to previous process in magit-process buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--process-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--rebase-prev-index-position-function "magit-imenu" "Move point to previous commit in git-rebase buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--rebase-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-imenu" '("magit-imenu--index-function")))(autoload 'magit-log "magit-log" nil t)(autoload 'magit-log-refresh "magit-log" nil t)(autoload 'magit-log-current "magit-log" "Show log for the current branch.
When `HEAD' is detached or with a prefix argument show log for
one or more revs read from the minibuffer.

(fn REVS &optional ARGS FILES)" t nil)(autoload 'magit-log-head "magit-log" "Show log for `HEAD'.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-log-related "magit-log" "Show log for the current branch, its upstream and its push target.
When the upstream is a local branch, then also show its own
upstream.  When `HEAD' is detached, then show log for that, the
previously checked out branch and its upstream and push-target.

(fn REVS &optional ARGS FILES)" t nil)(autoload 'magit-log-other "magit-log" "Show log for one or more revs read from the minibuffer.
The user can input any revision or revisions separated by a
space, or even ranges, but only branches and tags, and a
representation of the commit at point, are available as
completion candidates.

(fn REVS &optional ARGS FILES)" t nil)(autoload 'magit-log-branches "magit-log" "Show log for all local branches and `HEAD'.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-log-matching-branches "magit-log" "Show log for all branches matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t nil)(autoload 'magit-log-matching-tags "magit-log" "Show log for all tags matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t nil)(autoload 'magit-log-all-branches "magit-log" "Show log for all local and remote branches and `HEAD'.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-log-all "magit-log" "Show log for all references and `HEAD'.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-log-buffer-file "magit-log" "Show log for the blob or file visited in the current buffer.
With a prefix argument or when `--follow' is an active log
argument, then follow renames.  When the region is active,
restrict the log to the lines that the region touches.

(fn &optional FOLLOW BEG END)" t nil)(autoload 'magit-log-trace-definition "magit-log" "Show log for the definition at point.

(fn FILE FN REV)" t nil)(autoload 'magit-log-merged "magit-log" "Show log for the merge of COMMIT into BRANCH.

More precisely, find merge commit M that brought COMMIT into
BRANCH, and show the log of the range \"M^1..M\".  If COMMIT is
directly on BRANCH, then show approximately twenty surrounding
commits instead.

This command requires git-when-merged, which is available from
https://github.com/mhagger/git-when-merged.

(fn COMMIT BRANCH &optional ARGS FILES)" t nil)(autoload 'magit-log-move-to-parent "magit-log" "Move to the Nth parent of the current commit.

(fn &optional N)" t nil)(autoload 'magit-shortlog "magit-log" nil t)(autoload 'magit-shortlog-since "magit-log" "Show a history summary for commits since REV.

(fn REV ARGS)" t nil)(autoload 'magit-shortlog-range "magit-log" "Show a history summary for commit or range REV-OR-RANGE.

(fn REV-OR-RANGE ARGS)" t nil)(autoload 'magit-cherry "magit-log" "Show commits in a branch that are not merged in the upstream branch.

(fn HEAD UPSTREAM)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-log" '("magit-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-margin" '("magit-")))(autoload 'magit-merge "magit" nil t)(autoload 'magit-merge-plain "magit-merge" "Merge commit REV into the current branch; using default message.

Unless there are conflicts or a prefix argument is used create a
merge commit using a generic commit message and without letting
the user inspect the result.  With a prefix argument pretend the
merge failed to give the user the opportunity to inspect the
merge.

(git merge --no-edit|--no-commit [ARGS] REV)

(fn REV &optional ARGS NOCOMMIT)" t nil)(autoload 'magit-merge-editmsg "magit-merge" "Merge commit REV into the current branch; and edit message.
Perform the merge and prepare a commit message but let the user
edit it.

(git merge --edit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t nil)(autoload 'magit-merge-nocommit "magit-merge" "Merge commit REV into the current branch; pretending it failed.
Pretend the merge failed to give the user the opportunity to
inspect the merge and change the commit message.

(git merge --no-commit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t nil)(autoload 'magit-merge-into "magit-merge" "Merge the current branch into BRANCH and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t nil)(autoload 'magit-merge-absorb "magit-merge" "Merge BRANCH into the current branch and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t nil)(autoload 'magit-merge-squash "magit-merge" "Squash commit REV into the current branch; don't create a commit.

(git merge --squash REV)

(fn REV)" t nil)(autoload 'magit-merge-preview "magit-merge" "Preview result of merging REV into the current branch.

(fn REV)" t nil)(autoload 'magit-merge-abort "magit-merge" "Abort the current merge operation.

(git merge --abort)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-merge" '("magit-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-mode" '("disable-magit-save-buffers" "magit-")))(autoload 'magit-notes "magit" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-notes" '("magit-notes-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-obsolete" '("magit--magit-popup-warning")))(autoload 'magit-patch "magit-patch" nil t)(autoload 'magit-patch-create "magit-patch" nil t)(autoload 'magit-patch-apply "magit-patch" nil t)(autoload 'magit-patch-save "magit-patch" "Write current diff into patch FILE.

What arguments are used to create the patch depends on the value
of `magit-patch-save-arguments' and whether a prefix argument is
used.

If the value is the symbol `buffer', then use the same arguments
as the buffer.  With a prefix argument use no arguments.

If the value is a list beginning with the symbol `exclude', then
use the same arguments as the buffer except for those matched by
entries in the cdr of the list.  The comparison is done using
`string-prefix-p'.  With a prefix argument use the same arguments
as the buffer.

If the value is a list of strings (including the empty list),
then use those arguments.  With a prefix argument use the same
arguments as the buffer.

Of course the arguments that are required to actually show the
same differences as those shown in the buffer are always used.

(fn FILE &optional ARG)" t nil)(autoload 'magit-request-pull "magit-patch" "Request upstream to pull from your public repository.

URL is the url of your publicly accessible repository.
START is a commit that already is in the upstream repository.
END is the last commit, usually a branch name, which upstream
is asked to pull.  START has to be reachable from that commit.

(fn URL START END)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-patch" '("magit-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-process" '("magit-" "tramp-sh-handle-")))(autoload 'magit-pull "magit-pull" nil t)(autoload 'magit-pull-from-pushremote "magit-pull" nil t)(autoload 'magit-pull-from-upstream "magit-pull" nil t)(autoload 'magit-pull-branch "magit-pull" "Pull from a branch read in the minibuffer.

(fn SOURCE ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-pull" '("magit-pull-")))(autoload 'magit-push "magit-push" nil t)(autoload 'magit-push-current-to-pushremote "magit-push" nil t)(autoload 'magit-push-current-to-upstream "magit-push" nil t)(autoload 'magit-push-current "magit-push" "Push the current branch to a branch read in the minibuffer.

(fn TARGET ARGS)" t nil)(autoload 'magit-push-other "magit-push" "Push an arbitrary branch or commit somewhere.
Both the source and the target are read in the minibuffer.

(fn SOURCE TARGET ARGS)" t nil)(autoload 'magit-push-refspecs "magit-push" "Push one or multiple REFSPECS to a REMOTE.
Both the REMOTE and the REFSPECS are read in the minibuffer.  To
use multiple REFSPECS, separate them with commas.  Completion is
only available for the part before the colon, or when no colon
is used.

(fn REMOTE REFSPECS ARGS)" t nil)(autoload 'magit-push-matching "magit-push" "Push all matching branches to another repository.
If multiple remotes exist, then read one from the user.
If just one exists, use that without requiring confirmation.

(fn REMOTE &optional ARGS)" t nil)(autoload 'magit-push-tags "magit-push" "Push all tags to another repository.
If only one remote exists, then push to that.  Otherwise prompt
for a remote, offering the remote configured for the current
branch as default.

(fn REMOTE &optional ARGS)" t nil)(autoload 'magit-push-tag "magit-push" "Push a tag to another repository.

(fn TAG REMOTE &optional ARGS)" t nil)(autoload 'magit-push-notes-ref "magit-push" "Push a notes ref to another repository.

(fn REF REMOTE &optional ARGS)" t nil)(autoload 'magit-push-implicitly "magit-push" nil t)(autoload 'magit-push-to-remote "magit-push" "Push to REMOTE without using an explicit refspec.
The REMOTE is read in the minibuffer.

This command simply runs \"git push -v [ARGS] REMOTE\".  ARGS
are the arguments specified in the popup buffer.  No refspec
arguments are used.  Instead the behavior depends on at least
these Git variables: `push.default', `remote.pushDefault',
`branch.<branch>.pushRemote', `branch.<branch>.remote',
`branch.<branch>.merge', and `remote.<remote>.push'.

(fn REMOTE ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-push" '("magit-")))(autoload 'magit-reflog-current "magit-reflog" "Display the reflog of the current branch.
If `HEAD' is detached, then show the reflog for that instead." t nil)(autoload 'magit-reflog-other "magit-reflog" "Display the reflog of a branch or another ref.

(fn REF)" t nil)(autoload 'magit-reflog-head "magit-reflog" "Display the `HEAD' reflog." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-reflog" '("magit-reflog-")))(autoload 'magit-show-refs "magit-refs" nil t)(autoload 'magit-show-refs-head "magit-refs" "List and compare references in a dedicated buffer.
Compared with `HEAD'.

(fn &optional ARGS)" t nil)(autoload 'magit-show-refs-current "magit-refs" "List and compare references in a dedicated buffer.
Compare with the current branch or `HEAD' if it is detached.

(fn &optional ARGS)" t nil)(autoload 'magit-show-refs-other "magit-refs" "List and compare references in a dedicated buffer.
Compared with a branch read from the user.

(fn &optional REF ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-refs" '("magit-")))(autoload 'magit-remote "magit-remote" nil t)(autoload 'magit-remote-add "magit-remote" "Add a remote named REMOTE and fetch it.

(fn REMOTE URL &optional ARGS)" t nil)(autoload 'magit-remote-rename "magit-remote" "Rename the remote named OLD to NEW.

(fn OLD NEW)" t nil)(autoload 'magit-remote-remove "magit-remote" "Delete the remote named REMOTE.

(fn REMOTE)" t nil)(autoload 'magit-remote-prune "magit-remote" "Remove stale remote-tracking branches for REMOTE.

(fn REMOTE)" t nil)(autoload 'magit-remote-prune-refspecs "magit-remote" "Remove stale refspecs for REMOTE.

A refspec is stale if there no longer exists at least one branch
on the remote that would be fetched due to that refspec.  A stale
refspec is problematic because its existence causes Git to refuse
to fetch according to the remaining non-stale refspecs.

If only stale refspecs remain, then offer to either delete the
remote or to replace the stale refspecs with the default refspec.

Also remove the remote-tracking branches that were created due to
the now stale refspecs.  Other stale branches are not removed.

(fn REMOTE)" t nil)(autoload 'magit-remote-set-head "magit-remote" "Set the local representation of REMOTE's default branch.
Query REMOTE and set the symbolic-ref refs/remotes/<remote>/HEAD
accordingly.  With a prefix argument query for the branch to be
used, which allows you to select an incorrect value if you fancy
doing that.

(fn REMOTE &optional BRANCH)" t nil)(autoload 'magit-remote-unset-head "magit-remote" "Unset the local representation of REMOTE's default branch.
Delete the symbolic-ref \"refs/remotes/<remote>/HEAD\".

(fn REMOTE)" t nil)(autoload 'magit-remote-unshallow "magit-remote" "Convert a shallow remote into a full one.
If only a single refspec is set and it does not contain a
wildcard, then also offer to replace it with the standard
refspec.

(fn REMOTE)" t nil)(autoload 'magit-remote-configure "magit-remote" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-remote" '("magit-")))(autoload 'magit-list-repositories "magit-repos" "Display a list of repositories.

Use the options `magit-repository-directories' to control which
repositories are displayed." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-repos" '("magit-")))(autoload 'magit-reset "magit" nil t)(autoload 'magit-reset-mixed "magit-reset" "Reset the `HEAD' and index to COMMIT, but not the working tree.

(git reset --mixed COMMIT)

(fn COMMIT)" t nil)(autoload 'magit-reset-soft "magit-reset" "Reset the `HEAD' to COMMIT, but not the index and working tree.

(git reset --soft REVISION)

(fn COMMIT)" t nil)(autoload 'magit-reset-hard "magit-reset" "Reset the `HEAD', index, and working tree to COMMIT.

(git reset --hard REVISION)

(fn COMMIT)" t nil)(autoload 'magit-reset-keep "magit-reset" "Reset the `HEAD' and index to COMMIT, while keeping uncommitted changes.

(git reset --keep REVISION)

(fn COMMIT)" t nil)(autoload 'magit-reset-index "magit-reset" "Reset the index to COMMIT.
Keep the `HEAD' and working tree as-is, so if COMMIT refers to the
head this effectively unstages all changes.

(git reset COMMIT .)

(fn COMMIT)" t nil)(autoload 'magit-reset-worktree "magit-reset" "Reset the worktree to COMMIT.
Keep the `HEAD' and index as-is.

(fn COMMIT)" t nil)(autoload 'magit-reset-quickly "magit-reset" "Reset the `HEAD' and index to COMMIT, and possibly the working tree.
With a prefix argument reset the working tree otherwise don't.

(git reset --mixed|--hard COMMIT)

(fn COMMIT &optional HARD)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-reset" '("magit-reset-")))(autoload 'magit-sequencer-continue "magit-sequence" "Resume the current cherry-pick or revert sequence." t nil)(autoload 'magit-sequencer-skip "magit-sequence" "Skip the stopped at commit during a cherry-pick or revert sequence." t nil)(autoload 'magit-sequencer-abort "magit-sequence" "Abort the current cherry-pick or revert sequence.
This discards all changes made since the sequence started." t nil)(autoload 'magit-cherry-pick "magit-sequence" nil t)(autoload 'magit-cherry-copy "magit-sequence" "Copy COMMITS from another branch onto the current branch.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then pick all of them,
without prompting.

(fn COMMITS &optional ARGS)" t nil)(autoload 'magit-cherry-apply "magit-sequence" "Apply the changes in COMMITS but do not commit them.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then apply all of them,
without prompting.

(fn COMMITS &optional ARGS)" t nil)(autoload 'magit-cherry-harvest "magit-sequence" "Move COMMITS from another BRANCH onto the current branch.
Remove the COMMITS from BRANCH and stay on the current branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH &optional ARGS)" t nil)(autoload 'magit-cherry-donate "magit-sequence" "Move COMMITS from the current branch onto another existing BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.  `HEAD' is allowed to be detached initially.

(fn COMMITS BRANCH &optional ARGS)" t nil)(autoload 'magit-cherry-spinout "magit-sequence" "Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t nil)(autoload 'magit-cherry-spinoff "magit-sequence" "Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and checkout BRANCH.
If a conflict occurs, then you have to fix that and finish
the process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t nil)(autoload 'magit-revert "magit-sequence" nil t)(autoload 'magit-revert-and-commit "magit-sequence" "Revert COMMIT by creating a new commit.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t nil)(autoload 'magit-revert-no-commit "magit-sequence" "Revert COMMIT by applying it in reverse to the worktree.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t nil)(autoload 'magit-am "magit-sequence" nil t)(autoload 'magit-am-apply-patches "magit-sequence" "Apply the patches FILES.

(fn &optional FILES ARGS)" t nil)(autoload 'magit-am-apply-maildir "magit-sequence" "Apply the patches from MAILDIR.

(fn &optional MAILDIR ARGS)" t nil)(autoload 'magit-am-continue "magit-sequence" "Resume the current patch applying sequence." t nil)(autoload 'magit-am-skip "magit-sequence" "Skip the stopped at patch during a patch applying sequence." t nil)(autoload 'magit-am-abort "magit-sequence" "Abort the current patch applying sequence.
This discards all changes made since the sequence started." t nil)(autoload 'magit-rebase "magit-sequence" nil t)(autoload 'magit-rebase-onto-pushremote "magit-sequence" nil t)(autoload 'magit-rebase-onto-upstream "magit-sequence" nil t)(autoload 'magit-rebase-branch "magit-sequence" "Rebase the current branch onto a branch read in the minibuffer.
All commits that are reachable from `HEAD' but not from the
selected branch TARGET are being rebased.

(fn TARGET ARGS)" t nil)(autoload 'magit-rebase-subset "magit-sequence" "Rebase a subset of the current branch's history onto a new base.
Rebase commits from START to `HEAD' onto NEWBASE.
START has to be selected from a list of recent commits.

(fn NEWBASE START ARGS)" t nil)(autoload 'magit-rebase-interactive "magit-sequence" "Start an interactive rebase sequence.

(fn COMMIT ARGS)" t nil)(autoload 'magit-rebase-autosquash "magit-sequence" "Combine squash and fixup commits with their intended targets.

(fn ARGS)" t nil)(autoload 'magit-rebase-edit-commit "magit-sequence" "Edit a single older commit using rebase.

(fn COMMIT ARGS)" t nil)(autoload 'magit-rebase-reword-commit "magit-sequence" "Reword a single older commit using rebase.

(fn COMMIT ARGS)" t nil)(autoload 'magit-rebase-remove-commit "magit-sequence" "Remove a single older commit using rebase.

(fn COMMIT ARGS)" t nil)(autoload 'magit-rebase-continue "magit-sequence" "Restart the current rebasing operation.
In some cases this pops up a commit message buffer for you do
edit.  With a prefix argument the old message is reused as-is.

(fn &optional NOEDIT)" t nil)(autoload 'magit-rebase-skip "magit-sequence" "Skip the current commit and restart the current rebase operation." t nil)(autoload 'magit-rebase-edit "magit-sequence" "Edit the todo list of the current rebase operation." t nil)(autoload 'magit-rebase-abort "magit-sequence" "Abort the current rebase operation, restoring the original branch." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-sequence" '("magit-")))(autoload 'magit-sparse-checkout "magit-sparse-checkout" nil t)(autoload 'magit-sparse-checkout-enable "magit-sparse-checkout" "Convert the working tree to a sparse checkout.

(fn &optional ARGS)" t nil)(autoload 'magit-sparse-checkout-set "magit-sparse-checkout" "Restrict working tree to DIRECTORIES.
To extend rather than override the currently configured
directories, call `magit-sparse-checkout-add' instead.

(fn DIRECTORIES)" t nil)(autoload 'magit-sparse-checkout-add "magit-sparse-checkout" "Add DIRECTORIES to the working tree.
To override rather than extend the currently configured
directories, call `magit-sparse-checkout-set' instead.

(fn DIRECTORIES)" t nil)(autoload 'magit-sparse-checkout-reapply "magit-sparse-checkout" "Reapply the sparse checkout rules to the working tree.
Some operations such as merging or rebasing may need to check out
files that aren't included in the sparse checkout.  Call this
command to reset to the sparse checkout state." t nil)(autoload 'magit-sparse-checkout-disable "magit-sparse-checkout" "Convert sparse checkout to full checkout.
Note that disabling the sparse checkout does not clear the
configured directories.  Call `magit-sparse-checkout-enable' to
restore the previous sparse checkout." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-sparse-checkout" '("magit-sparse-checkout-")))(autoload 'magit-stash "magit-stash" nil t)(autoload 'magit-stash-both "magit-stash" "Create a stash of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-stash-index "magit-stash" "Create a stash of the index only.
Unstaged and untracked changes are not stashed.  The stashed
changes are applied in reverse to both the index and the
worktree.  This command can fail when the worktree is not clean.
Applying the resulting stash has the inverse effect.

(fn MESSAGE)" t nil)(autoload 'magit-stash-worktree "magit-stash" "Create a stash of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-stash-keep-index "magit-stash" "Create a stash of the index and working tree, keeping index intact.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-snapshot-both "magit-stash" "Create a snapshot of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-snapshot-index "magit-stash" "Create a snapshot of the index only.
Unstaged and untracked changes are not stashed." t nil)(autoload 'magit-snapshot-worktree "magit-stash" "Create a snapshot of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-stash-push "magit-stash" nil t)(autoload 'magit-stash-apply "magit-stash" "Apply a stash to the working tree.
Try to preserve the stash index.  If that fails because there
are staged changes, apply without preserving the stash index.

(fn STASH)" t nil)(autoload 'magit-stash-pop "magit-stash" "Apply a stash to the working tree and remove it from stash list.
Try to preserve the stash index.  If that fails because there
are staged changes, apply without preserving the stash index
and forgo removing the stash.

(fn STASH)" t nil)(autoload 'magit-stash-drop "magit-stash" "Remove a stash from the stash list.
When the region is active offer to drop all contained stashes.

(fn STASH)" t nil)(autoload 'magit-stash-clear "magit-stash" "Remove all stashes saved in REF's reflog by deleting REF.

(fn REF)" t nil)(autoload 'magit-stash-branch "magit-stash" "Create and checkout a new BRANCH from STASH.

(fn STASH BRANCH)" t nil)(autoload 'magit-stash-branch-here "magit-stash" "Create and checkout a new BRANCH and apply STASH.
The branch is created using `magit-branch-and-checkout', using the
current branch or `HEAD' as the start-point.

(fn STASH BRANCH)" t nil)(autoload 'magit-stash-format-patch "magit-stash" "Create a patch from STASH

(fn STASH)" t nil)(autoload 'magit-stash-list "magit-stash" "List all stashes in a buffer." t nil)(autoload 'magit-stash-show "magit-stash" "Show all diffs of a stash in a buffer.

(fn STASH &optional ARGS FILES)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-stash" '("magit-")))(autoload 'magit-init "magit-status" "Initialize a Git repository, then show its status.

If the directory is below an existing repository, then the user
has to confirm that a new one should be created inside.  If the
directory is the root of the existing repository, then the user
has to confirm that it should be reinitialized.

Non-interactively DIRECTORY is (re-)initialized unconditionally.

(fn DIRECTORY)" t nil)(autoload 'magit-status "magit-status" "Show the status of the current Git repository in a buffer.

If the current directory isn't located within a Git repository,
then prompt for an existing repository or an arbitrary directory,
depending on option `magit-repository-directories', and show the
status of the selected repository instead.

* If that option specifies any existing repositories, then offer
  those for completion and show the status buffer for the
  selected one.

* Otherwise read an arbitrary directory using regular file-name
  completion.  If the selected directory is the top-level of an
  existing working tree, then show the status buffer for that.

* Otherwise offer to initialize the selected directory as a new
  repository.  After creating the repository show its status
  buffer.

These fallback behaviors can also be forced using one or more
prefix arguments:

* With two prefix arguments (or more precisely a numeric prefix
  value of 16 or greater) read an arbitrary directory and act on
  it as described above.  The same could be accomplished using
  the command `magit-init'.

* With a single prefix argument read an existing repository, or
  if none can be found based on `magit-repository-directories',
  then fall back to the same behavior as with two prefix
  arguments.

(fn &optional DIRECTORY CACHE)" t nil)(defalias 'magit 'magit-status "An alias for `magit-status' for better discoverability.

Instead of invoking this alias for `magit-status' using
\"M-x magit RET\", you should bind a key to `magit-status'
and read the info node `(magit)Getting Started', which
also contains other useful hints.")(autoload 'magit-status-here "magit-status" "Like `magit-status' but with non-nil `magit-status-goto-file-position'." t nil)(autoload 'magit-status-quick "magit-status" "Show the status of the current Git repository, maybe without refreshing.

If the status buffer of the current Git repository exists but
isn't being displayed in the selected frame, then display it
without refreshing it.

If the status buffer is being displayed in the selected frame,
then also refresh it.

Prefix arguments have the same meaning as for `magit-status',
and additionally cause the buffer to be refresh.

To use this function instead of `magit-status', add this to your
init file: (global-set-key (kbd \"C-x g\") 'magit-status-quick)." t nil)(autoload 'magit-status-setup-buffer "magit-status" "

(fn &optional DIRECTORY)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-status" '("magit-")))(autoload 'magit-submodule "magit-submodule" nil t)(autoload 'magit-submodule-add "magit-submodule" nil t)(autoload 'magit-submodule-read-name-for-path "magit-submodule" "

(fn PATH &optional PREFER-SHORT)" nil nil)(autoload 'magit-submodule-register "magit-submodule" nil t)(autoload 'magit-submodule-populate "magit-submodule" nil t)(autoload 'magit-submodule-update "magit-submodule" nil t)(autoload 'magit-submodule-synchronize "magit-submodule" nil t)(autoload 'magit-submodule-unpopulate "magit-submodule" nil t)(autoload 'magit-submodule-remove "magit-submodule" "Unregister MODULES and remove their working directories.

For safety reasons, do not remove the gitdirs and if a module has
uncommitted changes, then do not remove it at all.  If a module's
gitdir is located inside the working directory, then move it into
the gitdir of the superproject first.

With the \"--force\" argument offer to remove dirty working
directories and with a prefix argument offer to delete gitdirs.
Both actions are very dangerous and have to be confirmed.  There
are additional safety precautions in place, so you might be able
to recover from making a mistake here, but don't count on it.

(fn MODULES ARGS TRASH-GITDIRS)" t nil)(autoload 'magit-insert-modules "magit-submodule" "Insert submodule sections.
Hook `magit-module-sections-hook' controls which module sections
are inserted, and option `magit-module-sections-nested' controls
whether they are wrapped in an additional section." nil nil)(autoload 'magit-insert-modules-overview "magit-submodule" "Insert sections for all modules.
For each section insert the path and the output of `git describe --tags',
or, failing that, the abbreviated HEAD commit hash." nil nil)(autoload 'magit-insert-modules-unpulled-from-upstream "magit-submodule" "Insert sections for modules that haven't been pulled from the upstream.
These sections can be expanded to show the respective commits." nil nil)(autoload 'magit-insert-modules-unpulled-from-pushremote "magit-submodule" "Insert sections for modules that haven't been pulled from the push-remote.
These sections can be expanded to show the respective commits." nil nil)(autoload 'magit-insert-modules-unpushed-to-upstream "magit-submodule" "Insert sections for modules that haven't been pushed to the upstream.
These sections can be expanded to show the respective commits." nil nil)(autoload 'magit-insert-modules-unpushed-to-pushremote "magit-submodule" "Insert sections for modules that haven't been pushed to the push-remote.
These sections can be expanded to show the respective commits." nil nil)(autoload 'magit-list-submodules "magit-submodule" "Display a list of the current repository's submodules." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-submodule" '("magit-")))(autoload 'magit-subtree "magit-subtree" nil t)(autoload 'magit-subtree-import "magit-subtree" nil t)(autoload 'magit-subtree-export "magit-subtree" nil t)(autoload 'magit-subtree-add "magit-subtree" "Add REF from REPOSITORY as a new subtree at PREFIX.

(fn PREFIX REPOSITORY REF ARGS)" t nil)(autoload 'magit-subtree-add-commit "magit-subtree" "Add COMMIT as a new subtree at PREFIX.

(fn PREFIX COMMIT ARGS)" t nil)(autoload 'magit-subtree-merge "magit-subtree" "Merge COMMIT into the PREFIX subtree.

(fn PREFIX COMMIT ARGS)" t nil)(autoload 'magit-subtree-pull "magit-subtree" "Pull REF from REPOSITORY into the PREFIX subtree.

(fn PREFIX REPOSITORY REF ARGS)" t nil)(autoload 'magit-subtree-push "magit-subtree" "Extract the history of the subtree PREFIX and push it to REF on REPOSITORY.

(fn PREFIX REPOSITORY REF ARGS)" t nil)(autoload 'magit-subtree-split "magit-subtree" "Extract the history of the subtree PREFIX.

(fn PREFIX COMMIT ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-subtree" '("magit-")))(autoload 'magit-tag "magit" nil t)(autoload 'magit-tag-create "magit-tag" "Create a new tag with the given NAME at REV.
With a prefix argument annotate the tag.

(git tag [--annotate] NAME REV)

(fn NAME REV &optional ARGS)" t nil)(autoload 'magit-tag-delete "magit-tag" "Delete one or more tags.
If the region marks multiple tags (and nothing else), then offer
to delete those, otherwise prompt for a single tag to be deleted,
defaulting to the tag at point.

(git tag -d TAGS)

(fn TAGS)" t nil)(autoload 'magit-tag-prune "magit-tag" "Offer to delete tags missing locally from REMOTE, and vice versa.

(fn TAGS REMOTE-TAGS REMOTE)" t nil)(autoload 'magit-tag-release "magit-tag" "Create a release tag.

Assume that release tags match `magit-release-tag-regexp'.

First prompt for the name of the new tag using the highest
existing tag as initial input and leaving it to the user to
increment the desired part of the version string.

If `--annotate' is enabled, then prompt for the message of the
new tag.  Base the proposed tag message on the message of the
highest tag, provided that that contains the corresponding
version string and substituting the new version string for that.
Otherwise propose something like \"Foo-Bar 1.2.3\", given, for
example, a TAG \"v1.2.3\" and a repository located at something
like \"/path/to/foo-bar\".

(fn TAG MSG &optional ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-tag" '("magit-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-transient" '("magit-")))(autoload 'magit-emacs-Q-command "magit-utils" "Show a shell command that runs an uncustomized Emacs with only Magit loaded.
See info node `(magit)Debugging Tools' for more information." t nil)(autoload 'Info-follow-nearest-node--magit-gitman "magit-utils" "

(fn FN &optional FORK)" nil nil)(advice-add 'Info-follow-nearest-node :around 'Info-follow-nearest-node--magit-gitman)(advice-add 'org-man-export :around 'org-man-export--magit-gitman)(autoload 'org-man-export--magit-gitman "magit-utils" "

(fn FN LINK DESCRIPTION FORMAT)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-utils" '("magit-")))(defvar magit-wip-mode nil "Non-nil if Magit-Wip mode is enabled.
See the `magit-wip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-mode'.")(autoload 'magit-wip-mode "magit-wip" "Save uncommitted changes to work-in-progress refs.

If called interactively, enable Magit-Wip mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Whenever appropriate (i.e. when dataloss would be a possibility
otherwise) this mode causes uncommitted changes to be committed
to dedicated work-in-progress refs.

For historic reasons this mode is implemented on top of four
other `magit-wip-*' modes, which can also be used individually,
if you want finer control over when the wip refs are updated;
but that is discouraged.

(fn &optional ARG)" t nil)(put 'magit-wip-after-save-mode 'globalized-minor-mode t)(defvar magit-wip-after-save-mode nil "Non-nil if Magit-Wip-After-Save mode is enabled.
See the `magit-wip-after-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-after-save-mode'.")(autoload 'magit-wip-after-save-mode "magit-wip" "Toggle Magit-Wip-After-Save-Local mode in all buffers.
With prefix ARG, enable Magit-Wip-After-Save mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Magit-Wip-After-Save-Local mode is enabled in all buffers where
`magit-wip-after-save-local-mode-turn-on' would do it.
See `magit-wip-after-save-local-mode' for more information on Magit-Wip-After-Save-Local mode.

(fn &optional ARG)" t nil)(defvar magit-wip-after-apply-mode nil "Non-nil if Magit-Wip-After-Apply mode is enabled.
See the `magit-wip-after-apply-mode' command
for a description of this minor mode.")(autoload 'magit-wip-after-apply-mode "magit-wip" "Commit to work-in-progress refs.

If called interactively, enable Magit-Wip-After-Apply mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

After applying a change using any \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected files to the current wip refs.  For each branch there
may be two wip refs; one contains snapshots of the files as found
in the worktree and the other contains snapshots of the entries
in the index.

(fn &optional ARG)" t nil)(defvar magit-wip-before-change-mode nil "Non-nil if Magit-Wip-Before-Change mode is enabled.
See the `magit-wip-before-change-mode' command
for a description of this minor mode.")(autoload 'magit-wip-before-change-mode "magit-wip" "Commit to work-in-progress refs before certain destructive changes.

If called interactively, enable Magit-Wip-Before-Change mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

Before invoking a revert command or an \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected tracked files to the current wip refs.  For each branch
there may be two wip refs; one contains snapshots of the files
as found in the worktree and the other contains snapshots of the
entries in the index.

Only changes to files which could potentially be affected by the
command which is about to be called are committed.

(fn &optional ARG)" t nil)(autoload 'magit-wip-commit-initial-backup "magit-wip" "Before saving, commit current file to a worktree wip ref.

The user has to add this function to `before-save-hook'.

Commit the current state of the visited file before saving the
current buffer to that file.  This backs up the same version of
the file as `backup-buffer' would, but stores the backup in the
worktree wip ref, which is also used by the various Magit Wip
modes, instead of in a backup file as `backup-buffer' would.

This function ignores the variables that affect `backup-buffer'
and can be used along-side that function, which is recommended
because this function only backs up files that are tracked in
a Git repository." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-wip" '("magit-")))(autoload 'magit-worktree "magit-worktree" nil t)(autoload 'magit-worktree-checkout "magit-worktree" "Checkout BRANCH in a new worktree at PATH.

(fn PATH BRANCH)" t nil)(autoload 'magit-worktree-branch "magit-worktree" "Create a new BRANCH and check it out in a new worktree at PATH.

(fn PATH BRANCH START-POINT &optional FORCE)" t nil)(autoload 'magit-worktree-move "magit-worktree" "Move WORKTREE to PATH.

(fn WORKTREE PATH)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-worktree" '("magit-")))(put 'git-commit-major-mode 'safe-local-variable (lambda (val) (memq val '(text-mode markdown-mode org-mode fundamental-mode git-commit-elisp-text-mode))))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-commit" '("git-commit-" "global-git-commit-mode")))(autoload 'transient-insert-suffix "transient" "Insert a SUFFIX into PREFIX before LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)" nil nil)(function-put 'transient-insert-suffix 'lisp-indent-function 'defun)(autoload 'transient-append-suffix "transient" "Insert a SUFFIX into PREFIX after LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)" nil nil)(function-put 'transient-append-suffix 'lisp-indent-function 'defun)(autoload 'transient-replace-suffix "transient" "Replace the suffix at LOC in PREFIX with SUFFIX.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)" nil nil)(function-put 'transient-replace-suffix 'lisp-indent-function 'defun)(autoload 'transient-remove-suffix "transient" "Remove the suffix or group at LOC in PREFIX.
PREFIX is a prefix command, a symbol.
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC)" nil nil)(function-put 'transient-remove-suffix 'lisp-indent-function 'defun)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "transient" '("magit--fit-window-to-buffer" "transient-")))(autoload 'with-editor-export-editor "with-editor" "Teach subsequent commands to use current Emacs instance as editor.

Set and export the environment variable ENVVAR, by default
\"EDITOR\".  The value is automatically generated to teach
commands to use the current Emacs instance as \"the editor\".

This works in `shell-mode', `term-mode', `eshell-mode' and
`vterm'.

(fn &optional (ENVVAR \"EDITOR\"))" t nil)(autoload 'with-editor-export-git-editor "with-editor" "Like `with-editor-export-editor' but always set `$GIT_EDITOR'." t nil)(autoload 'with-editor-export-hg-editor "with-editor" "Like `with-editor-export-editor' but always set `$HG_EDITOR'." t nil)(defvar shell-command-with-editor-mode nil "Non-nil if Shell-Command-With-Editor mode is enabled.
See the `shell-command-with-editor-mode' command
for a description of this minor mode.")(autoload 'shell-command-with-editor-mode "with-editor" "Teach `shell-command' to use current Emacs instance as editor.

If called interactively, enable Shell-Command-With-Editor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

Teach `shell-command', and all commands that ultimately call that
command, to use the current Emacs instance as editor by executing
\"EDITOR=CLIENT COMMAND&\" instead of just \"COMMAND&\".

CLIENT is automatically generated; EDITOR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming no other variable overrides the effect of \"$EDITOR\".
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Alternatively you can use the `with-editor-async-shell-command',
which also allows the use of another variable instead of
\"EDITOR\".

(fn &optional ARG)" t nil)(autoload 'with-editor-async-shell-command "with-editor" "Like `async-shell-command' but with `$EDITOR' set.

Execute string \"ENVVAR=CLIENT COMMAND\" in an inferior shell;
display output, if any.  With a prefix argument prompt for an
environment variable, otherwise the default \"EDITOR\" variable
is used.  With a negative prefix argument additionally insert
the COMMAND's output at point.

CLIENT is automatically generated; ENVVAR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming it respects ENVVAR as an \"EDITOR\"-like variable.
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Also see `async-shell-command' and `shell-command'.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t nil)(autoload 'with-editor-shell-command "with-editor" "Like `shell-command' or `with-editor-async-shell-command'.
If COMMAND ends with \"&\" behave like the latter,
else like the former.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "with-editor" '("server-" "shell-command--shell-command-with-editor-mode" "start-file-process--with-editor-process-filter" "with-editor")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-section" '("isearch-clean-overlays@magit-mode" "magit-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treemacs-persp" '("treemacs-persp-")))(autoload 'persp-def-auto-persp "persp-mode" "

(fn NAME &rest KEYARGS &key BUFFER-NAME FILE-NAME MODE MODE-NAME MINOR-MODE MINOR-MODE-NAME PREDICATE HOOKS DYN-ENV GET-NAME GET-BUFFER GET-PERSP SWITCH PARAMETERS NOAUTO WEAK USER-DATA ON-MATCH AFTER-MATCH DONT-PICK-UP-BUFFERS DELETE)" nil nil)(define-obsolete-function-alias 'def-auto-persp 'persp-def-auto-persp "persp-mode 2.9.6")(autoload 'persp-def-buffer-save/load "persp-mode" "

(fn &rest KEYARGS &key BUFFER-NAME FILE-NAME MODE MODE-NAME MINOR-MODE MINOR-MODE-NAME PREDICATE TAG-SYMBOL SAVE-VARS SAVE-FUNCTION LOAD-FUNCTION AFTER-LOAD-FUNCTION MODE-RESTORE-FUNCTION APPEND)" nil nil)(define-obsolete-function-alias 'def-persp-buffer-save/load 'persp-def-buffer-save/load "persp-mode 2.9.6")(defvar persp-mode nil "Non-nil if Persp mode is enabled.
See the `persp-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `persp-mode'.")(autoload 'persp-mode "persp-mode" "Toggle the persp-mode.
When active, keeps track of multiple 'perspectives',
named collections of buffers and window configurations.
Here is a keymap of this minor mode:
\\{persp-mode-map}

If called interactively, enable Persp mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "persp-mode" '("*persp-" "clear-window-persp" "def-" "get-" "ido-toggle-persp-filter" "persp" "safe-persp-" "set-" "window-persp-set-p" "with-persp-ido-hooks")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-gutter-fringe" '("git-gutter-fr")))(autoload 'git-gutter:linum-setup "git-gutter" "Setup for linum-mode." nil nil)(autoload 'git-gutter-mode "git-gutter" "Git-Gutter mode

If called interactively, enable Git-Gutter mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-git-gutter-mode 'globalized-minor-mode t)(defvar global-git-gutter-mode nil "Non-nil if Global Git-Gutter mode is enabled.
See the `global-git-gutter-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-git-gutter-mode'.")(autoload 'global-git-gutter-mode "git-gutter" "Toggle Git-Gutter mode in all buffers.
With prefix ARG, enable Global Git-Gutter mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Git-Gutter mode is enabled in all buffers where
`git-gutter--turn-on' would do it.
See `git-gutter-mode' for more information on Git-Gutter mode.

(fn &optional ARG)" t nil)(autoload 'git-gutter "git-gutter" "Show diff information in gutter" t nil)(autoload 'git-gutter:toggle "git-gutter" "Toggle to show diff information." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-gutter" '("git-gutter")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "fringe-helper" '("fringe-")))(autoload 'vi-tilde-fringe-mode "vi-tilde-fringe" "Buffer-local minor mode to display tildes in the fringe when the line is
empty.

If called interactively, enable Vi-Tilde-Fringe mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-vi-tilde-fringe-mode 'globalized-minor-mode t)(defvar global-vi-tilde-fringe-mode nil "Non-nil if Global Vi-Tilde-Fringe mode is enabled.
See the `global-vi-tilde-fringe-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-vi-tilde-fringe-mode'.")(autoload 'global-vi-tilde-fringe-mode "vi-tilde-fringe" "Toggle Vi-Tilde-Fringe mode in all buffers.
With prefix ARG, enable Global Vi-Tilde-Fringe mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Vi-Tilde-Fringe mode is enabled in all buffers where
`vi-tilde-fringe-mode--turn-on' would do it.
See `vi-tilde-fringe-mode' for more information on Vi-Tilde-Fringe mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "vi-tilde-fringe" '("vi-tilde-fringe-")))(autoload 'evil-backward-arg "evil-args" "Move the cursor backward COUNT arguments.

(fn COUNT)" t nil)(autoload 'evil-forward-arg "evil-args" "Move the cursor forward COUNT arguments.

(fn COUNT)" t nil)(autoload 'evil-inner-arg "evil-args")(autoload 'evil-outer-arg "evil-args")(autoload 'evil-jump-out-args "evil-args" "Move the cursor out of the nearest enclosing matching pairs.

(fn COUNT)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-args" '("evil-args-")))(autoload 'evilem--collect "evil-easymotion" "Repeatedly execute func, and collect the cursor positions into a list

(fn FUNC &optional SCOPE ALL-WINDOWS INITIAL-POINT SORT-KEY COLLECT-POSTPROCESS INCLUDE-INVISIBLE)" nil nil)(autoload 'evilem-motion-forward-word-begin "evil-easymotion" nil t)(autoload 'evilem-motion-forward-WORD-begin "evil-easymotion" nil t)(autoload 'evilem-motion-forward-word-end "evil-easymotion" nil t)(autoload 'evilem-motion-forward-WORD-end "evil-easymotion" nil t)(autoload 'evilem-motion-backward-word-begin "evil-easymotion" nil t)(autoload 'evilem-motion-backward-WORD-begin "evil-easymotion" nil t)(autoload 'evilem-motion-backward-word-end "evil-easymotion" nil t)(autoload 'evilem-motion-backward-WORD-end "evil-easymotion" nil t)(autoload 'evilem-motion-next-line "evil-easymotion" nil t)(autoload 'evilem-motion-previous-line "evil-easymotion" nil t)(autoload 'evilem-motion-next-visual-line "evil-easymotion" nil t)(autoload 'evilem-motion-previous-visual-line "evil-easymotion" nil t)(autoload 'evilem-motion-find-char-to "evil-easymotion" nil t)(autoload 'evilem-motion-find-char-to-backward "evil-easymotion" nil t)(autoload 'evilem-motion-find-char "evil-easymotion" nil t)(autoload 'evilem-motion-find-char-backward "evil-easymotion" nil t)(autoload 'evilem-motion-backward-section-begin "evil-easymotion" nil t)(autoload 'evilem-motion-backward-section-end "evil-easymotion" nil t)(autoload 'evilem-motion-forward-section-begin "evil-easymotion" nil t)(autoload 'evilem-motion-forward-section-end "evil-easymotion" nil t)(autoload 'evilem-motion-backward-sentence-begin "evil-easymotion" nil t)(autoload 'evilem-motion-forward-sentence-begin "evil-easymotion" nil t)(autoload 'evilem-motion-search-next "evil-easymotion" nil t)(autoload 'evilem-motion-search-previous "evil-easymotion" nil t)(autoload 'evilem-motion-search-word-forward "evil-easymotion" nil t)(autoload 'evilem-motion-search-word-backward "evil-easymotion" nil t)(autoload 'evilem-motion-previous-line-first-non-blank "evil-easymotion" nil t)(autoload 'evilem-motion-next-line-first-non-blank "evil-easymotion" nil t)(autoload 'evilem-default-keybindings "evil-easymotion" "Define easymotions for all motions evil defines by default

(fn PREFIX)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-easymotion" '("evilem-")))(autoload 'evil-embrace-enable-evil-surround-integration "evil-embrace" nil t nil)(autoload 'evil-embrace-disable-evil-surround-integration "evil-embrace" nil t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-embrace" '("evil-embrace-")))(autoload 'embrace-delete "embrace" nil t nil)(autoload 'embrace-change "embrace" nil t nil)(autoload 'embrace-add "embrace" nil t nil)(autoload 'embrace-commander "embrace" nil t nil)(autoload 'embrace-LaTeX-mode-hook "embrace" nil nil nil)(autoload 'embrace-org-mode-hook "embrace" nil nil nil)(autoload 'embrace-ruby-mode-hook "embrace" nil nil nil)(autoload 'embrace-emacs-lisp-mode-hook "embrace" nil nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "embrace" '("embrace-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cc-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "clojure-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cperl-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "css-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "enh-ruby-mode-expansions" '("er/add-enh-ruby-mode-expansions")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "er-basic-expansions" '("er--" "er/mark-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "erlang-mode-expansions" '("er/add-erlang-mode-expansions")))(autoload 'er/expand-region "expand-region" "Increase selected region by semantic units.

With prefix argument expands the region that many times.
If prefix argument is negative calls `er/contract-region'.
If prefix argument is 0 it resets point and mark to their state
before calling `er/expand-region' for the first time.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "expand-region-core" '("er--" "er/")))(let ((loads (get 'expand-region 'custom-loads))) (if (member '"expand-region-custom" loads) nil (put 'expand-region 'custom-loads (cons '"expand-region-custom" loads))))(defvar expand-region-preferred-python-mode 'python "The name of your preferred python mode")(defvar expand-region-guess-python-mode t "If expand-region should attempt to guess your preferred python mode")(defvar expand-region-autocopy-register "" "If set to a string of a single character (try \"e\"), then the
contents of the most recent expand or contract command will
always be copied to the register named after that character.")(defvar expand-region-skip-whitespace t "If expand-region should skip past whitespace on initial expansion")(defvar expand-region-fast-keys-enabled t "If expand-region should bind fast keys after initial expand/contract")(defvar expand-region-contract-fast-key "-" "Key to use after an initial expand/contract to contract once more.")(defvar expand-region-reset-fast-key "0" "Key to use after an initial expand/contract to undo.")(defvar expand-region-exclude-text-mode-expansions '(html-mode nxml-mode) "List of modes which derive from `text-mode' for which text mode expansions are not appropriate.")(defvar expand-region-smart-cursor nil "Defines whether the cursor should be placed intelligently after expansion.

If set to t, and the cursor is already at the beginning of the new region,
keep it there; otherwise, put it at the end of the region.

If set to nil, always place the cursor at the beginning of the region.")(define-obsolete-variable-alias 'er/enable-subword-mode\? 'expand-region-subword-enabled "2019-03-23")(defvar expand-region-subword-enabled nil "Whether expand-region should use subword expansions.")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "expand-region-custom" '("expand-region-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "feature-mode-expansions" '("er--block-between-keywords" "er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "html-mode-expansions" '("er--" "er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2-mode-expansions" '("er/add-js2-mode-expansions" "js2-mark-parent-statement")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jsp-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "latex-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nxml-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "octave-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-el-expansions" '("er--python-string-delimiter" "er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-el-fgallina-expansions" '("er--python-" "er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-mode-expansions" '("er--" "er/" "py-goto-beyond-clause")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ruby-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sml-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "subword-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "text-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "the-org-mode-expansions" '("er/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "web-mode-expansions" '("er/add-web-mode-expansions")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "yaml-mode-expansions" '("er--" "er/" "yaml-indent")))(autoload 'evil-surround-delete "evil-surround" "Delete the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with
the overlays OUTER and INNER, where OUTER includes the delimiters
and INNER excludes them. The intersection (i.e., difference)
between these overlays is what is deleted.

(fn CHAR &optional OUTER INNER)" t nil)(autoload 'evil-surround-change "evil-surround" "Change the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with the
overlays OUTER and INNER, which are passed to `evil-surround-delete'.

(fn CHAR &optional OUTER INNER)" t nil)(autoload 'evil-surround-mode "evil-surround" "Buffer-local minor mode to emulate surround.vim.

If called interactively, enable Evil-Surround mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'turn-on-evil-surround-mode "evil-surround" "Enable evil-surround-mode in the current buffer." nil nil)(autoload 'turn-off-evil-surround-mode "evil-surround" "Disable evil-surround-mode in the current buffer." nil nil)(put 'global-evil-surround-mode 'globalized-minor-mode t)(defvar global-evil-surround-mode nil "Non-nil if Global Evil-Surround mode is enabled.
See the `global-evil-surround-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-surround-mode'.")(autoload 'global-evil-surround-mode "evil-surround" "Toggle Evil-Surround mode in all buffers.
With prefix ARG, enable Global Evil-Surround mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Surround mode is enabled in all buffers where
`turn-on-evil-surround-mode' would do it.
See `evil-surround-mode' for more information on Evil-Surround mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-surround" '("evil-surround-")))(defvar evil-escape-mode nil "Non-nil if Evil-Escape mode is enabled.
See the `evil-escape-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-escape-mode'.")(autoload 'evil-escape-mode "evil-escape" "Buffer-local minor mode to escape insert state and everything else
with a key sequence.

If called interactively, enable Evil-Escape mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-escape" '("evil-escape")))(autoload 'evil-exchange "evil-exchange" "Exchange two regions with evil motion." t)(autoload 'evil-exchange-cancel "evil-exchange" "Cancel current pending exchange." t nil)(autoload 'evil-exchange-install "evil-exchange" "Setting evil-exchange key bindings." nil nil)(autoload 'evil-exchange-cx-install "evil-exchange" "Setting evil-exchange key bindings in a vim-compatible way" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-exchange" '("evil-exchange")))(autoload 'evil-indent-plus-i-indent "evil-indent-plus" nil t)(autoload 'evil-indent-plus-a-indent "evil-indent-plus" nil t)(autoload 'evil-indent-plus-i-indent-up "evil-indent-plus" nil t)(autoload 'evil-indent-plus-a-indent-up "evil-indent-plus" nil t)(autoload 'evil-indent-plus-i-indent-up-down "evil-indent-plus" nil t)(autoload 'evil-indent-plus-a-indent-up-down "evil-indent-plus" nil t)(autoload 'evil-indent-plus-default-bindings "evil-indent-plus" "Set the default evil-indent-plus keybindings." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-indent-plus" '("evil-indent-plus--")))(autoload 'evil-lion-left "evil-lion" nil t)(autoload 'evil-lion-right "evil-lion" nil t)(defvar evil-lion-mode nil "Non-nil if Evil-Lion mode is enabled.
See the `evil-lion-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-lion-mode'.")(autoload 'evil-lion-mode "evil-lion" "evil-lion global mode, defines align operators 'gl' and 'gL'.

If called interactively, enable Evil-Lion mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

  Align with `gl MOTION CHAR` or right-align with `gL MOTION CHAR`.

  If CHAR is `/` you will be prompted for a regular expression instead
  of a plain character.

  If CHAR is `RET` alignment will be performed with align.el's rules
  specific for the current major mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-lion" '("evil-lion-")))(autoload 'evilnc-comment-or-uncomment-region-internal "evil-nerd-commenter" "Comment or uncomment region from START to END.

(fn START END)" nil nil)(autoload 'evilnc-comment-or-uncomment-region "evil-nerd-commenter" "Comment or uncomment region from START to END.

(fn START END)" nil nil)(autoload 'evilnc-comment-or-uncomment-paragraphs "evil-nerd-commenter" "Comment or uncomment NUM paragraph(s).
A paragraph is a continuation non-empty lines.
Paragraphs are separated by empty lines.

(fn &optional NUM)" t nil)(autoload 'evilnc-comment-or-uncomment-to-the-line "evil-nerd-commenter" "Comment or uncomment from current line to LINENUM line.

(fn &optional LINENUM)" t nil)(autoload 'evilnc-quick-comment-or-uncomment-to-the-line "evil-nerd-commenter" "Comment/uncomment to line number by LAST-DIGITS.
For example, you can use either \\<M-53>\\[evilnc-quick-comment-or-uncomment-to-the-line] or \\<M-3>\\[evilnc-quick-comment-or-uncomment-to-the-line] to comment to the line 6453

(fn &optional LAST-DIGITS)" t nil)(autoload 'evilnc-toggle-invert-comment-line-by-line "evil-nerd-commenter" "Please note this command may NOT work on complex evil text objects." t nil)(autoload 'evilnc-toggle-comment-empty-lines "evil-nerd-commenter" "Toggle the flag which decide if empty line will be commented." t nil)(autoload 'evilnc-comment-or-uncomment-lines "evil-nerd-commenter" "Comment or uncomment NUM lines.  NUM could be negative.

Case 1: If no region selected, comment/uncomment on current line.
If NUM>1, comment/uncomment extra N-1 lines from next line.

Case 2: Selected region is expanded to make it contain whole lines.
Then we comment/uncomment the expanded region.  NUM is ignored.

Case 3: If a region inside of ONE line is selected,
we comment/uncomment that region.
CORRECT comment syntax will be used for C++/Java/Javascript.

(fn &optional NUM)" t nil)(autoload 'evilnc-copy-and-comment-lines "evil-nerd-commenter" "Copy&paste NUM lines and comment out original lines.
NUM could be negative.

Case 1: If no region selected, operate on current line.
if NUM>1, comment/uncomment extra N-1 lines from next line

Case 2: Selected region is expanded to make it contain whole lines.
Then we operate the expanded region.  NUM is ignored.

(fn &optional NUM)" t nil)(autoload 'evilnc-comment-and-kill-ring-save "evil-nerd-commenter" "Comment lines save origin lines into `kill-ring'.
NUM could be negative.

Case 1: If no region selected, operate on current line.
;; if NUM>1, comment/uncomment extra N-1 lines from next line

Case 2: Selected region is expanded to make it contain whole lines.
Then we operate the expanded region.  NUM is ignored.

(fn &optional NUM)" t nil)(autoload 'evilnc-copy-to-line "evil-nerd-commenter" "Copy from current line to LINENUM line.  For non-evil user only.

(fn &optional LINENUM)" t nil)(autoload 'evilnc-kill-to-line "evil-nerd-commenter" "Kill from the current line to the LINENUM line.  For non-evil user only.

(fn &optional LINENUM)" t nil)(autoload 'evilnc-version "evil-nerd-commenter" "The version number." t nil)(autoload 'evilnc-default-hotkeys "evil-nerd-commenter" "Setup the key bindings of evil-nerd-comment.
If NO-EVIL-KEYBINDINGS is t, we don't define keybindings in EVIL,
if NO-EMACS-KEYBINDINGS is t, we don't define keybindings in EMACS mode.

(fn &optional NO-EVIL-KEYBINDINGS NO-EMACS-KEYBINDINGS)" t nil)(autoload 'evilnc-imenu-create-index-function "evil-nerd-commenter" "Imenu function find comments." nil nil)(autoload 'evilnc-comment-or-uncomment-html-tag "evil-nerd-commenter" "Comment or uncomment html tag(s).
If no region is selected, current tag under focus is automatically selected.
In this case, only one tag is selected.
If users manually select region, the region could cross multiple sibling tags
and automatically expands to include complete tags.
Users can press \"v\" key in evil mode to select multiple tags.
This command is not dependent on any 3rd party package." t nil)(autoload 'evilnc-comment-or-uncomment-html-paragraphs "evil-nerd-commenter" "Comment or uncomment NUM paragraphs contain html tag.
A paragraph is a continuation non-empty lines.
Paragraphs are separated by empty lines.

(fn &optional NUM)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-nerd-commenter" '("evilnc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-nerd-commenter-operator" '("evilnc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-nerd-commenter-sdk" '("evilnc-")))(autoload 'evil-numbers/inc-at-pt "evil-numbers" nil t)(autoload 'evil-numbers/dec-at-pt "evil-numbers" nil t)(autoload 'evil-numbers/inc-at-pt-incremental "evil-numbers" nil t)(autoload 'evil-numbers/dec-at-pt-incremental "evil-numbers" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-numbers" '("evil-numbers-")))(autoload 'evil-snipe-def "evil-snipe" "Define a N char snipe and bind it to FORWARD-KEY and BACKWARD-KEY.
TYPE can be inclusive or exclusive. Specify FORWARD-FN and/or BACKWARD-FN to
explicitly choose the function names.

(fn N TYPE FORWARD-KEY BACKWARD-KEY &key FORWARD-FN BACKWARD-FN)" nil t)(autoload 'evil-snipe-s "evil-snipe" nil t)(autoload 'evil-snipe-S "evil-snipe" nil t)(autoload 'evil-snipe-x "evil-snipe" nil t)(autoload 'evil-snipe-X "evil-snipe" nil t)(autoload 'evil-snipe-f "evil-snipe" nil t)(autoload 'evil-snipe-F "evil-snipe" nil t)(autoload 'evil-snipe-t "evil-snipe" nil t)(autoload 'evil-snipe-T "evil-snipe" nil t)(autoload 'turn-on-evil-snipe-mode "evil-snipe" "Enable evil-snipe-mode in the current buffer." nil nil)(autoload 'turn-on-evil-snipe-override-mode "evil-snipe" "Enable evil-snipe-mode in the current buffer." nil nil)(autoload 'turn-off-evil-snipe-mode "evil-snipe" "Disable `evil-snipe-local-mode' in the current buffer." nil nil)(autoload 'turn-off-evil-snipe-override-mode "evil-snipe" "Disable evil-snipe-override-mode in the current buffer." nil nil)(autoload 'evil-snipe-local-mode "evil-snipe" "Enable `evil-snipe' in the current buffer.

If called interactively, enable Evil-Snipe-Local mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'evil-snipe-override-local-mode "evil-snipe" "Override evil-mode's f/F/t/T/;/, motions.

If called interactively, enable Evil-Snipe-Override-Local mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'evil-snipe-mode 'globalized-minor-mode t)(defvar evil-snipe-mode nil "Non-nil if Evil-Snipe mode is enabled.
See the `evil-snipe-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-snipe-mode'.")(autoload 'evil-snipe-mode "evil-snipe" "Toggle Evil-Snipe-Local mode in all buffers.
With prefix ARG, enable Evil-Snipe mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Snipe-Local mode is enabled in all buffers where
`turn-on-evil-snipe-mode' would do it.
See `evil-snipe-local-mode' for more information on Evil-Snipe-Local mode.

(fn &optional ARG)" t nil)(put 'evil-snipe-override-mode 'globalized-minor-mode t)(defvar evil-snipe-override-mode nil "Non-nil if Evil-Snipe-Override mode is enabled.
See the `evil-snipe-override-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-snipe-override-mode'.")(autoload 'evil-snipe-override-mode "evil-snipe" "Toggle Evil-Snipe-Override-Local mode in all buffers.
With prefix ARG, enable Evil-Snipe-Override mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Snipe-Override-Local mode is enabled in all buffers where
`turn-on-evil-snipe-override-mode' would do it.
See `evil-snipe-override-local-mode' for more information on Evil-Snipe-Override-Local mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-snipe" '("evil-snipe-")))(autoload 'evil-textobj-anyblock-inner-block "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-a-block "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-open-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-open-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-close-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-close-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-open-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-open-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-close-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-close-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-any-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-any-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-any-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-any-block-end "evil-textobj-anyblock" nil t)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-textobj-anyblock" '("evil-textobj-anyblock-")))(defvar evil-traces-mode nil "Non-nil if Evil-Traces mode is enabled.
See the `evil-traces-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-traces-mode'.")(autoload 'evil-traces-mode "evil-traces" "Global minor mode for evil-traces.

If called interactively, enable Evil-Traces mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-traces" '("evil-traces-")))(autoload 'evil-visualstar-mode "evil-visualstar" "Minor mode for visual star selection.

If called interactively, enable Evil-Visualstar mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-evil-visualstar-mode 'globalized-minor-mode t)(defvar global-evil-visualstar-mode nil "Non-nil if Global Evil-Visualstar mode is enabled.
See the `global-evil-visualstar-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-visualstar-mode'.")(autoload 'global-evil-visualstar-mode "evil-visualstar" "Toggle Evil-Visualstar mode in all buffers.
With prefix ARG, enable Global Evil-Visualstar mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Visualstar mode is enabled in all buffers where
`turn-on-evil-visualstar-mode' would do it.
See `evil-visualstar-mode' for more information on Evil-Visualstar mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-evil-visualstar-mode "evil-visualstar" "Turns on visual star selection." t nil)(autoload 'turn-off-evil-visualstar-mode "evil-visualstar" "Turns off visual star selection." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-visualstar" '("evil-visualstar/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "exato" '("exato-")))(autoload 'evil-quick-diff "evil-quick-diff" "Ediff two regions with evil motion." t)(autoload 'evil-quick-diff-cancel "evil-quick-diff-cancel" "Cancel evil-quick-diff and remove selections." t)(autoload 'evil-quick-diff-install "evil-quick-diff" "Setting evil-quick-diff key bindings." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-quick-diff" '("evil-quick-diff-")))(autoload 'evil-collection-translate-key "evil-collection" "Translate keys in the keymap(s) corresponding to STATES and KEYMAPS.
STATES should be the name of an evil state, a list of states, or nil. KEYMAPS
should be a symbol corresponding to the keymap to make the translations in or a
list of keymap symbols. Like `evil-define-key', when a keymap does not exist,
the keybindings will be deferred until the keymap is defined, so
`with-eval-after-load' is not necessary. TRANSLATIONS corresponds to a list of
key replacement pairs. For example, specifying \"a\" \"b\" will bind \"a\" to
\"b\"'s definition in the keymap. Specifying nil as a replacement will unbind a
key. If DESTRUCTIVE is nil, a backup of the keymap will be stored on the initial
invocation, and future invocations will always look up keys in the backup
keymap. When no TRANSLATIONS are given, this function will only create the
backup keymap without making any translations. On the other hand, if DESTRUCTIVE
is non-nil, the keymap will be destructively altered without creating a backup.
For example, calling this function multiple times with \"a\" \"b\" \"b\" \"a\"
would continue to swap and unswap the definitions of these keys. This means that
when DESTRUCTIVE is non-nil, all related swaps/cycles should be done in the same
invocation.

(fn STATES KEYMAPS &rest TRANSLATIONS &key DESTRUCTIVE &allow-other-keys)" nil nil)(function-put 'evil-collection-translate-key 'lisp-indent-function 'defun)(autoload 'evil-collection-swap-key "evil-collection" "Wrapper around `evil-collection-translate-key' for swapping keys.
STATES, KEYMAPS, and ARGS are passed to `evil-collection-translate-key'. ARGS
should consist of key swaps (e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\"
\"a\" with `evil-collection-translate-key') and optionally keyword arguments for
`evil-collection-translate-key'.

(fn STATES KEYMAPS &rest ARGS)" nil t)(function-put 'evil-collection-swap-key 'lisp-indent-function 'defun)(autoload 'evil-collection-require "evil-collection" "Require the evil-collection-MODE file, but do not activate it.

MODE should be a symbol. This requires the evil-collection-MODE
feature without needing to manipulate `load-path'. NOERROR is
forwarded to `require'.

(fn MODE &optional NOERROR)" nil nil)(autoload 'evil-collection-init "evil-collection" "Register the Evil bindings for all modes in `evil-collection-mode-list'.

Alternatively, you may register select bindings manually, for
instance:

  (with-eval-after-load 'calendar
    (evil-collection-calendar-setup))

If MODES is specified (as either one mode or a list of modes), use those modes
instead of the modes in `evil-collection-mode-list'.

(fn &optional MODES)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-collection" '("evil-collection-")))(autoload 'annalist-record "annalist" "In the store for ANNALIST, TYPE, and LOCAL, record RECORD.
ANNALIST should correspond to the package/user recording this information (e.g.
'general, 'me, etc.). TYPE is the type of information being recorded (e.g.
'keybindings). LOCAL corresponds to whether to store RECORD only for the current
buffer. This information together is used to select where RECORD should be
stored in and later retrieved from with `annalist-describe'. RECORD should be a
list of items to record and later print as org headings and column entries in a
single row. If PLIST is non-nil, RECORD should be a plist instead of an ordered
list (e.g. '(keymap org-mode-map key \"C-c a\" ...)). The plist keys should be
the symbols used for the definition of TYPE.

(fn ANNALIST TYPE RECORD &key LOCAL PLIST)" nil nil)(autoload 'annalist-describe "annalist" "Describe information recorded by ANNALIST for TYPE.
For example: (annalist-describe 'general 'keybindings) If VIEW is non-nil, use
those settings for displaying recorded information instead of the defaults.

(fn ANNALIST TYPE &optional VIEW)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "annalist" '("annalist-")))(autoload 'vimish-fold "vimish-fold" "Fold active region staring at BEG, ending at END.

(fn BEG END)" t nil)(autoload 'vimish-fold-unfold "vimish-fold" "Delete all `vimish-fold--folded' overlays at point." t nil)(autoload 'vimish-fold-refold "vimish-fold" "Refold unfolded fold at point." t nil)(autoload 'vimish-fold-delete "vimish-fold" "Delete fold at point." t nil)(autoload 'vimish-fold-unfold-all "vimish-fold" "Unfold all folds in current buffer." t nil)(autoload 'vimish-fold-refold-all "vimish-fold" "Refold all closed folds in current buffer." t nil)(autoload 'vimish-fold-delete-all "vimish-fold" "Delete all folds in current buffer." t nil)(autoload 'vimish-fold-toggle "vimish-fold" "Toggle fold at point." t nil)(autoload 'vimish-fold-toggle-all "vimish-fold" "Toggle all folds in current buffer." t nil)(autoload 'vimish-fold-avy "vimish-fold" "Fold region of text between point and line selected with avy.

This feature needs `avy' package." t nil)(autoload 'vimish-fold-next-fold "vimish-fold" "Jump to next folded region in current buffer." t nil)(autoload 'vimish-fold-previous-fold "vimish-fold" "Jump to previous folded region in current buffer." t nil)(autoload 'vimish-fold-from-marks "vimish-fold" "Create folds from folding symbols.

Mark strings are controlled by `vimish-fold-marks' customize variable." t nil)(autoload 'vimish-fold-mode "vimish-fold" "Toggle `vimish-fold-mode' minor mode.

With a prefix argument ARG, enable `vimish-fold-mode' mode if ARG
is positive, and disable it otherwise.  If called from Lisp,
enable the mode if ARG is omitted or NIL, and toggle it if ARG is
`toggle'.

This minor mode sets hooks so when you `find-file' it calls
`vimish-fold--restore-folds' and when you kill a file it calls
`vimish-fold--save-folds'.

For globalized version of this mode see `vimish-fold-global-mode'.

(fn &optional ARG)" t nil)(put 'vimish-fold-global-mode 'globalized-minor-mode t)(defvar vimish-fold-global-mode nil "Non-nil if Vimish-Fold-Global mode is enabled.
See the `vimish-fold-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vimish-fold-global-mode'.")(autoload 'vimish-fold-global-mode "vimish-fold" "Toggle Vimish-Fold mode in all buffers.
With prefix ARG, enable Vimish-Fold-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Vimish-Fold mode is enabled in all buffers where
`vimish-fold-mode' would do it.
See `vimish-fold-mode' for more information on Vimish-Fold mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "vimish-fold" '("vimish-fold-")))(autoload 'evil-vimish-fold-mode "evil-vimish-fold" "Evil-vimish-fold-mode.

If called interactively, enable Evil-Vimish-Fold mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-evil-vimish-fold-mode 'globalized-minor-mode t)(defvar global-evil-vimish-fold-mode nil "Non-nil if Global Evil-Vimish-Fold mode is enabled.
See the `global-evil-vimish-fold-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-vimish-fold-mode'.")(autoload 'global-evil-vimish-fold-mode "evil-vimish-fold" "Toggle Evil-Vimish-Fold mode in all buffers.
With prefix ARG, enable Global Evil-Vimish-Fold mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Vimish-Fold mode is enabled in all buffers where
`turn-on-evil-vimish-fold-mode' would do it.
See `evil-vimish-fold-mode' for more information on Evil-Vimish-Fold mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-evil-vimish-fold-mode "evil-vimish-fold" nil nil nil)(autoload 'turn-off-evil-vimish-fold-mode "evil-vimish-fold" "Turn off `evil-vimish-fold-mode'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-vimish-fold" '("evil-vimish-fold-")))(autoload 'aya-create-one-line "auto-yasnippet" "A simplistic `aya-create' to create only one mirror.
You can still have as many instances of this mirror as you want.
It's less flexible than `aya-create', but faster.
It uses a different marker, which is `aya-marker-one-line'.
You can use it to quickly generate one-liners such as
menu.add_item(spamspamspam, \"spamspamspam\")" t nil)(autoload 'aya-create "auto-yasnippet" "Create a snippet from the text between BEG and END.
When the bounds are not given, use either the current region or line.

Remove `aya-marker' prefixes, write the corresponding snippet to
`aya-current', with words prefixed by `aya-marker' as fields, and
mirrors properly set up.

(fn &optional BEG END)" t nil)(autoload 'aya-expand "auto-yasnippet" "Insert the last yasnippet created by `aya-create'." t nil)(autoload 'aya-open-line "auto-yasnippet" "Call `open-line', unless there are abbrevs or snippets at point.
In that case expand them.  If there's a snippet expansion in progress,
move to the next field.  Call `open-line' if nothing else applies." t nil)(autoload 'aya-yank-snippet "auto-yasnippet" "Insert current snippet at point.
To save a snippet permanently, create an empty file and call this." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "auto-yasnippet" '("aya-")))(autoload 'doom-snippets-remove-compiled-snippets "doom-snippets" "Delete all .yas-compiled-snippets.el files." t nil)(autoload 'doom-snippets-initialize "doom-snippets" "Add `doom-snippets-dir' to `yas-snippet-dirs', replacing the default
yasnippet directory." nil nil)(eval-after-load 'yasnippet (lambda nil (doom-snippets-initialize)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-snippets" '("doom-snippets-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doom-snippets-lib" '("doom-snippets-")))(autoload 'adaptive-wrap-prefix-mode "adaptive-wrap" "Wrap the buffer text with adaptive filling.

If called interactively, enable Adaptive-Wrap-Prefix mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "adaptive-wrap" '("adaptive-wrap-" "lookup-key")))(autoload 'diredfl-mode "diredfl" "Enable additional font locking in `dired-mode'.

If called interactively, enable Diredfl mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'diredfl-global-mode 'globalized-minor-mode t)(defvar diredfl-global-mode nil "Non-nil if Diredfl-Global mode is enabled.
See the `diredfl-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `diredfl-global-mode'.")(autoload 'diredfl-global-mode "diredfl" "Toggle Diredfl mode in all buffers.
With prefix ARG, enable Diredfl-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Diredfl mode is enabled in all buffers where
`(lambda nil (when (derived-mode-p 'dired-mode) (diredfl-mode)))' would do it.
See `diredfl-mode' for more information on Diredfl mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diredfl" '("diredfl-")))(autoload 'dired-git-info-mode "dired-git-info" "Toggle git message info in current dired buffer.

If called interactively, enable Dired-Git-Info mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'dired-git-info-auto-enable "dired-git-info" "Enable `dired-git-info-mode' if current dired buffer is in a git repo.

Add this function to `dired-after-readin-hook' to enable the mode
automatically inside git repos." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dired-git-info" '("dgi-")))(autoload 'diff-hl-mode "diff-hl" "Toggle VC diff highlighting.

If called interactively, enable Diff-Hl mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'turn-on-diff-hl-mode "diff-hl" "Turn on `diff-hl-mode' or `diff-hl-dir-mode' in a buffer if appropriate." nil nil)(autoload 'diff-hl--global-turn-on "diff-hl" "Call `turn-on-diff-hl-mode' if the current major mode is applicable." nil nil)(autoload 'diff-hl-set-reference-rev "diff-hl" "Set the reference revision globally to REV.
When called interactively, REV read with completion.

The default value chosen using one of methods below:

- In a log view buffer, it uses the revision of current entry.
Call `vc-print-log' or `vc-print-root-log' first to open a log
view buffer.
- In a VC annotate buffer, it uses the revision of current line.
- In other situations, it uses the symbol at point.

Notice that this sets the reference revision globally, so in
files from other repositories, `diff-hl-mode' will not highlight
changes correctly, until you run `diff-hl-reset-reference-rev'.

Also notice that this will disable `diff-hl-amend-mode' in
buffers that enables it, since `diff-hl-amend-mode' overrides its
effect.

(fn REV)" t nil)(autoload 'diff-hl-reset-reference-rev "diff-hl" "Reset the reference revision globally to the most recent one." t nil)(put 'global-diff-hl-mode 'globalized-minor-mode t)(defvar global-diff-hl-mode nil "Non-nil if Global Diff-Hl mode is enabled.
See the `global-diff-hl-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-diff-hl-mode'.")(autoload 'global-diff-hl-mode "diff-hl" "Toggle Diff-Hl mode in all buffers.
With prefix ARG, enable Global Diff-Hl mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Diff-Hl mode is enabled in all buffers where
`diff-hl--global-turn-on' would do it.
See `diff-hl-mode' for more information on Diff-Hl mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diff-hl" '("diff-hl-")))(autoload 'diff-hl-amend-mode "diff-hl-amend" "Show changes against the second-last revision in `diff-hl-mode'.
Most useful with backends that support rewriting local commits,
and most importantly, \"amending\" the most recent one.
Currently only supports Git, Mercurial and Bazaar.

If called interactively, enable Diff-Hl-Amend mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-diff-hl-amend-mode 'globalized-minor-mode t)(defvar global-diff-hl-amend-mode nil "Non-nil if Global Diff-Hl-Amend mode is enabled.
See the `global-diff-hl-amend-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-diff-hl-amend-mode'.")(autoload 'global-diff-hl-amend-mode "diff-hl-amend" "Toggle Diff-Hl-Amend mode in all buffers.
With prefix ARG, enable Global Diff-Hl-Amend mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Diff-Hl-Amend mode is enabled in all buffers where
`turn-on-diff-hl-amend-mode' would do it.
See `diff-hl-amend-mode' for more information on Diff-Hl-Amend mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diff-hl-amend" '("diff-hl-amend-setup" "turn-on-diff-hl-amend-mode")))(autoload 'diff-hl-dired-mode "diff-hl-dired" "Toggle VC diff highlighting on the side of a Dired window.

If called interactively, enable Diff-Hl-Dired mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'diff-hl-dired-mode-unless-remote "diff-hl-dired" nil nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diff-hl-dired" '("diff-hl-dired-")))(defvar diff-hl-flydiff-mode nil "Non-nil if Diff-Hl-Flydiff mode is enabled.
See the `diff-hl-flydiff-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `diff-hl-flydiff-mode'.")(autoload 'diff-hl-flydiff-mode "diff-hl-flydiff" "Perform highlighting on-the-fly.
This is a global minor mode.  It alters how `diff-hl-mode' works.

If called interactively, enable Diff-Hl-Flydiff mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diff-hl-flydiff" '("diff-hl-flydiff")))(autoload 'diff-hl-inline-popup-hide "diff-hl-inline-popup" "Hide the current inline popup." t nil)(autoload 'diff-hl-inline-popup-show "diff-hl-inline-popup" "Create a phantom overlay to show the inline popup, with some
content LINES, and a HEADER and a FOOTER, at POINT.  KEYMAP is
added to the current keymaps.  CLOSE-HOOK is called when the popup
is closed.

(fn LINES &optional HEADER FOOTER KEYMAP CLOSE-HOOK POINT HEIGHT)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diff-hl-inline-popup" '("diff-hl-inline-popup-")))(defvar diff-hl-margin-mode nil "Non-nil if Diff-Hl-Margin mode is enabled.
See the `diff-hl-margin-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `diff-hl-margin-mode'.")(autoload 'diff-hl-margin-mode "diff-hl-margin" "Toggle displaying `diff-hl-mode' highlights on the margin.

If called interactively, enable Diff-Hl-Margin mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'diff-hl-margin-local-mode "diff-hl-margin" "Toggle displaying `diff-hl-mode' highlights on the margin locally.
You probably shouldn't use this function directly.

If called interactively, enable Diff-Hl-Margin-Local mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diff-hl-margin" '("diff-hl-")))(autoload 'diff-hl-show-hunk-inline-popup "diff-hl-show-hunk" "Implementation to show the hunk in a inline popup.
BUFFER is a buffer with the hunk.

(fn BUFFER &optional IGNORED-LINE)" nil nil)(autoload 'diff-hl-show-hunk-previous "diff-hl-show-hunk" "Go to previous hunk/change and show it." t nil)(autoload 'diff-hl-show-hunk-next "diff-hl-show-hunk" "Go to next hunk/change and show it." t nil)(autoload 'diff-hl-show-hunk "diff-hl-show-hunk" "Show the VC diff hunk at point.
The backend is determined by `diff-hl-show-hunk-function'." t nil)(autoload 'diff-hl-show-hunk-mouse-mode "diff-hl-show-hunk" "Enables the margin and fringe to show a posframe/popup with vc diffs when clicked.
By default, the popup shows only the current hunk, and
the line of the hunk that matches the current position is
highlighted.  The face, border and other visual preferences are
customizable.  It can be also invoked with the command
`diff-hl-show-hunk'
\\{diff-hl-show-hunk-mouse-mode-map}

If called interactively, enable Diff-Hl-Show-Hunk-Mouse mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-diff-hl-show-hunk-mouse-mode 'globalized-minor-mode t)(defvar global-diff-hl-show-hunk-mouse-mode nil "Non-nil if Global Diff-Hl-Show-Hunk-Mouse mode is enabled.
See the `global-diff-hl-show-hunk-mouse-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-diff-hl-show-hunk-mouse-mode'.")(autoload 'global-diff-hl-show-hunk-mouse-mode "diff-hl-show-hunk" "Toggle Diff-Hl-Show-Hunk-Mouse mode in all buffers.
With prefix ARG, enable Global Diff-Hl-Show-Hunk-Mouse mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Diff-Hl-Show-Hunk-Mouse mode is enabled in all buffers where
`diff-hl-show-hunk-mouse-mode' would do it.
See `diff-hl-show-hunk-mouse-mode' for more information on Diff-Hl-Show-Hunk-Mouse mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diff-hl-show-hunk" '("diff-hl-show-hunk-")))(autoload 'diff-hl-show-hunk-posframe "diff-hl-show-hunk-posframe" "Implementation to show the hunk in a posframe.

(fn BUFFER &optional LINE)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diff-hl-show-hunk-posframe" '("diff-hl-show-hunk-")))(autoload 'dired-rsync "dired-rsync" "Asynchronously copy files in dired to `DEST' using rsync.

`DEST' can be a relative filename and will be processed by
`expand-file-name' before being passed to the rsync command.

This function runs the copy asynchronously so Emacs won't block whilst
the copy is running.  It also handles both source and destinations on
ssh/scp tramp connections.

(fn DEST)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dired-rsync" '("dired-r")))(autoload 'fd-dired "fd-dired" "Run `fd' and go into Dired mode on a buffer of the output.
The command run (after changing into DIR) is essentially

    fd . ARGS -ls

except that the car of the variable `fd-dired-ls-option' specifies what to
use in place of \"-ls\" as the final argument.

(fn DIR ARGS)" t nil)(autoload 'fd-name-dired "fd-dired" "Search DIR recursively for files matching the globbing pattern PATTERN,
and run Dired on those files.
PATTERN is a shell wildcard (not an Emacs regexp) and need not be quoted.
The default command run (after changing into DIR) is

    fd . ARGS \\='PATTERN\\=' | fd-dired-ls-option

(fn DIR PATTERN)" t nil)(autoload 'fd-grep-dired "fd-dired" "Find files in DIR that contain matches for REGEXP and start Dired on output.
The command run (after changing into DIR) is

  fd . ARGS --exec rg --regexp REGEXP -0 -ls | fd-dired-ls-option

(fn DIR REGEXP)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "fd-dired" '("fd-")))(autoload 'undo-fu-disable-checkpoint "undo-fu" "Remove the undo-fu checkpoint, making all future actions unconstrained.

This command is needed when `undo-fu-ignore-keyboard-quit' is t,
since in this case `keyboard-quit' cannot be used
to perform unconstrained undo/redo actions." t nil)(autoload 'undo-fu-only-redo-all "undo-fu" "Redo all actions until the initial undo step.

wraps the `undo' function." t nil)(autoload 'undo-fu-only-redo "undo-fu" "Redo an action until the initial undo action.

wraps the `undo' function.

Optional argument ARG The number of steps to redo.

(fn &optional ARG)" t nil)(autoload 'undo-fu-only-undo "undo-fu" "Undo the last action.

wraps the `undo-only' function.

Optional argument ARG the number of steps to undo.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "undo-fu" '("undo-fu-")))(autoload 'undo-fu-session-mode "undo-fu-session" "Toggle saving the undo data in the current buffer (Undo-Fu Session Mode).

If called interactively, enable Undo-Fu-Session mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-undo-fu-session-mode 'globalized-minor-mode t)(defvar global-undo-fu-session-mode nil "Non-nil if Global Undo-Fu-Session mode is enabled.
See the `global-undo-fu-session-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-undo-fu-session-mode'.")(autoload 'global-undo-fu-session-mode "undo-fu-session" "Toggle Undo-Fu-Session mode in all buffers.
With prefix ARG, enable Global Undo-Fu-Session mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Undo-Fu-Session mode is enabled in all buffers where
`undo-fu-session-mode-turn-on' would do it.
See `undo-fu-session-mode' for more information on Undo-Fu-Session mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "undo-fu-session" '("undo-fu-session-")))(autoload 'browse-at-remote "browse-at-remote" "Browse the current file with `browse-url'." t nil)(autoload 'browse-at-remote-kill "browse-at-remote" "Add the URL of the current file to the kill ring.

Works like `browse-at-remote', but puts the address in the
kill ring instead of opening it with `browse-url'." t nil)(defalias 'bar-browse 'browse-at-remote "Browse the current file with `browse-url'.")(defalias 'bar-to-clipboard 'browse-at-remote-kill "Add the URL of the current file to the kill ring.

Works like `browse-at-remote', but puts the address in the
kill ring instead of opening it with `browse-url'.")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "browse-at-remote" '("browse-at-remote-")))(autoload 'git-timemachine-toggle "git-timemachine" "Toggle git timemachine mode." t nil)(autoload 'git-timemachine "git-timemachine" "Enable git timemachine for file of current buffer." t nil)(autoload 'git-timemachine-switch-branch "git-timemachine" "Enable git timemachine for current buffer, switching to GIT-BRANCH.

(fn GIT-BRANCH)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-timemachine" '("git-timemachine-")))(autoload 'gitattributes-mode "gitattributes-mode" "A major mode for editing .gitattributes files.
\\{gitattributes-mode-map}

(fn)" t nil)(dolist (pattern '("/\\.gitattributes\\'" "/info/attributes\\'" "/git/attributes\\'")) (add-to-list 'auto-mode-alist (cons pattern #'gitattributes-mode)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gitattributes-mode" '("gitattributes-mode-")))(autoload 'gitconfig-mode "gitconfig-mode" "A major mode for editing .gitconfig files.

(fn)" t nil)(dolist (pattern '("/\\.gitconfig\\'" "/\\.git/config\\'" "/modules/.*/config\\'" "/git/config\\'" "/\\.gitmodules\\'" "/etc/gitconfig\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitconfig-mode)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gitconfig-mode" '("gitconfig-")))(autoload 'gitignore-mode "gitignore-mode" "A major mode for editing .gitignore files.

(fn)" t nil)(dolist (pattern (list "/\\.gitignore\\'" "/info/exclude\\'" "/git/ignore\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitignore-mode)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gitignore-mode" '("gitignore-mode-font-lock-keywords")))(autoload 'vterm-module-compile "vterm" "Compile vterm-module." t nil)(autoload 'vterm--bookmark-handler "vterm" "Handler to restore a vterm bookmark BMK.

If a vterm buffer of the same name does not exist, the function will create a
new vterm buffer of the name. It also checks the current directory and sets
it to the bookmarked directory if needed.

(fn BMK)" nil nil)(autoload 'vterm-next-error-function "vterm" "Advance to the next error message and visit the file where the error was.
This is the value of `next-error-function' in Compilation
buffers.  Prefix arg N says how many error messages to move
forwards (or backwards, if negative).

Optional argument RESET clears all the errors.

(fn N &optional RESET)" t nil)(autoload 'vterm "vterm" "Create an interactive Vterm buffer.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

(fn &optional ARG)" t nil)(autoload 'vterm-other-window "vterm" "Create an interactive Vterm buffer in another window.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "vterm" '("vterm-")))(autoload 'flycheck-manual "flycheck" "Open the Flycheck manual." t nil)(autoload 'flycheck-mode "flycheck" "Flycheck is a minor mode for on-the-fly syntax checking.

In `flycheck-mode' the buffer is automatically syntax-checked
using the first suitable syntax checker from `flycheck-checkers'.
Use `flycheck-select-checker' to select a checker for the current
buffer manually.

If you run into issues, use `\\[flycheck-verify-setup]' to get help.

Flycheck supports many languages out of the box, and many
additional ones are available on MELPA.  Adding new ones is very
easy.  Complete documentation is available online at URL
`https://www.flycheck.org/en/latest/'.  Please report issues and
request features at URL `https://github.com/flycheck/flycheck'.

Flycheck displays its status in the mode line.  In the default
configuration, it looks like this:

`FlyC'     This buffer has not been checked yet.
`FlyC-'    Flycheck doesn't have a checker for this buffer.
`FlyC*'    Flycheck is running.  Expect results soon!
`FlyC:3|2' This buffer contains three warnings and two errors.
           Use `\\[flycheck-list-errors]' to see the list.

You may also see the following icons:
`FlyC!'    The checker crashed.
`FlyC.'    The last syntax check was manually interrupted.
`FlyC?'    The checker did something unexpected, like exiting with 1
           but returning no errors.

The following keybindings are available in `flycheck-mode':

\\{flycheck-mode-map}
(you can change the prefix by customizing
`flycheck-keymap-prefix')

If called interactively, enable Flycheck mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is ‘toggle’; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-flycheck-mode 'globalized-minor-mode t)(defvar global-flycheck-mode nil "Non-nil if Global Flycheck mode is enabled.
See the `global-flycheck-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-flycheck-mode'.")(autoload 'global-flycheck-mode "flycheck" "Toggle Flycheck mode in all buffers.
With prefix ARG, enable Global Flycheck mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Flycheck mode is enabled in all buffers where
`flycheck-mode-on-safe' would do it.
See `flycheck-mode' for more information on Flycheck mode.

(fn &optional ARG)" t nil)(autoload 'flycheck-define-error-level "flycheck" "Define a new error LEVEL with PROPERTIES.

The following PROPERTIES constitute an error level:

`:severity SEVERITY'
     A number denoting the severity of this level.  The higher
     the number, the more severe is this level compared to other
     levels.  Defaults to 0; info is -10, warning is 10, and
     error is 100.

     The severity is used by `flycheck-error-level-<' to
     determine the ordering of errors according to their levels.

`:compilation-level LEVEL'

     A number indicating the broad class of messages that errors
     at this level belong to: one of 0 (info), 1 (warning), or
     2 or nil (error).  Defaults to nil.

     This is used by `flycheck-checker-pattern-to-error-regexp'
     to map error levels into `compilation-mode''s hierarchy and
     to get proper highlighting of errors in `compilation-mode'.

`:overlay-category CATEGORY'
     A symbol denoting the overlay category to use for error
     highlight overlays for this level.  See Info
     node `(elisp)Overlay Properties' for more information about
     overlay categories.

     A category for an error level overlay should at least define
     the `face' property, for error highlighting.  Another useful
     property for error level categories is `priority', to
     influence the stacking of multiple error level overlays.

`:fringe-bitmap BITMAPS'
     A fringe bitmap symbol denoting the bitmap to use for fringe
     indicators for this level, or a cons of two bitmaps (one for
     narrow fringes and one for wide fringes).  See Info node
     `(elisp)Fringe Bitmaps' for more information about fringe
     bitmaps, including a list of built-in fringe bitmaps.

`:fringe-face FACE'
     A face symbol denoting the face to use for fringe indicators
     for this level.

`:margin-spec SPEC'
     A display specification indicating what to display in the
     margin when `flycheck-indication-mode' is `left-margin' or
     `right-margin'.  See Info node `(elisp)Displaying in the
     Margins'.  If omitted, Flycheck generates an image spec from
     the fringe bitmap.

`:error-list-face FACE'
     A face symbol denoting the face to use for messages of this
     level in the error list.  See `flycheck-list-errors'.

(fn LEVEL &rest PROPERTIES)" nil nil)(function-put 'flycheck-define-error-level 'lisp-indent-function '1)(autoload 'flycheck-define-command-checker "flycheck" "Define SYMBOL as syntax checker to run a command.

Define SYMBOL as generic syntax checker via
`flycheck-define-generic-checker', which uses an external command
to check the buffer.  SYMBOL and DOCSTRING are the same as for
`flycheck-define-generic-checker'.

In addition to the properties understood by
`flycheck-define-generic-checker', the following PROPERTIES
constitute a command syntax checker.  Unless otherwise noted, all
properties are mandatory.  Note that the default `:error-filter'
of command checkers is `flycheck-sanitize-errors'.

`:command COMMAND'
     The command to run for syntax checking.

     COMMAND is a list of the form `(EXECUTABLE [ARG ...])'.

     EXECUTABLE is a string with the executable of this syntax
     checker.  It can be overridden with the variable
     `flycheck-SYMBOL-executable'.  Note that this variable is
     NOT implicitly defined by this function.  Use
     `flycheck-def-executable-var' to define this variable.

     Each ARG is an argument to the executable, either as string,
     or as special symbol or form for
     `flycheck-substitute-argument', which see.

`:error-patterns PATTERNS'
     A list of patterns to parse the output of the `:command'.

     Each ITEM in PATTERNS is a list `(LEVEL SEXP ...)', where
     LEVEL is a Flycheck error level (see
     `flycheck-define-error-level'), followed by one or more RX
     `SEXP's which parse an error of that level and extract line,
     column, file name and the message.

     See `rx' for general information about RX, and
     `flycheck-rx-to-string' for some special RX forms provided
     by Flycheck.

     All patterns are applied in the order of declaration to the
     whole output of the syntax checker.  Output already matched
     by a pattern will not be matched by subsequent patterns.  In
     other words, the first pattern wins.

     This property is optional.  If omitted, however, an
     `:error-parser' is mandatory.

`:error-parser FUNCTION'
     A function to parse errors with.

     The function shall accept three arguments OUTPUT CHECKER
     BUFFER.  OUTPUT is the syntax checker output as string,
     CHECKER the syntax checker that was used, and BUFFER a
     buffer object representing the checked buffer.  The function
     must return a list of `flycheck-error' objects parsed from
     OUTPUT.

     This property is optional.  If omitted, it defaults to
     `flycheck-parse-with-patterns'.  In this case,
     `:error-patterns' is mandatory.

`:standard-input t'
     Whether to send the buffer contents on standard input.

     If this property is given and has a non-nil value, send the
     contents of the buffer on standard input.

     Defaults to nil.

Note that you may not give `:start', `:interrupt', and
`:print-doc' for a command checker.  You can give a custom
`:verify' function, though, whose results will be appended to the
default `:verify' function of command checkers.

(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil nil)(function-put 'flycheck-define-command-checker 'lisp-indent-function '1)(function-put 'flycheck-define-command-checker 'doc-string-elt '2)(autoload 'flycheck-def-config-file-var "flycheck" "Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

SYMBOL is declared as customizable variable using `defcustom', to
provide configuration files for the given syntax CHECKER.
CUSTOM-ARGS are forwarded to `defcustom'.

FILE-NAME is the initial value of the new variable.  If omitted,
the default value is nil.  It can be either a string or a list of
strings.

Use this together with the `config-file' form in the `:command'
argument to `flycheck-define-checker'.

(fn SYMBOL CHECKER &optional FILE-NAME &rest CUSTOM-ARGS)" nil t)(function-put 'flycheck-def-config-file-var 'lisp-indent-function '3)(autoload 'flycheck-def-option-var "flycheck" "Define SYMBOL as option variable with INIT-VALUE for CHECKER.

SYMBOL is declared as customizable variable using `defcustom', to
provide an option for the given syntax CHECKERS (a checker or a
list of checkers).  INIT-VALUE is the initial value of the
variable, and DOCSTRING is its docstring.  CUSTOM-ARGS are
forwarded to `defcustom'.

Use this together with the `option', `option-list' and
`option-flag' forms in the `:command' argument to
`flycheck-define-checker'.

(fn SYMBOL INIT-VALUE CHECKERS DOCSTRING &rest CUSTOM-ARGS)" nil t)(function-put 'flycheck-def-option-var 'lisp-indent-function '3)(function-put 'flycheck-def-option-var 'doc-string-elt '4)(autoload 'flycheck-define-checker "flycheck" "Define SYMBOL as command syntax checker with DOCSTRING and PROPERTIES.

Like `flycheck-define-command-checker', but PROPERTIES must not
be quoted.  Also, implicitly define the executable variable for
SYMBOL with `flycheck-def-executable-var'.

(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil t)(function-put 'flycheck-define-checker 'lisp-indent-function '1)(function-put 'flycheck-define-checker 'doc-string-elt '2)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck" '("flycheck-" "help-flycheck-checker-d" "list-flycheck-errors")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck-buttercup" '("flycheck-buttercup-format-error-list")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck-ert" '("flycheck-er")))(autoload 'pkg-info-library-original-version "pkg-info" "Get the original version in the header of LIBRARY.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no X-Original-Version
header.

See Info node `(elisp)Library Headers' for more information
about library headers.

(fn LIBRARY &optional SHOW)" t nil)(autoload 'pkg-info-library-version "pkg-info" "Get the version in the header of LIBRARY.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no proper header.

See Info node `(elisp)Library Headers' for more information
about library headers.

(fn LIBRARY &optional SHOW)" t nil)(autoload 'pkg-info-defining-library-original-version "pkg-info" "Get the original version of the library defining FUNCTION.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

(fn FUNCTION &optional SHOW)" t nil)(autoload 'pkg-info-defining-library-version "pkg-info" "Get the version of the library defining FUNCTION.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

(fn FUNCTION &optional SHOW)" t nil)(autoload 'pkg-info-package-version "pkg-info" "Get the version of an installed PACKAGE.

If SHOW is non-nil, show the version in the minibuffer.

Return the version as list, or nil if PACKAGE is not installed.

(fn PACKAGE &optional SHOW)" t nil)(autoload 'pkg-info-version-info "pkg-info" "Obtain complete version info for LIBRARY and PACKAGE.

LIBRARY is a symbol denoting a named feature, or a library name
as string.  PACKAGE is a symbol denoting an ELPA package.  If
omitted or nil, default to LIBRARY.

If SHOW is non-nil, show the version in the minibuffer.

When called interactively, prompt for LIBRARY.  When called
interactively with prefix argument, prompt for PACKAGE as well.

Return a string with complete version information for LIBRARY.
This version information contains the version from the headers of
LIBRARY, and the version of the installed PACKAGE, the LIBRARY is
part of.  If PACKAGE is not installed, or if the PACKAGE version
is the same as the LIBRARY version, do not include a package
version.

(fn LIBRARY &optional PACKAGE SHOW)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pkg-info" '("pkg-info-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "epl" '("epl-")))(autoload 'flycheck-popup-tip-mode "flycheck-popup-tip" "A minor mode to show Flycheck error messages in a popup.

If called interactively, enable Flycheck-Popup-Tip mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck-popup-tip" '("flycheck-popup-tip-")))(autoload 'flyspell-correct-at-point "flyspell-correct" "Correct word before point using `flyspell-correct-interface'.
Adapted from `flyspell-correct-word-before-point'." t nil)(autoload 'flyspell-correct-previous "flyspell-correct" "Correct the first misspelled word that occurs before POSITION.
But don't look beyond what's visible on the screen.

Uses `flyspell-correct-at-point' function for correction.

With a prefix argument, automatically continues to all prior misspelled words in the buffer.

(fn POSITION)" t nil)(autoload 'flyspell-correct-next "flyspell-correct" "Correct the first misspelled word that occurs after POSITION.

Uses `flyspell-correct-at-point' function for correction.

With a prefix argument, automatically continues to all further
misspelled words in the buffer.

(fn POSITION)" t nil)(autoload 'flyspell-correct-wrapper "flyspell-correct" "Correct spelling error in a dwim fashion based on universal argument.

- One \\[universal-argument] enables rapid mode.
- Two \\[universal-argument]'s changes direction of spelling
  errors search.
- Three \\[universal-argument]'s changes direction of spelling
  errors search and enables rapid mode." t nil)(autoload 'flyspell-correct-move "flyspell-correct" "Correct the first misspelled word that occurs before POSITION.

Uses `flyspell-correct-at-point' function for correction.

With FORWARD set non-nil, check forward instead of backward.

With RAPID set non-nil, automatically continues in direction
until all errors in buffer have been addressed.

(fn POSITION &optional FORWARD RAPID)" t nil)(autoload 'flyspell-correct-auto-mode "flyspell-correct" "Minor mode for automatically correcting word at point.

If called interactively, enable Flyspell-Correct-Auto mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

Take my advice and don't use this functionality unless you find
`flyspell-correct-previous' function useless for your purposes.
Seriously, just try named function for completion. You can find
more info in comment[1].

[1]:
https://github.com/syl20bnr/spacemacs/issues/6209#issuecomment-274320376

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flyspell-correct" '("flyspell-correct-")))(autoload 'flyspell-correct-ido "flyspell-correct-ido" "Run `ido-completing-read' for the given CANDIDATES.

List of CANDIDATES is given by flyspell for the WORD.

Return a selected word to use as a replacement or a tuple
of (command, word) to be used by `flyspell-do-correct'.

(fn CANDIDATES WORD)" nil nil)(autoload 'flyspell-correct-ivy "flyspell-correct-ivy" "Run `ivy-read' for the given CANDIDATES.

List of CANDIDATES is given by flyspell for the WORD.

Return result according to `flyspell-correct-interface'
specification.

(fn CANDIDATES WORD)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flyspell-correct-ivy" '("flyspell-correct-ivy-")))(let ((loads (get 'flyspell-lazy 'custom-loads))) (if (member '"flyspell-lazy" loads) nil (put 'flyspell-lazy 'custom-loads (cons '"flyspell-lazy" loads))))(defvar flyspell-lazy-mode nil "Non-nil if Flyspell-Lazy mode is enabled.
See the `flyspell-lazy-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `flyspell-lazy-mode'.")(autoload 'flyspell-lazy-mode "flyspell-lazy" "Turn on flyspell-lazy-mode.

If called interactively, enable Flyspell-Lazy mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Turning on flyspell-lazy-mode will set up hooks which
change how `flyspell-mode' works, in every buffer for which
flyspell is enabled.

When called interactively with no prefix argument this command
toggles the mode.  With a prefix argument, it enables the mode
if the argument is positive and otherwise disables the mode.

When called from Lisp, this command enables the mode if the
argument is omitted or nil, and toggles the mode if the argument
is 'toggle.

(fn &optional ARG)" t nil)(autoload 'flyspell-lazy-check-buffer "flyspell-lazy" "Check spelling on the whole buffer, respecting flyspell-lazy settings.

With optional FORCE, force spell-check even on a buffer which
would usually be skipped.

(fn &optional FORCE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flyspell-lazy" '("flyspell-lazy-")))(put 'bibtex-completion-bibliography 'safe-local-variable 'stringp)(put 'bibtex-completion-notes-global-mode 'globalized-minor-mode t)(defvar bibtex-completion-notes-global-mode nil "Non-nil if Bibtex-Completion-Notes-Global mode is enabled.
See the `bibtex-completion-notes-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `bibtex-completion-notes-global-mode'.")(autoload 'bibtex-completion-notes-global-mode "bibtex-completion" "Toggle Bibtex-Completion-Notes mode in all buffers.
With prefix ARG, enable Bibtex-Completion-Notes-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Bibtex-Completion-Notes mode is enabled in all buffers where
`bibtex-completion-notes-mode' would do it.
See `bibtex-completion-notes-mode' for more information on Bibtex-Completion-Notes mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bibtex-completion" '("bibtex-completion-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parsebib" '("parsebib-")))(autoload 'biblio-arxiv-backend "biblio-arxiv" "A arXiv backend for biblio.el.
COMMAND, ARG, MORE: See `biblio-backends'.

(fn COMMAND &optional ARG &rest MORE)" nil nil)(add-hook 'biblio-init-hook #'biblio-arxiv-backend)(autoload 'biblio-arxiv-lookup "biblio-arxiv" "Start an arXiv search for QUERY, prompting if needed.

(fn &optional QUERY)" t nil)(defalias 'arxiv-lookup 'biblio-arxiv-lookup)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "biblio-arxiv" '("biblio-arxiv-")))(autoload 'biblio-crossref-backend "biblio-crossref" "A CrossRef backend for biblio.el.
COMMAND, ARG, MORE: See `biblio-backends'.

(fn COMMAND &optional ARG &rest MORE)" nil nil)(add-hook 'biblio-init-hook #'biblio-crossref-backend)(autoload 'biblio-crossref-lookup "biblio-crossref" "Start a CrossRef search for QUERY, prompting if needed.

(fn &optional QUERY)" t nil)(defalias 'crossref-lookup 'biblio-crossref-lookup)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "biblio-crossref" '("biblio-crossref-")))(autoload 'biblio-dblp-backend "biblio-dblp" "A DBLP backend for biblio.el.
COMMAND, ARG, MORE: See `biblio-backends'.

(fn COMMAND &optional ARG &rest MORE)" nil nil)(add-hook 'biblio-init-hook #'biblio-dblp-backend)(autoload 'biblio-dblp-lookup "biblio-dblp" "Start a DBLP search for QUERY, prompting if needed.

(fn &optional QUERY)" t nil)(defalias 'dblp-lookup 'biblio-dblp-lookup)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "biblio-dblp" '("biblio-dblp--")))(autoload 'biblio-dissemin-lookup "biblio-dissemin" "Retrieve a record by DOI from Dissemin, and display it.
Interactively, or if CLEANUP is non-nil, pass DOI through
`biblio-cleanup-doi'.

(fn DOI &optional CLEANUP)" t nil)(defalias 'dissemin-lookup 'biblio-dissemin-lookup)(autoload 'biblio-dissemin--register-action "biblio-dissemin" "Add Dissemin to list of `biblio-selection-mode' actions." nil nil)(add-hook 'biblio-selection-mode-hook #'biblio-dissemin--register-action)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "biblio-dissemin" '("biblio-dissemin--")))(autoload 'biblio-doi-insert-bibtex "biblio-doi" "Insert BibTeX entry matching DOI.

(fn DOI)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "biblio-doi" '("biblio-doi-" "doi-insert-bibtex")))(autoload 'biblio-download--register-action "biblio-download" "Add download to list of `biblio-selection-mode' actions." nil nil)(add-hook 'biblio-selection-mode-hook #'biblio-download--register-action)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "biblio-download" '("biblio-download-")))(autoload 'biblio-hal-backend "biblio-hal" "A HAL backend for biblio.el.
COMMAND, ARG, MORE: See `biblio-backends'.

(fn COMMAND &optional ARG &rest MORE)" nil nil)(add-hook 'biblio-init-hook #'biblio-hal-backend)(autoload 'biblio-hal-lookup "biblio-hal" "Start a HAL search for QUERY, prompting if needed.

(fn &optional QUERY)" t nil)(defalias 'hal-lookup 'biblio-hal-lookup)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "biblio-hal" '("biblio-hal--")))(autoload 'biblio-ieee-backend "biblio-ieee" "A IEEE Xplore backend for biblio.el.
COMMAND, ARG, MORE: See `biblio-backends'.

(fn COMMAND &optional ARG &rest MORE)" nil nil)(add-hook 'biblio-init-hook #'biblio-ieee-backend)(autoload 'biblio-ieee-lookup "biblio-ieee" "Start a IEEE search for QUERY, prompting if needed.

(fn &optional QUERY)" t nil)(defalias 'ieee-lookup 'biblio-ieee-lookup)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "biblio-ieee" '("biblio-ieee--")))(autoload 'biblio-lookup "biblio-core" "Perform a search using BACKEND, and QUERY.
Prompt for any missing or nil arguments.  BACKEND should be a
function obeying the interface described in the docstring of
`biblio-backends'.  Returns the buffer in which results will be
inserted.

(fn &optional BACKEND QUERY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "biblio-core" '("biblio-")))(autoload 'ivy-bibtex "ivy-bibtex" "Search BibTeX entries using ivy.

With a prefix ARG the cache is invalidated and the bibliography
reread.

If LOCAL-BIB is non-nil, display that the BibTeX entries are read
from the local bibliography.  This is set internally by
`ivy-bibtex-with-local-bibliography'.

(fn &optional ARG LOCAL-BIB)" t nil)(autoload 'ivy-bibtex-with-local-bibliography "ivy-bibtex" "Search BibTeX entries with local bibliography.

With a prefix ARG the cache is invalidated and the bibliography
reread.

(fn &optional ARG)" t nil)(autoload 'ivy-bibtex-with-notes "ivy-bibtex" "Search BibTeX entries with notes.

With a prefix ARG the cache is invalidated and the bibliography
reread.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-bibtex" '("ivy-bibtex-")))(autoload 'helm-bibtex "helm-bibtex" "Search BibTeX entries.

With a prefix ARG, the cache is invalidated and the bibliography
reread.

If LOCAL-BIB is non-nil, display that the BibTeX entries are read
from the local bibliography.  This is set internally by
`helm-bibtex-with-local-bibliography'.

If INPUT is non-nil and a string, that value is going to be used
as a predefined search term.  Can be used to define functions for
frequent searches (e.g. your own publications).

(fn &optional ARG LOCAL-BIB INPUT)" t nil)(autoload 'helm-bibtex-with-local-bibliography "helm-bibtex" "Search BibTeX entries with local bibliography.

If none is found the global bibliography is used instead.  With a
prefix ARG the cache is invalidated and the bibliography
reloaded.

(fn &optional ARG)" t nil)(autoload 'helm-bibtex-with-notes "helm-bibtex" "Search BibTeX entries with notes.

With a prefix ARG the cache is invalidated and the bibliography
reread.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-bibtex" '("helm-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-biblatex" '("citeproc-blt-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-bibtex" '("citeproc-bt-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-choose" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-cite" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-context" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-date" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-disamb" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-formatters" '("citeproc-f")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-generic-elements" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-itemdata" '("citeproc-itd-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-itemgetters" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-lib" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-locale" '("citeproc-locale-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-macro" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-name" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-number" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-prange" '("citeproc-prange-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-proc" '("citeproc-proc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-rt" '("citeproc-rt-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-s" '("citeproc-s-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-sort" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-style" '("citeproc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-subbibs" '("citeproc-sb-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-term" '("citeproc-term-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "citeproc-test-human" '("citeproc-test-human-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "queue" '("make-queue" "queue-")))(autoload 'string-inflection-ruby-style-cycle "string-inflection" "foo_bar => FOO_BAR => FooBar => foo_bar" t nil)(autoload 'string-inflection-python-style-cycle "string-inflection" "foo_bar => FOO_BAR => FooBar => foo_bar" t nil)(autoload 'string-inflection-java-style-cycle "string-inflection" "fooBar => FOO_BAR => FooBar => fooBar" t nil)(autoload 'string-inflection-all-cycle "string-inflection" "foo_bar => FOO_BAR => FooBar => fooBar => foo-bar => Foo_Bar => foo_bar" t nil)(autoload 'string-inflection-toggle "string-inflection" "toggle foo_bar <=> FooBar" t nil)(autoload 'string-inflection-camelcase "string-inflection" "FooBar format" t nil)(autoload 'string-inflection-lower-camelcase "string-inflection" "fooBar format" t nil)(autoload 'string-inflection-underscore "string-inflection" "foo_bar format" t nil)(autoload 'string-inflection-capital-underscore "string-inflection" "Foo_Bar format" t nil)(autoload 'string-inflection-upcase "string-inflection" "FOO_BAR format" t nil)(autoload 'string-inflection-kebab-case "string-inflection" "foo-bar format" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "string-inflection" '("string-inflection-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-C" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-R" '("ob-" "org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-awk" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-calc" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-clojure" '("ob-clojure-" "org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-comint" '("org-babel-comint-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-core" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-css" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ditaa" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-dot" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-emacs-lisp" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-eshell" '("ob-eshell-session-live-p" "org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-eval" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-exp" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-forth" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-fortran" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-gnuplot" '("*org-babel-gnuplot-" "org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-groovy" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-haskell" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-java" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-js" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-julia" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-latex" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-lilypond" '("lilypond-mode" "ob-lilypond-header-args" "org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-lisp" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-lob" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-lua" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-makefile" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-maxima" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ocaml" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-octave" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-org" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-perl" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-plantuml" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-processing" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-python" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ref" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-ruby" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-sass" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-scheme" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-screen" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-sed" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-shell" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-sql" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-sqlite" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-table" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-tangle" '("org-babel-")))(autoload 'org-cite-insert "oc" "Insert a citation at point.
Insertion is done according to the processor set in `org-cite-insert-processor'.
ARG is the prefix argument received when calling interactively the function.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "oc" '("org-cite-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "oc-basic" '("org-cite-basic-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "oc-biblatex" '("org-cite-biblatex-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "oc-bibtex" '("org-cite-bibtex-export-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "oc-csl" '("org-cite-csl-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "oc-natbib" '("org-cite-natbib-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-bbdb" '("org-bbdb-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-bibtex" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-docview" '("org-docview-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-doi" '("org-link-doi-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-eshell" '("org-eshell-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-eww" '("org-eww-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-gnus" '("org-gnus-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-info" '("org-info-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-irc" '("org-irc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-man" '("org-man-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-mhe" '("org-mhe-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-rmail" '("org-rmail-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-w3m" '("org-w3m-")))(autoload 'org-babel-do-load-languages "org" "Load the languages defined in `org-babel-load-languages'.

(fn SYM VALUE)" nil nil)(autoload 'org-babel-load-file "org" "Load Emacs Lisp source code blocks in the Org FILE.
This function exports the source code using `org-babel-tangle'
and then loads the resulting file using `load-file'.  With
optional prefix argument COMPILE, the tangled Emacs Lisp file is
byte-compiled before it is loaded.

(fn FILE &optional COMPILE)" t nil)(autoload 'org-version "org" "Show the Org version.
Interactively, or when MESSAGE is non-nil, show it in echo area.
With prefix argument, or when HERE is non-nil, insert it at point.
In non-interactive uses, a reduced version string is output unless
FULL is given.

(fn &optional HERE FULL MESSAGE)" t nil)(autoload 'org-load-modules-maybe "org" "Load all extensions listed in `org-modules'.

(fn &optional FORCE)" nil nil)(autoload 'org-clock-persistence-insinuate "org" "Set up hooks for clock persistence." nil nil)(autoload 'org-mode "org" "Outline-based notes management and organizer, alias
\"Carsten's outline-mode for keeping track of everything.\"

Org mode develops organizational tasks around a NOTES file which
contains information about projects as plain text.  Org mode is
implemented on top of Outline mode, which is ideal to keep the content
of large files well structured.  It supports ToDo items, deadlines and
time stamps, which magically appear in the diary listing of the Emacs
calendar.  Tables are easily created with a built-in table editor.
Plain text URL-like links connect to websites, emails (VM), Usenet
messages (Gnus), BBDB entries, and any files related to the project.
For printing and sharing of notes, an Org file (or a part of it)
can be exported as a structured ASCII or HTML file.

The following commands are available:

\\{org-mode-map}

(fn)" t nil)(autoload 'org-cycle "org" "TAB-action and visibility cycling for Org mode.

This is the command invoked in Org mode by the `TAB' key.  Its main
purpose is outline visibility cycling, but it also invokes other actions
in special contexts.

When this function is called with a `\\[universal-argument]' prefix, rotate the entire
buffer through 3 states (global cycling)
  1. OVERVIEW: Show only top-level headlines.
  2. CONTENTS: Show all headlines of all levels, but no body text.
  3. SHOW ALL: Show everything.

With a `\\[universal-argument] \\[universal-argument]' prefix argument, switch to the startup visibility,
determined by the variable `org-startup-folded', and by any VISIBILITY
properties in the buffer.

With a `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix argument, show the entire buffer, including
any drawers.

When inside a table, re-align the table and move to the next field.

When point is at the beginning of a headline, rotate the subtree started
by this line through 3 different states (local cycling)
  1. FOLDED:   Only the main headline is shown.
  2. CHILDREN: The main headline and the direct children are shown.
               From this state, you can move to one of the children
               and zoom in further.
  3. SUBTREE:  Show the entire subtree, including body text.
If there is no subtree, switch directly from CHILDREN to FOLDED.

When point is at the beginning of an empty headline and the variable
`org-cycle-level-after-item/entry-creation' is set, cycle the level
of the headline by demoting and promoting it to likely levels.  This
speeds up creation document structure by pressing `TAB' once or several
times right after creating a new headline.

When there is a numeric prefix, go up to a heading with level ARG, do
a `show-subtree' and return to the previous cursor position.  If ARG
is negative, go up that many levels.

When point is not at the beginning of a headline, execute the global
binding for `TAB', which is re-indenting the line.  See the option
`org-cycle-emulate-tab' for details.

As a special case, if point is at the very beginning of the buffer, if
there is no headline there, and if the variable `org-cycle-global-at-bob'
is non-nil, this function acts as if called with prefix argument (`\\[universal-argument] TAB',
same as `S-TAB') also when called without prefix argument.

(fn &optional ARG)" t nil)(autoload 'org-global-cycle "org" "Cycle the global visibility.  For details see `org-cycle'.
With `\\[universal-argument]' prefix ARG, switch to startup visibility.
With a numeric prefix, show all headlines up to that level.

(fn &optional ARG)" t nil)(autoload 'org-run-like-in-org-mode "org" "Run a command, pretending that the current buffer is in Org mode.
This will temporarily bind local variables that are typically bound in
Org mode to the values they have in Org mode, and then interactively
call CMD.

(fn CMD)" nil nil)(autoload 'org-open-file "org" "Open the file at PATH.
First, this expands any special file name abbreviations.  Then the
configuration variable `org-file-apps' is checked if it contains an
entry for this file type, and if yes, the corresponding command is launched.

If no application is found, Emacs simply visits the file.

With optional prefix argument IN-EMACS, Emacs will visit the file.
With a double \\[universal-argument] \\[universal-argument] prefix arg, Org tries to avoid opening in Emacs
and to use an external application to visit the file.

Optional LINE specifies a line to go to, optional SEARCH a string
to search for.  If LINE or SEARCH is given, the file will be
opened in Emacs, unless an entry from `org-file-apps' that makes
use of groups in a regexp matches.

If you want to change the way frames are used when following a
link, please customize `org-link-frame-setup'.

If the file does not exist, throw an error.

(fn PATH &optional IN-EMACS LINE SEARCH)" nil nil)(autoload 'org-open-at-point-global "org" "Follow a link or a time-stamp like Org mode does.
Also follow links and emails as seen by `thing-at-point'.
This command can be called in any mode to follow an external
link or a time-stamp that has Org mode syntax.  Its behavior
is undefined when called on internal links like fuzzy links.
Raise a user error when there is nothing to follow." t nil)(autoload 'org-offer-links-in-entry "org" "Offer links in the current entry and return the selected link.
If there is only one link, return it.
If NTH is an integer, return the NTH link found.
If ZERO is a string, check also this string for a link, and if
there is one, return it.

(fn BUFFER MARKER &optional NTH ZERO)" nil nil)(autoload 'org-switchb "org" "Switch between Org buffers.

With `\\[universal-argument]' prefix, restrict available buffers to files.

With `\\[universal-argument] \\[universal-argument]' prefix, restrict available buffers to agenda files.

(fn &optional ARG)" t nil)(autoload 'org-cycle-agenda-files "org" "Cycle through the files in `org-agenda-files'.
If the current buffer visits an agenda file, find the next one in the list.
If the current buffer does not, find the first agenda file." t nil)(autoload 'org-submit-bug-report "org" "Submit a bug report on Org via mail.

Don't hesitate to report any problems or inaccurate documentation.

If you don't have setup sending mail from (X)Emacs, please copy the
output buffer into your mail program, as it gives us important
information about your Org version and configuration." t nil)(autoload 'org-reload "org" "Reload all Org Lisp files.
With prefix arg UNCOMPILED, load the uncompiled versions.

(fn &optional UNCOMPILED)" t nil)(autoload 'org-customize "org" "Call the customize function with org as argument." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org" '("org-" "turn-on-org-cdlatex")))(autoload 'org-toggle-sticky-agenda "org-agenda" "Toggle `org-agenda-sticky'.

(fn &optional ARG)" t nil)(autoload 'org-agenda "org-agenda" "Dispatch agenda commands to collect entries to the agenda buffer.
Prompts for a command to execute.  Any prefix arg will be passed
on to the selected command.  The default selections are:

a     Call `org-agenda-list' to display the agenda for current day or week.
t     Call `org-todo-list' to display the global todo list.
T     Call `org-todo-list' to display the global todo list, select only
      entries with a specific TODO keyword (the user gets a prompt).
m     Call `org-tags-view' to display headlines with tags matching
      a condition  (the user is prompted for the condition).
M     Like `m', but select only TODO entries, no ordinary headlines.
e     Export views to associated files.
s     Search entries for keywords.
S     Search entries for keywords, only with TODO keywords.
/     Multi occur across all agenda files and also files listed
      in `org-agenda-text-search-extra-files'.
<     Restrict agenda commands to buffer, subtree, or region.
      Press several times to get the desired effect.
>     Remove a previous restriction.
#     List \"stuck\" projects.
!     Configure what \"stuck\" means.
C     Configure custom agenda commands.

More commands can be added by configuring the variable
`org-agenda-custom-commands'.  In particular, specific tags and TODO keyword
searches can be pre-defined in this way.

If the current buffer is in Org mode and visiting a file, you can also
first press `<' once to indicate that the agenda should be temporarily
(until the next use of `\\[org-agenda]') restricted to the current file.
Pressing `<' twice means to restrict to the current subtree or region
(if active).

(fn &optional ARG KEYS RESTRICTION)" t nil)(autoload 'org-batch-agenda "org-agenda" "Run an agenda command in batch mode and send the result to STDOUT.
If CMD-KEY is a string of length 1, it is used as a key in
`org-agenda-custom-commands' and triggers this command.  If it is a
longer string it is used as a tags/todo match string.
Parameters are alternating variable names and values that will be bound
before running the agenda command.

(fn CMD-KEY &rest PARAMETERS)" nil t)(autoload 'org-batch-agenda-csv "org-agenda" "Run an agenda command in batch mode and send the result to STDOUT.
If CMD-KEY is a string of length 1, it is used as a key in
`org-agenda-custom-commands' and triggers this command.  If it is a
longer string it is used as a tags/todo match string.
Parameters are alternating variable names and values that will be bound
before running the agenda command.

The output gives a line for each selected agenda item.  Each
item is a list of comma-separated values, like this:

category,head,type,todo,tags,date,time,extra,priority-l,priority-n

category     The category of the item
head         The headline, without TODO kwd, TAGS and PRIORITY
type         The type of the agenda entry, can be
                todo               selected in TODO match
                tagsmatch          selected in tags match
                diary              imported from diary
                deadline           a deadline on given date
                scheduled          scheduled on given date
                timestamp          entry has timestamp on given date
                closed             entry was closed on given date
                upcoming-deadline  warning about deadline
                past-scheduled     forwarded scheduled item
                block              entry has date block including g. date
todo         The todo keyword, if any
tags         All tags including inherited ones, separated by colons
date         The relevant date, like 2007-2-14
time         The time, like 15:00-16:50
extra        String with extra planning info
priority-l   The priority letter if any was given
priority-n   The computed numerical priority
agenda-day   The day in the agenda where this is listed

(fn CMD-KEY &rest PARAMETERS)" nil t)(autoload 'org-store-agenda-views "org-agenda" "Store agenda views.

(fn &rest PARAMETERS)" t nil)(autoload 'org-batch-store-agenda-views "org-agenda" "Run all custom agenda commands that have a file argument.

(fn &rest PARAMETERS)" nil t)(autoload 'org-agenda-list "org-agenda" "Produce a daily/weekly view from all files in variable `org-agenda-files'.
The view will be for the current day or week, but from the overview buffer
you will be able to go to other days/weeks.

With a numeric prefix argument in an interactive call, the agenda will
span ARG days.  Lisp programs should instead specify SPAN to change
the number of days.  SPAN defaults to `org-agenda-span'.

START-DAY defaults to TODAY, or to the most recent match for the weekday
given in `org-agenda-start-on-weekday'.

When WITH-HOUR is non-nil, only include scheduled and deadline
items if they have an hour specification like [h]h:mm.

(fn &optional ARG START-DAY SPAN WITH-HOUR)" t nil)(autoload 'org-search-view "org-agenda" "Show all entries that contain a phrase or words or regular expressions.

With optional prefix argument TODO-ONLY, only consider entries that are
TODO entries.  The argument STRING can be used to pass a default search
string into this function.  If EDIT-AT is non-nil, it means that the
user should get a chance to edit this string, with cursor at position
EDIT-AT.

The search string can be viewed either as a phrase that should be found as
is, or it can be broken into a number of snippets, each of which must match
in a Boolean way to select an entry.  The default depends on the variable
`org-agenda-search-view-always-boolean'.
Even if this is turned off (the default) you can always switch to
Boolean search dynamically by preceding the first word with  \"+\" or \"-\".

The default is a direct search of the whole phrase, where each space in
the search string can expand to an arbitrary amount of whitespace,
including newlines.

If using a Boolean search, the search string is split on whitespace and
each snippet is searched separately, with logical AND to select an entry.
Words prefixed with a minus must *not* occur in the entry.  Words without
a prefix or prefixed with a plus must occur in the entry.  Matching is
case-insensitive.  Words are enclosed by word delimiters (i.e. they must
match whole words, not parts of a word) if
`org-agenda-search-view-force-full-words' is set (default is nil).

Boolean search snippets enclosed by curly braces are interpreted as
regular expressions that must or (when preceded with \"-\") must not
match in the entry.  Snippets enclosed into double quotes will be taken
as a whole, to include whitespace.

- If the search string starts with an asterisk, search only in headlines.
- If (possibly after the leading star) the search string starts with an
  exclamation mark, this also means to look at TODO entries only, an effect
  that can also be achieved with a prefix argument.
- If (possibly after star and exclamation mark) the search string starts
  with a colon, this will mean that the (non-regexp) snippets of the
  Boolean search must match as full words.

This command searches the agenda files, and in addition the files
listed in `org-agenda-text-search-extra-files' unless a restriction lock
is active.

(fn &optional TODO-ONLY STRING EDIT-AT)" t nil)(autoload 'org-todo-list "org-agenda" "Show all (not done) TODO entries from all agenda file in a single list.
The prefix arg can be used to select a specific TODO keyword and limit
the list to these.  When using `\\[universal-argument]', you will be prompted
for a keyword.  A numeric prefix directly selects the Nth keyword in
`org-todo-keywords-1'.

(fn &optional ARG)" t nil)(autoload 'org-tags-view "org-agenda" "Show all headlines for all `org-agenda-files' matching a TAGS criterion.
The prefix arg TODO-ONLY limits the search to TODO entries.

(fn &optional TODO-ONLY MATCH)" t nil)(autoload 'org-agenda-list-stuck-projects "org-agenda" "Create agenda view for projects that are stuck.
Stuck projects are project that have no next actions.  For the definitions
of what a project is and how to check if it stuck, customize the variable
`org-stuck-projects'.

(fn &rest IGNORE)" t nil)(autoload 'org-diary "org-agenda" "Return diary information from org files.
This function can be used in a \"sexp\" diary entry in the Emacs calendar.
It accesses org files and extracts information from those files to be
listed in the diary.  The function accepts arguments specifying what
items should be listed.  For a list of arguments allowed here, see the
variable `org-agenda-entry-types'.

The call in the diary file should look like this:

   &%%(org-diary) ~/path/to/some/orgfile.org

Use a separate line for each org file to check.  Or, if you omit the file name,
all files listed in `org-agenda-files' will be checked automatically:

   &%%(org-diary)

If you don't give any arguments (as in the example above), the default value
of `org-agenda-entry-types' is used: (:deadline :scheduled :timestamp :sexp).
So the example above may also be written as

   &%%(org-diary :deadline :timestamp :sexp :scheduled)

The function expects the lisp variables `entry' and `date' to be provided
by the caller, because this is how the calendar works.  Don't use this
function from a program - use `org-agenda-get-day-entries' instead.

(fn &rest ARGS)" nil nil)(autoload 'org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item "org-agenda" "Do we have a reason to ignore this TODO entry because it has a time stamp?

(fn &optional END)" nil nil)(autoload 'org-agenda-set-restriction-lock "org-agenda" "Set restriction lock for agenda to current subtree or file.
When in a restricted subtree, remove it.

The restriction will span over the entire file if TYPE is `file',
or if type is '(4), or if the cursor is before the first headline
in the file.  Otherwise, only apply the restriction to the current
subtree.

(fn &optional TYPE)" t nil)(autoload 'org-calendar-goto-agenda "org-agenda" "Compute the Org agenda for the calendar date displayed at the cursor.
This is a command that has to be installed in `calendar-mode-map'." t nil)(autoload 'org-agenda-to-appt "org-agenda" "Activate appointments found in `org-agenda-files'.

With a `\\[universal-argument]' prefix, refresh the list of appointments.

If FILTER is t, interactively prompt the user for a regular
expression, and filter out entries that don't match it.

If FILTER is a string, use this string as a regular expression
for filtering entries out.

If FILTER is a function, filter out entries against which
calling the function returns nil.  This function takes one
argument: an entry from `org-agenda-get-day-entries'.

FILTER can also be an alist with the car of each cell being
either `headline' or `category'.  For example:

  \\='((headline \"IMPORTANT\")
    (category \"Work\"))

will only add headlines containing IMPORTANT or headlines
belonging to the \"Work\" category.

ARGS are symbols indicating what kind of entries to consider.
By default `org-agenda-to-appt' will use :deadline*, :scheduled*
(i.e., deadlines and scheduled items with a hh:mm specification)
and :timestamp entries.  See the docstring of `org-diary' for
details and examples.

If an entry has a APPT_WARNTIME property, its value will be used
to override `appt-message-warning-time'.

(fn &optional REFRESH FILTER &rest ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-agenda" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-archive" '("org-a")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-attach" '("org-attach-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-attach-git" '("org-attach-git-")))(autoload 'org-capture-string "org-capture" "Capture STRING with the template selected by KEYS.

(fn STRING &optional KEYS)" t nil)(autoload 'org-capture "org-capture" "Capture something.
\\<org-capture-mode-map>
This will let you select a template from `org-capture-templates', and
then file the newly captured information.  The text is immediately
inserted at the target location, and an indirect buffer is shown where
you can edit it.  Pressing `\\[org-capture-finalize]' brings you back to the previous
state of Emacs, so that you can continue your work.

When called interactively with a `\\[universal-argument]' prefix argument GOTO, don't
capture anything, just go to the file/headline where the selected
template stores its notes.

With a `\\[universal-argument] \\[universal-argument]' prefix argument, go to the last note stored.

When called with a `C-0' (zero) prefix, insert a template at point.

When called with a `C-1' (one) prefix, force prompting for a date when
a datetree entry is made.

ELisp programs can set KEYS to a string associated with a template
in `org-capture-templates'.  In this case, interactive selection
will be bypassed.

If `org-capture-use-agenda-date' is non-nil, capturing from the
agenda will use the date at point as the default date.  Then, a
`C-1' prefix will tell the capture process to use the HH:MM time
of the day at point (if any) or the current HH:MM time.

(fn &optional GOTO KEYS)" t nil)(autoload 'org-capture-import-remember-templates "org-capture" "Set `org-capture-templates' to be similar to `org-remember-templates'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-capture" '("org-capture-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-clock" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-colview" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-compat" '("org-")))(autoload 'org-encrypt-entry "org-crypt" "Encrypt the content of the current headline." t nil)(autoload 'org-decrypt-entry "org-crypt" "Decrypt the content of the current headline." t nil)(autoload 'org-encrypt-entries "org-crypt" "Encrypt all top-level entries in the current buffer." t nil)(autoload 'org-decrypt-entries "org-crypt" "Decrypt all entries in the current buffer." t nil)(autoload 'org-crypt-use-before-save-magic "org-crypt" "Add a hook to automatically encrypt entries before a file is saved to disk." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-crypt" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ctags" '("org-ctags-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-datetree" '("org-datetree-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-duration" '("org-duration-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-element" '("org-element-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-entities" '("org-entit")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-faces" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-feed" '("org-feed-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-footnote" '("org-footnote-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-goto" '("org-goto-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-habit" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-id" '("org-id-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-indent" '("org-indent-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-inlinetask" '("org-inlinetask-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-keys" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-lint" '("org-lint-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-list" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-macro" '("org-macro-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-macs" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-mobile" '("org-mobile-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-mouse" '("org-mouse-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-num" '("org-num-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-pcomplete" '("org-" "pcomplete/org-mode/")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-persist" '("org-persist-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-plot" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-protocol" '("org-protocol-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-refile" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-src" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-table" '("org")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-tempo" '("org-tempo-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-timer" '("org-timer-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-version" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox" '("org-export-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-ascii" '("org-ascii-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-beamer" '("org-beamer-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-html" '("org-html-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-icalendar" '("org-icalendar-")))(autoload 'org-koma-letter-export-as-latex "ox-koma-letter" "Export current buffer as a KOMA Scrlttr2 letter.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting buffer should be accessible
through the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"\\begin{letter}\" and \"\\end{letter}\".

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

Export is done in a buffer named \"*Org KOMA-LETTER Export*\".  It
will be displayed if `org-export-show-temporary-export-buffer' is
non-nil.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(autoload 'org-koma-letter-export-to-latex "ox-koma-letter" "Export current buffer as a KOMA Scrlttr2 letter (tex).

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"\\begin{letter}\" and \"\\end{letter}\".

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

When optional argument PUB-DIR is set, use it as the publishing
directory.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(autoload 'org-koma-letter-export-to-pdf "ox-koma-letter" "Export current buffer as a KOMA Scrlttr2 letter (pdf).

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"\\begin{letter}\" and \"\\end{letter}\".

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

Return PDF file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-koma-letter" '("org-koma-letter-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-latex" '("org-latex-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-man" '("org-man-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-md" '("org-md-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-odt" '("org-odt-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-org" '("org-org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-publish" '("org-publish-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-texinfo" '("org-texinfo-")))(autoload 'quickrun-set-default "quickrun" "Set `key' as default key in programing language `lang'.

(fn LANG KEY)" nil nil)(autoload 'quickrun-add-command "quickrun" "Not documented.

(fn KEY ALIST &key DEFAULT MODE OVERRIDE)" nil nil)(function-put 'quickrun-add-command 'lisp-indent-function 'defun)(autoload 'quickrun "quickrun" "Run commands quickly for current buffer
   With universal prefix argument(C-u), select command-key,
   With double prefix argument(C-u C-u), run in compile-only-mode.

(fn &rest PLIST)" t nil)(autoload 'quickrun-with-arg "quickrun" "Run commands quickly for current buffer with arguments.

(fn ARG)" t nil)(autoload 'quickrun-region "quickrun" "Run commands with specified region.

(fn START END)" t nil)(autoload 'quickrun-replace-region "quickrun" "Run commands with specified region and replace.

(fn START END)" t nil)(autoload 'quickrun-eval-print "quickrun" "Run commands with specified region and replace.

(fn START END)" t nil)(autoload 'quickrun-compile-only "quickrun" "Exec only compilation." t nil)(autoload 'quickrun-shell "quickrun" "Run commands in shell for interactive programs." t nil)(autoload 'quickrun-autorun-mode "quickrun" "`quickrun' after saving buffer.

If called interactively, enable Quickrun-Autorun mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'anything-quickrun "quickrun" "Run quickrun with `anything'." t nil)(autoload 'helm-quickrun "quickrun" "Run quickrun with `helm'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "quickrun" '("helm-quickrun-" "quick")))(defvar eros-mode nil "Non-nil if Eros mode is enabled.
See the `eros-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `eros-mode'.")(autoload 'eros-mode "eros" "Display Emacs Lisp evaluation results overlays.

If called interactively, enable Eros mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eros" '("eros-")))(defvar dumb-jump-mode-map (let ((map (make-sparse-keymap))) (define-key map (kbd "C-M-g") 'dumb-jump-go) (define-key map (kbd "C-M-p") 'dumb-jump-back) (define-key map (kbd "C-M-q") 'dumb-jump-quick-look) map))(autoload 'dumb-jump-back "dumb-jump" "Jump back to where the last jump was done." t nil)(autoload 'dumb-jump-quick-look "dumb-jump" "Run dumb-jump-go in quick look mode.  That is, show a tooltip of where it would jump instead." t nil)(autoload 'dumb-jump-go-other-window "dumb-jump" "Like 'dumb-jump-go' but use 'find-file-other-window' instead of 'find-file'." t nil)(autoload 'dumb-jump-go-current-window "dumb-jump" "Like dumb-jump-go but always use 'find-file'." t nil)(autoload 'dumb-jump-go-prefer-external "dumb-jump" "Like dumb-jump-go but prefer external matches from the current file." t nil)(autoload 'dumb-jump-go-prompt "dumb-jump" "Like dumb-jump-go but prompts for function instead of using under point" t nil)(autoload 'dumb-jump-go-prefer-external-other-window "dumb-jump" "Like dumb-jump-go-prefer-external but use 'find-file-other-window' instead of 'find-file'." t nil)(autoload 'dumb-jump-go "dumb-jump" "Go to the function/variable declaration for thing at point.
When USE-TOOLTIP is t a tooltip jump preview will show instead.
When PREFER-EXTERNAL is t it will sort external matches before
current file.

(fn &optional USE-TOOLTIP PREFER-EXTERNAL PROMPT)" t nil)(defvar dumb-jump-mode nil "Non-nil if Dumb-Jump mode is enabled.
See the `dumb-jump-mode' command
for a description of this minor mode.")(autoload 'dumb-jump-mode "dumb-jump" "Minor mode for jumping to variable and function definitions

If called interactively, enable Dumb-Jump mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'dumb-jump-xref-activate "dumb-jump" "Function to activate xref backend.
Add this function to `xref-backend-functions' to dumb jump to be
activiated, whenever it finds a project. It is recommended to add
it to the end, so that it only gets activated when no better
option is found." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dumb-jump" '("dumb-jump-")))(autoload 'ivy-xref-show-xrefs "ivy-xref" "Show the list of xrefs returned by FETCHER and ALIST via ivy.

(fn FETCHER ALIST)" nil nil)(autoload 'ivy-xref-show-defs "ivy-xref" "Show the list of definitions returned by FETCHER and ALIST via ivy.
Will jump to the definition if only one is found.

(fn FETCHER ALIST)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-xref" '("ivy-xref-")))(autoload 'helm-xref-show-xrefs "helm-xref" "Function to display XREFS.

Needs to be set the value of `xref-show-xrefs-function'.

(fn XREFS ALIST)" nil nil)(autoload 'helm-xref-show-xrefs-27 "helm-xref" "Function to display XREFS.

Needs to be set the value of `xref-show-xrefs-function'.

(fn FETCHER ALIST)" nil nil)(autoload 'helm-xref-show-defs-27 "helm-xref" "Function to display list of definitions.

(fn FETCHER ALIST)" nil nil)(if (< emacs-major-version 27) (setq xref-show-xrefs-function 'helm-xref-show-xrefs) (progn (setq xref-show-xrefs-function 'helm-xref-show-xrefs-27) (setq xref-show-definitions-function 'helm-xref-show-defs-27)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-xref" '("helm-xref-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "request" '("request-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-actionscript" '("lsp-actionscript-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ada" '("lsp-ada-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-angular" '("lsp-client")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-bash" '("lsp-bash-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-beancount" '("lsp-beancount-")))(autoload 'lsp-cpp-flycheck-clang-tidy-error-explainer "lsp-clangd" "Explain a clang-tidy ERROR by scraping documentation from llvm.org.

(fn ERROR)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-clangd" '("lsp-c")))(autoload 'lsp-clojure-show-test-tree "lsp-clojure" "Show a test tree and focus on it if IGNORE-FOCUS? is nil.

(fn IGNORE-FOCUS\\=\\?)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-clojure" '("lsp-clojure-")))(define-obsolete-variable-alias 'lsp-prefer-capf 'lsp-completion-provider "lsp-mode 7.0.1")(define-obsolete-variable-alias 'lsp-enable-completion-at-point 'lsp-completion-enable "lsp-mode 7.0.1")(autoload 'lsp-completion-at-point "lsp-completion" "Get lsp completions." nil nil)(autoload 'lsp-completion--enable "lsp-completion" "Enable LSP completion support." nil nil)(autoload 'lsp-completion-mode "lsp-completion" "Toggle LSP completion support.

If called interactively, enable Lsp-Completion mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-auto-configure lsp-completion-enable) (lsp-completion--enable))))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-completion" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-crystal" '("lsp-clients-crystal-executable")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-csharp" '("lsp-csharp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-css" '("lsp-css-")))(define-obsolete-variable-alias 'lsp-diagnostic-package 'lsp-diagnostics-provider "lsp-mode 7.0.1")(define-obsolete-variable-alias 'lsp-flycheck-default-level 'lsp-diagnostics-flycheck-default-level "lsp-mode 7.0.1")(autoload 'lsp-diagnostics-lsp-checker-if-needed "lsp-diagnostics" nil nil nil)(autoload 'lsp-diagnostics--enable "lsp-diagnostics" "Enable LSP checker support." nil nil)(autoload 'lsp-diagnostics-mode "lsp-diagnostics" "Toggle LSP diagnostics integration.

If called interactively, enable Lsp-Diagnostics mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(add-hook 'lsp-configure-hook (lambda nil (when lsp-auto-configure (lsp-diagnostics--enable))))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-diagnostics" '("lsp-diagnostics-")))(defvar lsp-dired-mode nil "Non-nil if Lsp-Dired mode is enabled.
See the `lsp-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-dired-mode'.")(autoload 'lsp-dired-mode "lsp-dired" "Display `lsp-mode' icons for each file in a dired buffer.

If called interactively, enable Lsp-Dired mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-dired" '("lsp-dired-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-dockerfile" '("lsp-dockerfile-language-server-command")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-elixir" '("lsp-elixir-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-elm" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-erlang" '("lsp-erlang-server-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-eslint" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-fortran" '("lsp-clients-")))(autoload 'lsp-fsharp--workspace-load "lsp-fsharp" "Load all of the provided PROJECTS.

(fn PROJECTS)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-fsharp" '("lsp-fsharp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-gdscript" '("lsp-gdscript-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-go" '("lsp-go-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-graphql" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-groovy" '("lsp-groovy-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-hack" '("lsp-clients-hack-command")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-haxe" '("lsp-")))(autoload 'lsp-headerline-breadcrumb-mode "lsp-headerline" "Toggle breadcrumb on headerline.

If called interactively, enable Lsp-Headerline-Breadcrumb mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'lsp-breadcrumb-go-to-symbol "lsp-headerline" "Go to the symbol on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t nil)(autoload 'lsp-breadcrumb-narrow-to-symbol "lsp-headerline" "Narrow to the symbol range on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-headerline" '("lsp-headerline-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-html" '("lsp-html-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-icons" '("lsp-")))(autoload 'lsp-ido-workspace-symbol "lsp-ido" "`ido' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ido" '("lsp-ido-")))(autoload 'lsp-iedit-highlights "lsp-iedit" "Start an `iedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t nil)(autoload 'lsp-iedit-linked-ranges "lsp-iedit" "Start an `iedit' for `textDocument/linkedEditingRange'" t nil)(autoload 'lsp-evil-multiedit-highlights "lsp-iedit" "Start an `evil-multiedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t nil)(autoload 'lsp-evil-multiedit-linked-ranges "lsp-iedit" "Start an `evil-multiedit' for `textDocument/linkedEditingRange'" t nil)(autoload 'lsp-evil-state-highlights "lsp-iedit" "Start `iedit-mode'. for `textDocument/documentHighlight'" t nil)(autoload 'lsp-evil-state-linked-ranges "lsp-iedit" "Start `iedit-mode'. for `textDocument/linkedEditingRange'" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-iedit" '("lsp-iedit--on-ranges")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-javascript" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-json" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-kotlin" '("lsp-")))(autoload 'lsp-lens--enable "lsp-lens" "Enable lens mode." nil nil)(autoload 'lsp-lens-show "lsp-lens" "Display lenses in the buffer." t nil)(autoload 'lsp-lens-hide "lsp-lens" "Delete all lenses." t nil)(autoload 'lsp-lens-mode "lsp-lens" "Toggle code-lens overlays.

If called interactively, enable Lsp-Lens mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'lsp-avy-lens "lsp-lens" "Click lsp lens using `avy' package." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-lens" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-lua" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-markdown" '("lsp-markdown-")))(put 'lsp-enable-file-watchers 'safe-local-variable #'booleanp)(put 'lsp-file-watch-ignored-directories 'safe-local-variable 'lsp--string-listp)(put 'lsp-file-watch-ignored-files 'safe-local-variable 'lsp--string-listp)(put 'lsp-file-watch-threshold 'safe-local-variable (lambda (i) (or (numberp i) (not i))))(autoload 'lsp--string-listp "lsp-mode" "Return t if all elements of SEQUENCE are strings, else nil.

(fn SEQUENCE)" nil nil)(autoload 'lsp-load-vscode-workspace "lsp-mode" "Load vscode workspace from FILE

(fn FILE)" t nil)(autoload 'lsp-save-vscode-workspace "lsp-mode" "Save vscode workspace to FILE

(fn FILE)" t nil)(autoload 'lsp-install-server "lsp-mode" "Interactively install or re-install server.
When prefix UPDATE? is t force installation even if the server is present.

(fn UPDATE\\=\\? &optional SERVER-ID)" t nil)(autoload 'lsp-update-server "lsp-mode" "Interactively update a server.

(fn &optional SERVER-ID)" t nil)(autoload 'lsp-ensure-server "lsp-mode" "Ensure server SERVER-ID

(fn SERVER-ID)" nil nil)(autoload 'lsp "lsp-mode" "Entry point for the server startup.
When ARG is t the lsp mode will start new language server even if
there is language server which can handle current language. When
ARG is nil current file will be opened in multi folder language
server if there is such. When `lsp' is called with prefix
argument ask the user to select which language server to start.

(fn &optional ARG)" t nil)(autoload 'lsp-deferred "lsp-mode" "Entry point that defers server startup until buffer is visible.
`lsp-deferred' will wait until the buffer is visible before invoking `lsp'.
This avoids overloading the server with many files when starting Emacs." nil nil)(autoload 'lsp-start-plain "lsp-mode" "Start `lsp-mode' using mininal configuration using the latest `melpa' version of the packages.

In case the major-mode that you are using for " t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-mode" '("defcustom-lsp" "lsp-" "make-lsp-client" "when-lsp-workspace" "with-lsp-workspace")))(define-obsolete-variable-alias 'lsp-diagnostics-modeline-scope 'lsp-modeline-diagnostics-scope "lsp-mode 7.0.1")(autoload 'lsp-modeline-code-actions-mode "lsp-modeline" "Toggle code actions on modeline.

If called interactively, enable Lsp-Modeline-Code-Actions mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(define-obsolete-function-alias 'lsp-diagnostics-modeline-mode 'lsp-modeline-diagnostics-mode "lsp-mode 7.0.1")(autoload 'lsp-modeline-diagnostics-mode "lsp-modeline" "Toggle diagnostics modeline.

If called interactively, enable Lsp-Modeline-Diagnostics mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'lsp-modeline-workspace-status-mode "lsp-modeline" "Toggle workspace status on modeline.

If called interactively, enable Lsp-Modeline-Workspace-Status
mode if ARG is positive, and disable it if ARG is zero or
negative.  If called from Lisp, also enable the mode if ARG is
omitted or nil, and toggle it if ARG is `toggle'; disable the
mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-modeline" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-nginx" '("lsp-nginx-server-command")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-nix" '("lsp-nix-server-path")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ocaml" '("lsp-ocaml-l")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-perl" '("lsp-perl-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-php" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-prolog" '("lsp-prolog-server-command")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-protocol" '("dash-expand:&RangeToPoint" "lsp")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-purescript" '("lsp-purescript-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-pwsh" '("lsp-pwsh-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-pyls" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-pylsp" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-r" '("lsp-clients-r-server-command")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-racket" '("lsp-racket-lang")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-remark" '("lsp-remark-server-command")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-rf" '("expand-start-command" "lsp-rf-language-server-" "parse-rf-language-server-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-rust" '("lsp-")))(autoload 'lsp--semantic-tokens-initialize-buffer "lsp-semantic-tokens" "Initialize the buffer for semantic tokens.
IS-RANGE-PROVIDER is non-nil when server supports range requests." nil nil)(autoload 'lsp--semantic-tokens-initialize-workspace "lsp-semantic-tokens" "Initialize semantic tokens for WORKSPACE.

(fn WORKSPACE)" nil nil)(autoload 'lsp-semantic-tokens--warn-about-deprecated-setting "lsp-semantic-tokens" "Warn about deprecated semantic highlighting variable." nil nil)(autoload 'lsp-semantic-tokens--enable "lsp-semantic-tokens" "Enable semantic tokens mode." nil nil)(autoload 'lsp-semantic-tokens-mode "lsp-semantic-tokens" "Toggle semantic-tokens support.

If called interactively, enable Lsp-Semantic-Tokens mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-semantic-tokens" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-solargraph" '("lsp-solargraph-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-sorbet" '("lsp-sorbet-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-sqls" '("lsp-sql")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-steep" '("lsp-steep-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-svelte" '("lsp-svelte-plugin-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-terraform" '("lsp-terraform-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-tex" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-toml" '("lsp-toml-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-v" '("lsp-v-vls-executable")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-vala" '("lsp-clients-vala-ls-executable")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-verilog" '("lsp-clients-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-vetur" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-vhdl" '("ghdl-ls-bin-name" "hdl-checker-bin-name" "lsp-vhdl-" "vhdl-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-vimscript" '("lsp-clients-vim-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-xml" '("lsp-xml-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-yaml" '("lsp-yaml-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-zig" '("lsp-zig-zls-executable")))(autoload 'spinner-create "spinner" "Create a spinner of the given TYPE.
The possible TYPEs are described in `spinner--type-to-frames'.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

If BUFFER-LOCAL is non-nil, the spinner will be automatically
deactivated if the buffer is killed.  If BUFFER-LOCAL is a
buffer, use that instead of current buffer.

When started, in order to function properly, the spinner runs a
timer which periodically calls `force-mode-line-update' in the
current buffer.  If BUFFER-LOCAL was set at creation time, then
`force-mode-line-update' is called in that buffer instead.  When
the spinner is stopped, the timer is deactivated.

DELAY, if given, is the number of seconds to wait after starting
the spinner before actually displaying it. It is safe to cancel
the spinner before this time, in which case it won't display at
all.

(fn &optional TYPE BUFFER-LOCAL FPS DELAY)" nil nil)(autoload 'spinner-start "spinner" "Start a mode-line spinner of given TYPE-OR-OBJECT.
If TYPE-OR-OBJECT is an object created with `make-spinner',
simply activate it.  This method is designed for minor modes, so
they can use the spinner as part of their lighter by doing:
    '(:eval (spinner-print THE-SPINNER))
To stop this spinner, call `spinner-stop' on it.

If TYPE-OR-OBJECT is anything else, a buffer-local spinner is
created with this type, and it is displayed in the
`mode-line-process' of the buffer it was created it.  Both
TYPE-OR-OBJECT and FPS are passed to `make-spinner' (which see).
To stop this spinner, call `spinner-stop' in the same buffer.

Either way, the return value is a function which can be called
anywhere to stop this spinner.  You can also call `spinner-stop'
in the same buffer where the spinner was created.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

DELAY, if given, is the number of seconds to wait until actually
displaying the spinner. It is safe to cancel the spinner before
this time, in which case it won't display at all.

(fn &optional TYPE-OR-OBJECT FPS DELAY)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "spinner" '("spinner-")))(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files.

(fn)" t nil)(autoload 'gfm-mode "markdown-mode" "Major mode for editing GitHub Flavored Markdown files.

(fn)" t nil)(autoload 'markdown-view-mode "markdown-mode" "Major mode for viewing Markdown content.

(fn)" t nil)(autoload 'gfm-view-mode "markdown-mode" "Major mode for viewing GitHub Flavored Markdown content.

(fn)" t nil)(autoload 'markdown-live-preview-mode "markdown-mode" "Toggle native previewing on save for a specific markdown file.

If called interactively, enable Markdown-Live-Preview mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "markdown-mode" '("defun-markdown-" "gfm-" "markdown")))(autoload 'lsp-ui-mode "lsp-ui" "Toggle language server UI mode on or off.
‘lsp-ui-mode’ is a minor mode that contains a series of useful UI
integrations for ‘lsp-mode’.  With a prefix argument ARG, enable
language server UI mode if ARG is positive, and disable it
otherwise.  If called from Lisp, enable the mode if ARG is
omitted or nil, and toggle it if ARG is ‘toggle’.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui" '("lsp-ui-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-doc" '("lsp-ui-doc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-flycheck" '("lsp-ui-flycheck-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-imenu" '("lsp-ui-imenu")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-peek" '("lsp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-sideline" '("lsp-ui-sideline")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-util" '("lsp-ui-util-")))(autoload 'lsp-ivy-workspace-symbol "lsp-ivy" "`ivy' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

(fn ARG)" t nil)(autoload 'lsp-ivy-global-workspace-symbol "lsp-ivy" "`ivy' for lsp workspace/symbol for all of the current workspaces.
When called with prefix ARG the default selection will be symbol at point.

(fn ARG)" t nil)(autoload 'lsp-ivy-workspace-folders-remove "lsp-ivy" "Remove a project-root from the list of workspace folders." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ivy" '("lsp-ivy-")))(autoload 'helm-lsp-workspace-symbol "helm-lsp" "`helm' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

(fn ARG)" t nil)(autoload 'helm-lsp-global-workspace-symbol "helm-lsp" "`helm' for lsp workspace/symbol for all of the current workspaces.
When called with prefix ARG the default selection will be symbol at point.

(fn ARG)" t nil)(autoload 'helm-lsp-code-actions "helm-lsp" "Show lsp code actions using helm." t nil)(autoload 'helm-lsp-diagnostics "helm-lsp" "Diagnostics using `helm'

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-lsp" '("helm-lsp-")))(autoload 'turn-on-magit-gitflow "magit-gitflow" "Unconditionally turn on `magit-gitflow-mode'." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-gitflow" '("define-magit-gitflow-" "magit-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-popup" '("magit-")))(defvar magit-todos-mode nil "Non-nil if Magit-Todos mode is enabled.
See the `magit-todos-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-todos-mode'.")(autoload 'magit-todos-mode "magit-todos" "Show list of to-do items in Magit status buffer for tracked files in repo.

If called interactively, enable Magit-Todos mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'magit-todos-list "magit-todos" "Show to-do list of the current Git repository in a buffer.
With prefix, prompt for repository.

(fn &optional DIRECTORY)" t nil)(autoload 'magit-todos-list-internal "magit-todos" "Open buffer showing to-do list of repository at DIRECTORY.

(fn DIRECTORY)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-todos" '("magit-todos-")))(autoload 'code-review-forge-pr-at-point "code-review" "Review the forge pull request at point.
OUTDATED." t nil)(autoload 'code-review-start "code-review" "Start review given PR URL.

(fn URL)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review" '("code-review-")))(autoload 'code-review--submit "code-review-actions" "Submit your review with a final verdict (EVENT).
If you already have a FEEDBACK string use it.
If you want only to submit replies, use ONLY-REPLY? as non-nil.

(fn EVENT &optional FEEDBACK ONLY-REPLY\\=\\?)" t nil)(autoload 'code-review-submit-approve "code-review-actions" "Approve current PR.
Optionally set a FEEDBACK message.

(fn &optional FEEDBACK)" t nil)(autoload 'code-review-submit-comments "code-review-actions" "Submit a Review Comment for the current PR." t nil)(autoload 'code-review-submit-request-changes "code-review-actions" "Submit a Request Change for the current PR." t nil)(autoload 'code-review-submit-lgtm "code-review-actions" "Submit an Approve Review with a LGTM message." t nil)(autoload 'code-review-submit-only-replies "code-review-actions" "Submit only replies comments." t nil)(autoload 'code-review-submit-single-top-level-comment "code-review-actions" "Submit a single comment without an attached Review." t nil)(autoload 'code-review-submit-single-diff-comment-at-point "code-review-actions" "Submit a single diff comment without an attached Review." t nil)(autoload 'code-review-save-unfinished-review "code-review-actions" "Save unfinished Review." t nil)(autoload 'code-review-recover-unfinished-review "code-review-actions" "Recover unfinished Review for the given URL.

(fn URL)" t nil)(autoload 'code-review-open-unfinished-review "code-review-actions" "Choose an unfinished Review from the previous unfinished list." t nil)(autoload 'code-review-merge-merge "code-review-actions" "Merge PR with MERGE strategy." t nil)(autoload 'code-review-merge-rebase "code-review-actions" "Merge PR with REBASE strategy." t nil)(autoload 'code-review-merge-squash "code-review-actions" "Merge PR with SQUASH strategy." t nil)(autoload 'code-review-set-feedback "code-review-actions" "Add review FEEDBACK locally.  Required to Comment and Request Change reviews." t nil)(autoload 'code-review-set-title "code-review-actions" "Change the title of current PR.  Sent immediately." t nil)(autoload 'code-review-set-label "code-review-actions" "Change the labels of current PR.  Sent immediately.
Rewrite all current labels with the options chosen here." t nil)(autoload 'code-review-set-description "code-review-actions" "Submit new PR description.  Sent immediately." t nil)(autoload 'code-review-delete-feedback "code-review-actions" "Delete review FEEDBACK locally." t nil)(autoload 'code-review-reload "code-review-actions" "Reload the buffer.  All your local comments will be lost." t nil)(autoload 'code-review-promote-comment-at-point-to-new-issue "code-review-actions" "Promote comment at point to a new issue.  Sent immediately." t nil)(autoload 'code-review-request-reviews "code-review-actions" "Request reviewers for current PR using LOGIN if available.

(fn &optional LOGIN)" t nil)(autoload 'code-review-request-review-at-point "code-review-actions" "Request reviewer at point.

(fn &rest _)" t nil)(autoload 'code-review-toggle-display-all-comments "code-review-actions" "Toggle display comments." t nil)(autoload 'code-review-toggle-display-top-level-comments "code-review-actions" "Toggle display the top level comments." t nil)(autoload 'code-review-toggle-display-diff-comments "code-review-actions" "Toggle display the top level comments." t nil)(autoload 'code-review-comment-code-suggestion "code-review-actions" "Add code suggestion box." t nil)(autoload 'code-review-comment-jump-next "code-review-actions" "Go to next comment in the buffer." t nil)(autoload 'code-review-comment-jump-previous "code-review-actions" "Go to previous comment in the buffer." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-actions" '("code-review-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-bitbucket" '("code-review-")))(autoload 'code-review-comment-add-or-edit "code-review-comment" "Add or edit comment depending on context.
Inform if a SUGGESTION-CODE? is being proposed.

(fn &optional SUGGESTION-CODE\\=\\?)" t nil)(autoload 'code-review-comment-commit "code-review-comment" "Commit comment." t nil)(autoload 'code-review-input-mention-user-at-point "code-review-comment" "Insert @USERNAME at current point to mention an user." t nil)(autoload 'code-review-comment-quit "code-review-comment" "Quit the comment window." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-comment" '("code-review-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-db" '("code-review-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-github" '("code-review-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-gitlab" '("code-review-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-parse-hunk" '("code-review-parse-")))(autoload 'code-review-section-delete-comment "code-review-section" "Delete a local comment." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-section" '("code-review-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-utils" '("code-review-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "closql" '("closql-" "eieio-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emacsql-sqlite" '("emacsql-sqlite-")))(autoload 'emacsql-show-last-sql "emacsql" "Display the compiled SQL of the s-expression SQL expression before point.
A prefix argument causes the SQL to be printed into the current buffer.

(fn &optional PREFIX)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emacsql" '("emacsql-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emacsql-compiler" '("emacsql-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "a" '("a-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "buck" '("buck-default-host")))(autoload 'ghub-clear-caches "ghub" "Clear all caches that might negatively affect Ghub.

If a library that is used by Ghub caches incorrect information
such as a mistyped password, then that can prevent Ghub from
asking the user for the correct information again.

Set `url-http-real-basic-auth-storage' to nil
and call `auth-source-forget+'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ghub" '("ghub-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ghub-graphql" '("ghub-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "glab" '("glab-default-host")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gogs" '("gogs-default-host")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gsexp" '("gsexp-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gtea" '("gtea-default-host")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treepy" '("treepy-")))(autoload 'insert-uuid-cid "uuidgen" "Insert UUID string in CID format that is suitable for COM definition.
If UUID is nil will generate UUIDGEN-4 automatically.
You customize `uuidgen-cid-format-string' to change the default format.

(fn UUID)" t nil)(autoload 'uuidgen "uuidgen" "Insert UUIDv4 at point. If TIME-BASED is non-nil, insert UUIDv1 instead.

(fn TIME-BASED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "uuidgen" '("uuidgen-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "deferred" '("deferred:")))(defvar forge-add-default-bindings t "Whether to add Forge's bindings to various Magit keymaps.
If you want to disable this, then you must set this to nil before
`magit' is loaded.  If you do it before `forge' but after `magit'
is loaded, then `magit-mode-map' ends up being modified anyway.")(with-eval-after-load 'magit-mode (when forge-add-default-bindings (define-key magit-mode-map "'" 'forge-dispatch) (define-key magit-mode-map "N" 'forge-dispatch)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-bitbucket" '("forge-bitbucket-repository")))(autoload 'forge-dispatch "forge-commands" nil t)(autoload 'forge-pull "forge-commands" "Pull topics from the forge repository.

With a prefix argument and if the repository has not been fetched
before, then read a date from the user and limit pulled topics to
those that have been updated since then.

If pulling is too slow, then also consider setting the Git variable
`forge.omitExpensive' to `true'.

(fn &optional REPO UNTIL)" t nil)(autoload 'forge-pull-notifications "forge-commands" "Fetch notifications for all repositories from the current forge." t nil)(autoload 'forge-pull-topic "forge-commands" "Pull the API data for the current topic.
If there is no current topic or with a prefix argument read a
TOPIC to pull instead.

(fn TOPIC)" t nil)(autoload 'forge-browse-dwim "forge-commands" "Visit a topic, branch or commit using a browser.
Prefer a topic over a branch and that over a commit." t nil)(autoload 'forge-browse-commit "forge-commands" "Visit the url corresponding to REV using a browser.

(fn REV)" t nil)(autoload 'forge-copy-url-at-point-as-kill "forge-commands" "Copy the url of the thing at point." t nil)(autoload 'forge-browse-branch "forge-commands" "Visit the url corresponding BRANCH using a browser.

(fn BRANCH)" t nil)(autoload 'forge-browse-remote "forge-commands" "Visit the url corresponding to REMOTE using a browser.

(fn REMOTE)" t nil)(autoload 'forge-browse-repository "forge-commands" "View the current repository in a separate buffer.

(fn REPO)" t nil)(autoload 'forge-browse-topic "forge-commands" "Visit the current topic using a browser." t nil)(autoload 'forge-browse-pullreqs "forge-commands" "Visit the pull-requests of the current repository using a browser." t nil)(autoload 'forge-browse-pullreq "forge-commands" "Visit the url corresponding to PULLREQ using a browser.

(fn PULLREQ)" t nil)(autoload 'forge-browse-issues "forge-commands" "Visit the issues of the current repository using a browser." t nil)(autoload 'forge-browse-issue "forge-commands" "Visit the current issue using a browser.
If there is no current issue or with a prefix argument
read an ISSUE to visit.

(fn ISSUE)" t nil)(autoload 'forge-browse-post "forge-commands" "Visit the current post using a browser." t nil)(autoload 'forge-visit-topic "forge-commands" "View the current topic in a separate buffer.
If there is no current topic or with a prefix argument
read a topic to visit instead.

(fn TOPIC)" t nil)(autoload 'forge-visit-pullreq "forge-commands" "View the current pull-request in a separate buffer.
If there is no current pull-request or with a prefix argument
read a PULLREQ to visit instead.

(fn PULLREQ)" t nil)(autoload 'forge-visit-issue "forge-commands" "Visit the current issue in a separate buffer.
If there is no current issue or with a prefix argument
read an ISSUE to visit instead.

(fn ISSUE)" t nil)(autoload 'forge-visit-repository "forge-commands" "View the current repository in a separate buffer.

(fn REPO)" t nil)(autoload 'forge-branch-pullreq "forge-commands" "Create and configure a new branch from a pull-request.
Please see the manual for more information.

(fn PULLREQ)" t nil)(autoload 'forge-checkout-pullreq "forge-commands" "Create, configure and checkout a new branch from a pull-request.
Please see the manual for more information.

(fn PULLREQ)" t nil)(autoload 'forge-checkout-worktree "forge-commands" "Create, configure and checkout a new worktree from a pull-request.
This is like `forge-checkout-pullreq', except that it also
creates a new worktree. Please see the manual for more
information.

(fn PATH PULLREQ)" t nil)(autoload 'forge-fork "forge-commands" "Fork the current repository to FORK and add it as a REMOTE.
If the fork already exists, then that isn't an error; the remote
is added anyway.  Currently this only supports Github and Gitlab.

(fn FORK REMOTE)" t nil)(autoload 'forge-list-notifications "forge-commands" "List notifications." t nil)(autoload 'forge-add-pullreq-refspec "forge-commands" "Configure Git to fetch all pull-requests.
This is done by adding \"+refs/pull/*/head:refs/pullreqs/*\"
to the value of `remote.REMOTE.fetch', where REMOTE is the
upstream remote.  Also fetch from REMOTE." t nil)(autoload 'forge-add-repository "forge-commands" "Add a repository to the database.
Offer to either pull topics (now and in the future) or to only
pull individual topics when the user invokes `forge-pull-topic'.

(fn URL)" t nil)(function-put 'forge-add-repository 'interactive-only 't)(autoload 'forge-add-user-repositories "forge-commands" "Add all of USER's repositories from HOST to the database.
This may take a while.  Only Github is supported at the moment.

(fn HOST USER)" t nil)(autoload 'forge-add-organization-repositories "forge-commands" "Add all of ORGANIZATION's repositories from HOST to the database.
This may take a while.  Only Github is supported at the moment.

(fn HOST ORGANIZATION)" t nil)(autoload 'forge-merge "forge-commands" "Merge the current pull-request using METHOD using the forge's API.

If there is no current pull-request or with a prefix argument,
then read pull-request PULLREQ to visit instead.

Use of this command is discouraged.  Unless the remote repository
is configured to disallow that, you should instead merge locally
and then push the target branch.  Forges detect that you have
done that and respond by automatically marking the pull-request
as merged.

(fn PULLREQ METHOD)" t nil)(autoload 'forge-remove-repository "forge-commands" "Remove a repository from the database.

(fn HOST OWNER NAME)" t nil)(autoload 'forge-remove-topic-locally "forge-commands" "Remove a topic from the local database only.
Due to how the supported APIs work, it would be too expensive to
automatically remove topics from the local datbase that were
removed from the forge.  The purpose of this command is to allow
you to manually clean up the local database.

(fn TOPIC)" t nil)(autoload 'forge-reset-database "forge-commands" "Move the current database file to the trash.
This is useful after the database scheme has changed, which will
happen a few times while the forge functionality is still under
heavy development." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-commands" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-core" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-db" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-gitea" '("forge-gitea-repository")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-github" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-gitlab" '("forge-gitlab-repository")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-gogs" '("forge-gogs-repository")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-issue" '("forge-")))(autoload 'forge-list-topics "forge-list" "List topics of the current repository in a separate buffer.

(fn ID)" t nil)(autoload 'forge-list-issues "forge-list" "List issues of the current repository in a separate buffer.

(fn ID)" t nil)(autoload 'forge-list-labeled-issues "forge-list" "List issues of the current repository that have LABEL.
List them in a separate buffer.

(fn ID LABEL)" t nil)(autoload 'forge-list-assigned-issues "forge-list" "List issues of the current repository that are assigned to you.
List them in a separate buffer.

(fn ID)" t nil)(autoload 'forge-list-owned-issues "forge-list" "List open issues from all your Github repositories.
Options `forge-owned-accounts' and `forge-owned-ignored'
controls which repositories are considered to be owned by you.
Only Github is supported for now." t nil)(autoload 'forge-list-pullreqs "forge-list" "List pull-requests of the current repository in a separate buffer.

(fn ID)" t nil)(autoload 'forge-list-labeled-pullreqs "forge-list" "List pull-requests of the current repository that have LABEL.
List them in a separate buffer.

(fn ID LABEL)" t nil)(autoload 'forge-list-assigned-pullreqs "forge-list" "List pull-requests of the current repository that are assigned to you.
List them in a separate buffer.

(fn ID)" t nil)(autoload 'forge-list-requested-reviews "forge-list" "List pull-requests of the current repository that are awaiting your review.
List them in a separate buffer.

(fn ID)" t nil)(autoload 'forge-list-owned-pullreqs "forge-list" "List open pull-requests from all your Github repositories.
Options `forge-owned-accounts' and `forge-owned-ignored'
controls which repositories are considered to be owned by you.
Only Github is supported for now." t nil)(autoload 'forge-list-authored-pullreqs "forge-list" "List open pull-requests of the current repository that are authored by you.
List them in a separate buffer.

(fn ID)" t nil)(autoload 'forge-list-authored-issues "forge-list" "List open issues from the current repository that are authored by you.
List them in a separate buffer.

(fn ID)" t nil)(autoload 'forge-list-repositories "forge-list" "List known repositories in a separate buffer.
Here \"known\" means that an entry exists in the local database." t nil)(autoload 'forge-list-owned-repositories "forge-list" "List your own known repositories in a separate buffer.
Here \"known\" means that an entry exists in the local database
and options `forge-owned-accounts' and `forge-owned-ignored'
controls which repositories are considered to be owned by you.
Only Github is supported for now." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-list" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-notify" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-post" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-pullreq" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-repo" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-revnote" '("forge-revnote")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-semi" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-topic" '("forge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "yaml" '("yaml-")))(autoload 'emojify-set-emoji-styles "emojify" "Set the type of emojis that should be displayed.

STYLES is the styles emoji styles that should be used, see `emojify-emoji-styles'

(fn STYLES)" nil nil)(autoload 'emojify-mode "emojify" "Emojify mode

If called interactively, enable Emojify mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-emojify-mode 'globalized-minor-mode t)(defvar global-emojify-mode nil "Non-nil if Global Emojify mode is enabled.
See the `global-emojify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-emojify-mode'.")(autoload 'global-emojify-mode "emojify" "Toggle Emojify mode in all buffers.
With prefix ARG, enable Global Emojify mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Emojify mode is enabled in all buffers where
`emojify-mode' would do it.
See `emojify-mode' for more information on Emojify mode.

(fn &optional ARG)" t nil)(autoload 'emojify-mode-line-mode "emojify" "Emojify mode line

If called interactively, enable Emojify-Mode-Line mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-emojify-mode-line-mode 'globalized-minor-mode t)(defvar global-emojify-mode-line-mode nil "Non-nil if Global Emojify-Mode-Line mode is enabled.
See the `global-emojify-mode-line-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-emojify-mode-line-mode'.")(autoload 'global-emojify-mode-line-mode "emojify" "Toggle Emojify-Mode-Line mode in all buffers.
With prefix ARG, enable Global Emojify-Mode-Line mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Emojify-Mode-Line mode is enabled in all buffers where
`emojify-mode-line-mode' would do it.
See `emojify-mode-line-mode' for more information on Emojify-Mode-Line mode.

(fn &optional ARG)" t nil)(autoload 'emojify-apropos-emoji "emojify" "Show Emojis that match PATTERN.

(fn PATTERN)" t nil)(autoload 'emojify-insert-emoji "emojify" "Interactively prompt for Emojis and insert them in the current buffer.

This respects the `emojify-emoji-styles' variable." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emojify" '("emojify-")))(autoload 'makefile-executor-execute-target "makefile-executor" "Execute a Makefile target from FILENAME.

FILENAME defaults to current buffer.

(fn FILENAME &optional TARGET)" t nil)(autoload 'makefile-executor-execute-project-target "makefile-executor" "Choose a Makefile target from all of the Makefiles in the project.

If there are several Makefiles, a prompt to select one of them is shown.
If so, the parent directory of the closest Makefile is added
as initial input for convenience in executing the most relevant Makefile." t nil)(autoload 'makefile-executor-execute-dedicated-buffer "makefile-executor" "Runs a makefile target in a dedicated compile buffer.

The dedicated buffer will be named \"*<target>*\".  If
`projectile' is installed and the makefile is in a project the
project name will be prepended to the dedicated buffer name.

(fn FILENAME &optional TARGET)" t nil)(autoload 'makefile-executor-execute-last "makefile-executor" "Execute the most recently executed Makefile target.

If none is set, prompt for it using
`makefile-executor-execute-project-target'.  If the universal
argument is given, always prompt.

(fn ARG)" t nil)(autoload 'makefile-executor-goto-makefile "makefile-executor" "Interactively choose a Makefile to visit." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "makefile-executor" '("makefile-executor-")))(autoload 'pdf-annot-minor-mode "pdf-annot" "Support for PDF Annotations.

If called interactively, enable Pdf-Annot minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{pdf-annot-minor-mode-map}

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-annot" '("pdf-annot-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-cache" '("boundingbox" "define-pdf-cache-function" "page" "pdf-cache-" "textregions")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-dev" '("pdf-dev-")))(autoload 'pdf-history-minor-mode "pdf-history" "Keep a history of previously visited pages.

If called interactively, enable Pdf-History minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

This is a simple stack-based history.  Turning the page or
following a link pushes the left-behind page on the stack, which
may be navigated with the following keys.

\\{pdf-history-minor-mode-map}

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-history" '("pdf-history-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-info" '("pdf-info-")))(autoload 'pdf-isearch-minor-mode "pdf-isearch" "Isearch mode for PDF buffer.

If called interactively, enable Pdf-Isearch minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When this mode is enabled \\[isearch-forward], among other keys,
starts an incremental search in this PDF document.  Since this mode
uses external programs to highlight found matches via
image-processing, proceeding to the next match may be slow.

Therefore two isearch behaviours have been defined: Normal isearch and
batch mode.  The later one is a minor mode
(`pdf-isearch-batch-mode'), which when activated inhibits isearch
from stopping at and highlighting every single match, but rather
display them batch-wise.  Here a batch means a number of matches
currently visible in the selected window.

The kind of highlighting is determined by three faces
`pdf-isearch-match' (for the current match), `pdf-isearch-lazy'
(for all other matches) and `pdf-isearch-batch' (when in batch
mode), which see.

Colors may also be influenced by the minor-mode
`pdf-view-dark-minor-mode'.  If this is minor mode enabled, each face's
dark colors, are used (see e.g. `frame-background-mode'), instead
of the light ones.

\\{pdf-isearch-minor-mode-map}
While in `isearch-mode' the following keys are available. Note
that not every isearch command work as expected.

\\{pdf-isearch-active-mode-map}

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-isearch" '("pdf-isearch-")))(autoload 'pdf-links-minor-mode "pdf-links" "Handle links in PDF documents.\\<pdf-links-minor-mode-map>

If called interactively, enable Pdf-Links minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

If this mode is enabled, most links in the document may be
activated by clicking on them or by pressing \\[pdf-links-action-perform] and selecting
one of the displayed keys, or by using isearch limited to
links via \\[pdf-links-isearch-link].

\\{pdf-links-minor-mode-map}

(fn &optional ARG)" t nil)(autoload 'pdf-links-action-perform "pdf-links" "Follow LINK, depending on its type.

This may turn to another page, switch to another PDF buffer or
invoke `pdf-links-browse-uri-function'.

Interactively, link is read via `pdf-links-read-link-action'.
This function displays characters around the links in the current
page and starts reading characters (ignoring case).  After a
sufficient number of characters have been read, the corresponding
link's link is invoked.  Additionally, SPC may be used to
scroll the current page.

(fn LINK)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-links" '("pdf-links-")))(autoload 'pdf-loader-install "pdf-loader" "Prepare Emacs for using PDF Tools.

This function acts as a replacement for `pdf-tools-install' and
makes Emacs load and use PDF Tools as soon as a PDF file is
opened, but not sooner.

The arguments are passed verbatim to `pdf-tools-install', which
see.

(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-loader" '("pdf-loader--")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-macs" '("pdf-view-")))(autoload 'pdf-misc-minor-mode "pdf-misc" "FIXME:  Not documented.

If called interactively, enable Pdf-Misc minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pdf-misc-size-indication-minor-mode "pdf-misc" "Provide a working size indication in the mode-line.

If called interactively, enable Pdf-Misc-Size-Indication minor
mode if ARG is positive, and disable it if ARG is zero or
negative.  If called from Lisp, also enable the mode if ARG is
omitted or nil, and toggle it if ARG is `toggle'; disable the
mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pdf-misc-menu-bar-minor-mode "pdf-misc" "Display a PDF Tools menu in the menu-bar.

If called interactively, enable Pdf-Misc-Menu-Bar minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pdf-misc-context-menu-minor-mode "pdf-misc" "Provide a right-click context menu in PDF buffers.

If called interactively, enable Pdf-Misc-Context-Menu minor mode
if ARG is positive, and disable it if ARG is zero or negative.
If called from Lisp, also enable the mode if ARG is omitted or
nil, and toggle it if ARG is `toggle'; disable the mode
otherwise.

\\{pdf-misc-context-menu-minor-mode-map}

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-misc" '("pdf-misc-")))(autoload 'pdf-occur "pdf-occur" "List lines matching STRING or PCRE.

Interactively search for a regexp. Unless a prefix arg was given,
in which case this functions performs a string search.

If `pdf-occur-prefer-string-search' is non-nil, the meaning of
the prefix-arg is inverted.

(fn STRING &optional REGEXP-P)" t nil)(autoload 'pdf-occur-multi-command "pdf-occur" "Perform `pdf-occur' on multiple buffer.

For a programmatic search of multiple documents see
`pdf-occur-search'." t nil)(defvar pdf-occur-global-minor-mode nil "Non-nil if Pdf-Occur-Global minor mode is enabled.
See the `pdf-occur-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-occur-global-minor-mode'.")(autoload 'pdf-occur-global-minor-mode "pdf-occur" "Enable integration of Pdf Occur with other modes.

If called interactively, enable Pdf-Occur-Global minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This global minor mode enables (or disables)
`pdf-occur-ibuffer-minor-mode' and `pdf-occur-dired-minor-mode'
in all current and future ibuffer/dired buffer.

(fn &optional ARG)" t nil)(autoload 'pdf-occur-ibuffer-minor-mode "pdf-occur" "Hack into ibuffer's do-occur binding.

If called interactively, enable Pdf-Occur-Ibuffer minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This mode remaps `ibuffer-do-occur' to
`pdf-occur-ibuffer-do-occur', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `ibuffer-do-occur'.

(fn &optional ARG)" t nil)(autoload 'pdf-occur-dired-minor-mode "pdf-occur" "Hack into dired's `dired-do-search' binding.

If called interactively, enable Pdf-Occur-Dired minor mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This mode remaps `dired-do-search' to
`pdf-occur-dired-do-search', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `dired-do-search'.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-occur" '("pdf-occur-")))(autoload 'pdf-outline-minor-mode "pdf-outline" "Display an outline of a PDF document.

If called interactively, enable Pdf-Outline minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

This provides a PDF's outline on the menu bar via imenu.
Additionally the same outline may be viewed in a designated
buffer.

\\{pdf-outline-minor-mode-map}

(fn &optional ARG)" t nil)(autoload 'pdf-outline "pdf-outline" "Display an PDF outline of BUFFER.

BUFFER defaults to the current buffer.  Select the outline
buffer, unless NO-SELECT-WINDOW-P is non-nil.

(fn &optional BUFFER NO-SELECT-WINDOW-P)" t nil)(autoload 'pdf-outline-imenu-enable "pdf-outline" "Enable imenu in the current PDF buffer." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-outline" '("pdf-outline")))(autoload 'pdf-sync-minor-mode "pdf-sync" "Correlate a PDF position with the TeX file.
\\<pdf-sync-minor-mode-map>
This works via SyncTeX, which means the TeX sources need to have
been compiled with `--synctex=1'.  In AUCTeX this can be done by
setting `TeX-source-correlate-method' to 'synctex (before AUCTeX
is loaded) and enabling `TeX-source-correlate-mode'.

If called interactively, enable Pdf-Sync minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Then \\[pdf-sync-backward-search-mouse] in the PDF buffer will open the
corresponding TeX location.

If AUCTeX is your preferred tex-mode, this library arranges to
bind `pdf-sync-forward-display-pdf-key' (the default is `C-c C-g')
to `pdf-sync-forward-search' in `TeX-source-correlate-map'.  This
function displays the PDF page corresponding to the current
position in the TeX buffer.  This function only works together
with AUCTeX.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-sync" '("pdf-sync-")))(defvar pdf-tools-handle-upgrades t "Whether PDF Tools should handle upgrading itself.")(autoload 'pdf-tools-install "pdf-tools" "Install PDF-Tools in all current and future PDF buffers.

If the `pdf-info-epdfinfo-program' is not running or does not
appear to be working, attempt to rebuild it.  If this build
succeeded, continue with the activation of the package.
Otherwise fail silently, i.e. no error is signaled.

Build the program (if necessary) without asking first, if
NO-QUERY-P is non-nil.

Don't attempt to install system packages, if SKIP-DEPENDENCIES-P
is non-nil.

Do not signal an error in case the build failed, if NO-ERROR-P is
non-nil.

Attempt to install system packages (even if it is deemed
unnecessary), if FORCE-DEPENDENCIES-P is non-nil.

Note that SKIP-DEPENDENCIES-P and FORCE-DEPENDENCIES-P are
mutually exclusive.

Note further, that you can influence the installation directory
by setting `pdf-info-epdfinfo-program' to an appropriate
value (e.g. ~/bin/epdfinfo) before calling this function.

See `pdf-view-mode' and `pdf-tools-enabled-modes'.

(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" t nil)(autoload 'pdf-tools-enable-minor-modes "pdf-tools" "Enable MODES in the current buffer.

MODES defaults to `pdf-tools-enabled-modes'.

(fn &optional MODES)" t nil)(autoload 'pdf-tools-help "pdf-tools" "Show a Help buffer for `pdf-tools'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-tools" '("pdf-tools-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-util" '("display-buffer-split-below-and-attach" "pdf-util-")))(autoload 'pdf-view-bookmark-jump-handler "pdf-view" "The bookmark handler-function interface for bookmark BMK.

See also `pdf-view-bookmark-make-record'.

(fn BMK)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-view" '("pdf-view-")))(autoload 'pdf-virtual-edit-mode "pdf-virtual" "Major mode when editing a virtual PDF buffer.

(fn)" t nil)(autoload 'pdf-virtual-view-mode "pdf-virtual" "Major mode in virtual PDF buffers.

(fn)" t nil)(defvar pdf-virtual-global-minor-mode nil "Non-nil if Pdf-Virtual-Global minor mode is enabled.
See the `pdf-virtual-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-virtual-global-minor-mode'.")(autoload 'pdf-virtual-global-minor-mode "pdf-virtual" "Enable recognition and handling of VPDF files.

If called interactively, enable Pdf-Virtual-Global minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pdf-virtual-buffer-create "pdf-virtual" "

(fn &optional FILENAMES BUFFER-NAME DISPLAY-P)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-virtual" '("pdf-virtual-")))(autoload 'tablist-minor-mode "tablist" "Toggle Tablist minor mode on or off.

If called interactively, enable Tablist minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{tablist-minor-mode-map}

(fn &optional ARG)" t nil)(autoload 'tablist-mode "tablist" "

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tablist" '("tablist-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tablist-filter" '("tablist-filter-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "saveplace-pdf-view" '("saveplace-pdf-view-")))(defvar xclip-mode nil "Non-nil if Xclip mode is enabled.
See the `xclip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `xclip-mode'.")(autoload 'xclip-mode "xclip" "Minor mode to use the `xclip' program to copy&paste.

If called interactively, enable Xclip mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xclip" '("xclip-")))(autoload 'evil-terminal-cursor-changer-activate "evil-terminal-cursor-changer" "Enable evil terminal cursor changer." t nil)(defalias 'etcc-on 'evil-terminal-cursor-changer-activate)(autoload 'evil-terminal-cursor-changer-deactivate "evil-terminal-cursor-changer" "Disable evil terminal cursor changer." t nil)(defalias 'etcc-off 'evil-terminal-cursor-changer-deactivate)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-terminal-cursor-changer" '("etcc-")))(autoload 'cmake-mode "cmake-mode" "Major mode for editing CMake source files.

(fn)" t nil)(autoload 'cmake-command-run "cmake-mode" "Runs the command cmake with the arguments specified.  The
optional argument topic will be appended to the argument list.

(fn TYPE &optional TOPIC BUFFER)" t nil)(autoload 'cmake-command-run-help "cmake-mode" "`cmake-command-run' but rendered in `rst-mode'.

(fn TYPE &optional TOPIC BUFFER)" t nil)(autoload 'cmake-help-list-commands "cmake-mode" "Prints out a list of the cmake commands." t nil)(autoload 'cmake-help-command "cmake-mode" "Prints out the help message for the command the cursor is on." t nil)(autoload 'cmake-help-module "cmake-mode" "Prints out the help message for the module the cursor is on." t nil)(autoload 'cmake-help-variable "cmake-mode" "Prints out the help message for the variable the cursor is on." t nil)(autoload 'cmake-help-property "cmake-mode" "Prints out the help message for the property the cursor is on." t nil)(autoload 'cmake-help "cmake-mode" "Queries for any of the four available help topics and prints out the appropriate page." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cmake-mode" '("cmake-")))(autoload 'cuda-mode "cuda-mode" "Major mode for editing CUDA.
Cuda is a C like language extension for mixed native/GPU coding
created by NVIDIA

The hook `c-mode-common-hook' is run with no args at mode
initialization, then `cuda-mode-hook'.

Key bindings:
\\{cuda-mode-map}" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cuda-mode" '("cuda-")))(autoload 'demangle-mode "demangle-mode" "Toggle demangle mode.

If called interactively, enable Demangle mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Interactively with no argument, this command toggles the mode.  A
positive prefix argument enables the mode; any other prefix
argument disables it.  From Lisp, argument omitted or nil enables
the mode, while `toggle' toggles the state.

When Demangle mode is enabled, mangled C++, D, and Rust symbols
appearing within the buffer are demangled, making their decoded
forms visible.

Visit `https://github.com/liblit/demangle-mode/issues' or use
\\[demangle-mode-submit-bug-report] to report bugs in
`demangle-mode'.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "demangle-mode" '("demangle-")))(defvar disaster-find-build-root-functions nil "Functions to call to get the build root directory from the project directory.
If nil is returned, the next function will be tried.  If all
functions return nil, the project root directory will be used as
the build directory.")(autoload 'disaster "disaster" "Shows assembly code for current line of C/C++ file.

Here's the logic path it follows:

- Is there a Makefile in this directory? Run `make bufname.o`.
- Or is there a Makefile in a parent directory? Run `make -C .. bufname.o`.
- Or is this a C file? Run `cc -g -O3 -c -o bufname.o bufname.c`
- Or is this a C++ file? Run `c++ -g -O3 -c -o bufname.o bufname.c`
- If build failed, display errors in compile-mode.
- Run objdump inside a new window while maintaining focus.
- Jump to line matching current line.

If FILE and LINE are not specified, the current editing location
is used.

(fn &optional FILE LINE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "disaster" '("disaster-")))(autoload 'modern-c++-font-lock-mode "modern-cpp-font-lock" "Provides font-locking as a Minor Mode for Modern C++

If called interactively, enable Modern-C++-Font-Lock mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'modern-c++-font-lock-global-mode 'globalized-minor-mode t)(defvar modern-c++-font-lock-global-mode nil "Non-nil if Modern-C++-Font-Lock-Global mode is enabled.
See the `modern-c++-font-lock-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `modern-c++-font-lock-global-mode'.")(autoload 'modern-c++-font-lock-global-mode "modern-cpp-font-lock" "Toggle Modern-C++-Font-Lock mode in all buffers.
With prefix ARG, enable Modern-C++-Font-Lock-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Modern-C++-Font-Lock mode is enabled in all buffers where
`(lambda nil (when (apply 'derived-mode-p '(c++-mode)) (modern-c++-font-lock-mode 1)))' would do it.
See `modern-c++-font-lock-mode' for more information on Modern-C++-Font-Lock mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "modern-cpp-font-lock" '("modern-c++-")))(autoload 'opencl-mode "opencl-mode" "Major mode for opencl kernel editing

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "opencl-mode" '("opencl-")))(autoload 'glsl-mode "glsl-mode" "Major mode for editing GLSL shader files.

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "glsl-mode" '("gl-version" "glsl-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-glsl" '("company-glsl")))(defvar irony-additional-clang-options nil "Additional command line options to pass down to libclang.

Please, do NOT use this variable to add header search paths, only
additional warnings or compiler options.

These compiler options will be prepended to the command line, in
order to not override the value coming from a compilation
database.")(autoload 'irony-mode "irony" "Minor mode for C, C++ and Objective-C, powered by libclang.

If called interactively, enable Irony mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'irony-version "irony" "Return the version number of the file irony.el.

If called interactively display the version in the echo area.

(fn &optional SHOW-VERSION)" t nil)(autoload 'irony-server-kill "irony" "Kill the running irony-server process, if any." t nil)(autoload 'irony-get-type "irony" "Get the type of symbol under cursor." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony" '("irony-")))(autoload 'irony-cdb-autosetup-compile-options "irony-cdb" nil t nil)(autoload 'irony-cdb-menu "irony-cdb" nil t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony-cdb" '("irony-cdb-")))(autoload 'irony-cdb-clang-complete "irony-cdb-clang-complete" "

(fn COMMAND &rest ARGS)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony-cdb-clang-complete" '("irony-cdb-clang-complete--")))(autoload 'irony-cdb-json "irony-cdb-json" "

(fn COMMAND &rest ARGS)" nil nil)(autoload 'irony-cdb-json-add-compile-commands-path "irony-cdb-json" "Add an out-of-source compilation database.

Files below the PROJECT-ROOT directory will use the JSON
Compilation Database as specified by COMPILE-COMMANDS-PATH.

The JSON Compilation Database are often generated in the build
directory. This functions helps mapping out-of-source build
directories to project directory.

(fn PROJECT-ROOT COMPILE-COMMANDS-PATH)" t nil)(autoload 'irony-cdb-json-select "irony-cdb-json" "Select CDB to use with a prompt.

It is useful when you have several CDBs with the same project
root.

The completion function used internally is `completing-read' so
it could easily be used with other completion functions by
temporarily using a let-bind on `completing-read-function'. Or
even helm by enabling `helm-mode' before calling the function." t nil)(autoload 'irony-cdb-json-select-most-recent "irony-cdb-json" "Select CDB that is most recently modified." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony-cdb-json" '("irony-cdb-json--")))(autoload 'irony-cdb-libclang "irony-cdb-libclang" "

(fn COMMAND &rest ARGS)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony-cdb-libclang" '("irony-cdb-libclang--")))(autoload 'irony-completion-at-point "irony-completion" nil nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony-completion" '("irony-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony-diagnostics" '("irony-diagnostics-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony-iotask" '("irony-iotask-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony-snippet" '("irony-snippet-")))(autoload 'irony-eldoc "irony-eldoc" "Eldoc support in irony-mode.

If called interactively, enable Irony-Eldoc mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

eldoc is a built-in Emacs mode for displaying documentation about
a symbol or function call at point in the message buffer (see
`eldoc-mode').

To use:

- Enable the minor mode `irony-eldoc', as well as
  `eldoc-mode'. For an example, place point on top of a symbol,
  or inside a function call.

- It is easiest to add `irony-eldoc' to `irony-mode-hook', if you
  already have `irony-mode' set up.

Notes:

- Sometimes the information `irony-eldoc' uses can go out of
  date. In that case, try calling `irony-eldoc-reset'.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "irony-eldoc" '("irony-eldoc-")))(autoload 'flycheck-irony-setup "flycheck-irony" "Setup Flycheck Irony.

Add `irony' to `flycheck-checkers'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck-irony" '("flycheck-irony-")))(autoload 'company-irony "company-irony" "

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-irony-setup-begin-commands "company-irony" "Include irony trigger commands to `company-begin-commands'.

This allow completion to be automatically triggered after member
accesses (obj.|, obj->|, ...).

This may be useful to company < `0.8.4', newer version of company
include these commands by default." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-irony" '("company-irony-")))(autoload 'company-irony-c-headers "company-irony-c-headers" "Company backend for C/C++ header files.  Taking COMMAND ARG IGNORED.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-irony-c-headers" '("company-irony-c-headers-")))(autoload 'rtags-set-periodic-reparse-timeout "rtags" "Set `rtags-periodic-reparse-timeout' to TIME.

(fn TIME)" t nil)(autoload 'rtags-call-bury-or-delete "rtags" "Call `rtags-bury-buffer-function' function." t nil)(autoload 'rtags-next-match "rtags" nil t nil)(autoload 'rtags-previous-match "rtags" nil t nil)(autoload 'rtags-next-diag "rtags" nil t nil)(autoload 'rtags-previous-diag "rtags" nil t nil)(autoload 'rtags-preprocess-file "rtags" "Preprocess selected region or buffer.
If optional BUFFER is given, use BUFFER instead of `current-buffer'.
It uses the stored compile command from the RTags database for preprocessing.

(fn &optional BUFFER)" t nil)(autoload 'rtags-asm-file "rtags" "Assemble buffer.
If optional BUFFER is given, use BUFFER instead of `current-buffer'.
It uses the stored compile command from the RTags database for assembling.

(fn &optional BUFFER)" t nil)(autoload 'rtags-set-current-project "rtags" "Set active project.
Uses `completing-read' to ask for the project." t nil)(autoload 'rtags-print-symbol-info "rtags" "Print information about the symbol under cursor.

(fn &optional VERBOSE)" t nil)(autoload 'rtags-symbol-type "rtags" "Print symbol type under cursor." t nil)(autoload 'rtags-print-dependencies "rtags" "Print dependency information of the file in buffer.

If optional PREFIX is given, a selection of what type of dependency
information should be shown will be offered. Currently only one can
be chosen.
\"includes\"        - Print includes the file in buffer includes.
\"included-by\"     - Print files which include the file in buffer.
\"depends-on\"      - Print files the file in buffer depends on.
\"depended-on\"     - ...
\"tree-depends-on\" - ...

If optional BUFFER is given print dependencies for file in BUFFER
instead of file from `current-buffer'.

(fn &optional PREFIX BUFFER)" t nil)(defvar rtags-dependency-tree-data nil)(autoload 'rtags-references-tree "rtags" nil t nil)(autoload 'rtags-find-functions-called-by-this-function "rtags" nil t nil)(autoload 'rtags-find-all-functions-called-this-function "rtags" nil nil nil)(autoload 'rtags-list-results "rtags" "Show the RTags results buffer." t nil)(autoload 'rtags-print-source-arguments "rtags" "

(fn &optional BUFFER)" t nil)(autoload 'rtags-print-class-hierarchy "rtags" nil t nil)(autoload 'rtags-print-enum-value-at-point "rtags" "

(fn &optional LOCATION)" t nil)(autoload 'rtags-goto-offset "rtags" "

(fn POS)" t nil)(autoload 'rtags-location-stack-filter "rtags" "

(fn PATH/LAMBDA/RX)" t nil)(autoload 'rtags-location-stack-jump "rtags" "

(fn BY)" t nil)(autoload 'rtags-location-stack-visualize-update "rtags" nil nil nil)(autoload 'rtags-enable-standard-keybindings "rtags" "Setup standard keybindings for the RTags commands.

If optional MAP is non-nil, add the keys to MAP instead of `c-mode-base-map'.
If optional PREFIX is non-nil, use PREFIX as prefix key for the commands,
default is \"C-c r \". It doesn't matter whether you add a space at the end
of PREFIX or not, if doesn't contain one, one will be added.

(fn &optional MAP PREFIX)" t nil)(autoload 'rtags-print-current-location "rtags" nil t nil)(autoload 'rtags-location-stack-forward "rtags" nil t nil)(autoload 'rtags-location-stack-back "rtags" nil t nil)(autoload 'rtags-location-stack-reset "rtags" nil t nil)(autoload 'rtags-find-symbol-at-point "rtags" "Find the natural target for the symbol under the cursor and moves to that location.
For references this means to jump to the definition/declaration of the referenced symbol (it jumps to the definition if it is indexed).
For definitions it jumps to the declaration (if there is only one) For declarations it jumps to the definition.
If called with prefix, open first match in other window

(fn &optional PREFIX)" t nil)(autoload 'rtags-find-references-at-point "rtags" "Find all references to the symbol under the cursor.

If there's exactly one result jump directly to it, and if optional
PREFIX is given jump to it in other window. If there's more show a
buffer with the different alternatives and jump to the first one, if
`rtags-jump-to-first-match' is true. References to references will be
treated as references to the referenced symbol.

(fn &optional PREFIX)" t nil)(autoload 'rtags-find-virtuals-at-point "rtags" "List all reimplementations of function under cursor.
This includes both declarations and definitions.

(fn &optional PREFIX)" t nil)(autoload 'rtags-find-all-references-at-point "rtags" "

(fn &optional PREFIX)" t nil)(autoload 'rtags-guess-function-at-point "rtags" nil t nil)(autoload 'rtags-rename-symbol "rtags" "Rename symbol (identifier) at point.

Normally this function will ask the user (via minibuffer) for the
replacement and then ask for confirmation.  However, when the scope
of the symbol at point is just one file (the file that's being
visited by current buffer), the variable `rtags-use-multiple-cursors'
is non-nil and the `multiple-cursors' package is available, then this
function will create fake cursors at all occurrences of the symbol.

The optional argument NO-CONFIRM means agree to all replacements and
can be specified with a prefix argument.

(fn &optional NO-CONFIRM)" t nil)(autoload 'rtags-find-symbol "rtags" "

(fn &optional PREFIX)" t nil)(autoload 'rtags-find-references "rtags" "

(fn &optional PREFIX)" t nil)(autoload 'rtags-find-symbol-current-file "rtags" nil t nil)(autoload 'rtags-find-references-current-file "rtags" nil t nil)(autoload 'rtags-find-symbol-current-dir "rtags" nil t nil)(autoload 'rtags-find-references-current-dir "rtags" nil t nil)(autoload 'rtags-clear-diagnostics-overlays "rtags" "

(fn &optional BUF)" t nil)(autoload 'rtags-is-running "rtags" nil t nil)(autoload 'rtags-cycle-through-diagnostics "rtags" nil t nil)(autoload 'rtags-fix-fixit-at-point "rtags" "Apply compiler fix-it at point." t nil)(autoload 'rtags-restart-tracking-timer "rtags" nil t nil)(autoload 'rtags-post-command-hook "rtags" nil t nil)(autoload 'rtags-toggle-diagnostics-suspended "rtags" "

(fn &optional QUIET)" t nil)(autoload 'rtags-set-diagnostics-suspended "rtags" "

(fn &optional QUIET)" t nil)(autoload 'rtags-stop-diagnostics "rtags" nil t nil)(autoload 'rtags-clear-diagnostics "rtags" nil t nil)(autoload 'rtags-diagnostics "rtags" "

(fn &optional RESTART)" t nil)(autoload 'rtags-compilation-flags "rtags" nil t nil)(autoload 'rtags-close-taglist "rtags" nil t nil)(autoload 'rtags-taglist "rtags" "

(fn &optional DEST-WINDOW)" t nil)(autoload 'rtags-select "rtags" "

(fn &optional OTHER-WINDOW REMOVE SHOW)" t nil)(autoload 'rtags-select-other-window "rtags" "

(fn &optional NOT-OTHER-WINDOW)" t nil)(autoload 'rtags-select-caller "rtags" "

(fn &optional NOT-OTHER-WINDOW)" t nil)(autoload 'rtags-select-caller-other-window "rtags" nil t nil)(autoload 'rtags-show-in-other-window "rtags" nil t nil)(autoload 'rtags-select-and-remove-rtags-buffer "rtags" nil t nil)(autoload 'rtags-imenu "rtags" nil t nil)(autoload 'rtags-flatten-max-depth-one "rtags" "

(fn UNFLATTENED)" nil nil)(autoload 'rtags-create-index-function "rtags" nil t nil)(autoload 'rtags-activate-imenu "rtags" "Overrides imenu index generation function for the current function." t nil)(autoload 'rtags-copy-and-print-current-location "rtags" nil t nil)(autoload 'rtags-find-file "rtags" "Find files matching a file pattern in the RTags database.

With PREFIX and when `rtags-use-filename-completion' is nil,
negate `rtags-find-file-prefer-exact-match' when matching files.

Initial file pattern to match is obtained from `rtags-current-symbol'
which can be overridden by specifying DEFAULT-FILE

(fn &optional PREFIX DEFAULT-FILE)" t nil)(autoload 'rtags-show-rtags-buffer "rtags" nil t nil)(autoload 'rtags-fixit "rtags" "

(fn &optional EDIFF BUFFER)" t nil)(autoload 'rtags-remove-other-window "rtags" nil t nil)(autoload 'rtags-update-current-project "rtags" nil t nil)(autoload 'rtags-show-target-in-other-window "rtags" "DEST-WINDOW : destination window. Can be nil; in this case the current window is split
according to `rtags-other-window-window-size-percentage'.
CENTER-WINDOW : if true the target window is centered.
TRY-DECLARATION-FIRST : first try to find the declaration of the item, then the
definition.

(fn &optional DEST-WINDOW CENTER-WINDOW TRY-DECLARATION-FIRST)" t nil)(autoload 'rtags-suspend-file "rtags" "

(fn &optional ARG)" t nil)(autoload 'rtags-unsuspend-file "rtags" nil t nil)(autoload 'rtags-toggle-file-suspended "rtags" nil t nil)(autoload 'rtags-clear-suspended-files "rtags" "

(fn &optional A B)" t nil)(autoload 'rtags-suspend-all-files "rtags" "

(fn &optional A)" t nil)(autoload 'rtags-list-suspended-files "rtags" nil t nil)(autoload 'rtags-compile-file "rtags" "

(fn &optional BUFFER)" t nil)(autoload 'rtags-recompile-file "rtags" nil t nil)(autoload 'rtags-quit-rdm "rtags" "Quit the RTags process (rdm)." t nil)(autoload 'rtags-restart-process "rtags" "Restart the RTags process (rdm)." t nil)(autoload 'rtags-start-process-unless-running "rtags" "Launch the RTags process (rdm) if it's not already started." t nil)(autoload 'rtags-reparse-file "rtags" "WAIT-REPARSING : t to wait for reparsing to finish, nil for async (no waiting).

(fn &optional BUFFER PERIODIC)" t nil)(autoload 'rtags-maybe-reparse-file "rtags" "

(fn &optional BUFFER)" t nil)(autoload 'rtags-display-summary "rtags" "Display a short text describing the item at point.
See `rtags-get-summary-text' for details.
If `rtags-display-summary-as-tooltip' is t, a tooltip is displayed.

(fn &optional HIDE-EMPTY POS)" t nil)(autoload 'rtags-display-summary-as-message "rtags" "Display a short text in message area describing the item at point.
See `rtags-get-summary-text' for details." t nil)(autoload 'rtags-get-include-file-for-symbol "rtags" "Insert #include declaration to buffer corresponding to the input symbol.
With optional PREFIX insert include at point.

(fn &optional PREFIX)" t nil)(autoload 'rtags-make-member "rtags" "Create a stub member functions. Type a declaration and then
`rtags-make-member' can be used to create the stub definition in
the class.
" t nil)(autoload 'rtags-check-includes "rtags" nil t nil)(autoload 'rtags-tokens "rtags" "

(fn &optional FROM TO CALLBACK)" t nil)(autoload 'rtags-create-doxygen-comment "rtags" "Creates doxygen comment for function at point.

Comment will be inserted before current line. It uses yasnippet to let
the user enter missing field manually." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rtags" '("rtags-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ivy-rtags" '("ivy-rtags-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helm-rtags" '("create-helm-rtags-source" "helm-rtags-")))(autoload 'highlight-quoted-mode "highlight-quoted" "Highlight Lisp quotes and quoted symbols.

Toggle Highlight-Quoted mode on or off.
With a prefix argument ARG, enable Highlight-Quoted mode if ARG is positive, and
disable it otherwise.  If called from Lisp, enable the mode if ARG is omitted or
nil, and toggle it if ARG is `toggle'.
\\{highlight-quoted-mode-map}

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "highlight-quoted" '("highlight-quoted-")))(autoload 'macrostep-mode "macrostep" "Minor mode for inline expansion of macros in Emacs Lisp source buffers.

If called interactively, enable Macrostep mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\<macrostep-keymap>Progressively expand macro forms with \\[macrostep-expand], collapse them with \\[macrostep-collapse],
and move back and forth with \\[macrostep-next-macro] and \\[macrostep-prev-macro].
Use \\[macrostep-collapse-all] or collapse all visible expansions to
quit and return to normal editing.

\\{macrostep-keymap}

(fn &optional ARG)" t nil)(autoload 'macrostep-expand "macrostep" "Expand the macro form following point by one step.

Enters `macrostep-mode' if it is not already active, making the
buffer temporarily read-only. If macrostep-mode is active and the
form following point is not a macro form, search forward in the
buffer and expand the next macro form found, if any.

With a prefix argument, the expansion is displayed in a separate
buffer instead of inline in the current buffer.  Setting
`macrostep-expand-in-separate-buffer' to non-nil swaps these two
behaviors.

(fn &optional TOGGLE-SEPARATE-BUFFER)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "macrostep" '("macrostep-")))(autoload 'macrostep-c-mode-hook "macrostep-c" nil nil nil)(add-hook 'c-mode-hook #'macrostep-c-mode-hook)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "macrostep-c" '("macrostep-c-")))(autoload 'overseer-version "overseer" "Get the Overseer version as string.

If called interactively or if SHOW-VERSION is non-nil, show the
version in the echo area and the messages buffer.

The returned string includes both, the version from package.el
and the library version, if both a present and different.

If the version number could not be determined, signal an error,
if called interactively, or if SHOW-VERSION is non-nil, otherwise
just return nil.

(fn &optional SHOW-VERSION)" t nil)(autoload 'overseer-mode "overseer" "Minor mode for emacs lisp files to test through ert-runner.

If called interactively, enable overseer mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Key bindings:
\\{overseer-mode-map}

(fn &optional ARG)" t nil)(autoload 'overseer-enable-mode "overseer" nil nil nil)(dolist (hook '(emacs-lisp-mode-hook)) (add-hook hook 'overseer-enable-mode))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "overseer" '("overseer-")))(autoload 'elisp-def "elisp-def" "Go to the definition of the symbol at point." t nil)(autoload 'elisp-def-mode "elisp-def" "Minor mode for finding definitions with `elisp-def'.

If called interactively, enable Elisp-Def mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{elisp-def-mode-map}

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-def" '("elisp-def-")))(autoload 'elisp-demos-advice-describe-function-1 "elisp-demos" "

(fn FUNCTION)" nil nil)(autoload 'elisp-demos-advice-helpful-update "elisp-demos" nil nil nil)(autoload 'elisp-demos-for-helpful "elisp-demos" "Find a demo for the current `helpful' buffer." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-demos" '("elisp-demos-")))(autoload 'flycheck-package-setup "flycheck-package" "Setup flycheck-package.
Add `flycheck-emacs-lisp-package' to `flycheck-checkers'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck-package" '("flycheck-package--start")))(autoload 'package-lint-describe-symbol-history "package-lint" "Show the version history of SYM, if any.

(fn SYM)" t nil)(autoload 'package-lint-buffer "package-lint" "Get linter errors and warnings for BUFFER.

Returns a list, each element of which is list of

   (LINE COL TYPE MESSAGE)

where TYPE is either 'warning or 'error.

Current buffer is used if none is specified.

(fn &optional BUFFER)" nil nil)(autoload 'package-lint-current-buffer "package-lint" "Display lint errors and warnings for the current buffer." t nil)(autoload 'package-lint-batch-and-exit "package-lint" "Run `package-lint-buffer' on the files remaining on the command line.
Use this only with -batch, it won't work interactively.

When done, exit Emacs with status 1 in case of any errors, otherwise exit
with status 0.  The variable `package-lint-batch-fail-on-warnings' controls
whether or not warnings alone produce a non-zero exit code." nil nil)(autoload 'package-lint-looks-like-a-package-p "package-lint" "Return non-nil if the current buffer appears to be intended as a package." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "package-lint" '("package-lint-")))(autoload 'flycheck-cask-setup "flycheck-cask" "Setup Cask integration for Flycheck.

If the current file is part of a Cask project, as denoted by the
existence of a Cask file in the file's directory or any ancestor
thereof, configure Flycheck to initialze Cask packages while
syntax checking.

Set `flycheck-emacs-lisp-initialize-packages' and
`flycheck-emacs-lisp-package-user-dir' accordingly." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck-cask" '("flycheck-cask-")))(autoload 'buttercup-run-at-point "buttercup" "Run the buttercup suite at point." t nil)(autoload 'buttercup-run-discover "buttercup" "Discover and load test files, then run all defined suites.

Takes directories as command line arguments, defaulting to the
current directory." nil nil)(autoload 'buttercup-run-markdown-buffer "buttercup" "Run all test suites defined in MARKDOWN-BUFFERS.
A suite must be defined within a Markdown \"lisp\" code block.
If MARKDOWN-BUFFERS is empty (nil), use the current buffer.

(fn &rest MARKDOWN-BUFFERS)" t nil)(autoload 'buttercup-run-markdown "buttercup" "Run all test suites defined in Markdown files passed as arguments.
A suite must be defined within a Markdown \"lisp\" code block." nil nil)(autoload 'buttercup-run-markdown-file "buttercup" "Run all test suites defined in Markdown FILE.
A suite must be defined within a Markdown \"lisp\" code block.

(fn FILE)" t nil)(autoload 'buttercup-minor-mode "buttercup" "Activate buttercup minor mode.

If called interactively, enable Buttercup minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

With buttercup minor mode active the following is activated:

- `describe' and `it' forms are fontified with
  `font-lock-keyword-face'.
- `describe' and `it' forms are available from `imenu' for
  quicker access.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "buttercup" '("after-" "assume" "before-" "buttercup-" "describe" "expect" "spy-" "xdescribe" "xit")))(autoload 'android-mode "android-mode" "Android application development minor mode.

If called interactively, enable Android mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "android-mode" '("android-")))(autoload 'groovy-electric-mode "groovy-electric" "Toggle Groovy Electric minor mode.
With no argument, this command toggles the mode.  Non-null prefix
argument turns on the mode.  Null prefix argument turns off the
mode.

If called interactively, enable Groovy-Electric mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When Groovy Electric mode is enabled, simple, double and back
quotes as well as braces are paired auto-magically. Expansion
does not occur inside comments and strings. Note that you must
have Font Lock enabled. ${ } is expanded when in a GString

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "groovy-electric" '("groovy-electric-")))(autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code.

The hook `groovy-mode-hook' is run with no args at mode
initialization.

Key bindings:
\\{groovy-mode-map}

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "groovy-mode" '("groovy-")))(autoload 'inf-groovy-keys "inf-groovy" "Set local key defs for inf-groovy in groovy-mode" nil nil)(autoload 'inferior-groovy-mode "inf-groovy" "Major mode for interacting with an inferior groovy (groovysh) process.

The following commands are available:
\\{inferior-groovy-mode-map}

A groovy process can be fired up with M-x run-groovy.

Customisation: Entry to this mode runs the hooks on comint-mode-hook and
inferior-groovy-mode-hook (in that order).

You can send text to the inferior groovy process from other buffers containing
Groovy source.
    switch-to-groovy switches the current buffer to the groovy process buffer.
    groovy-send-definition sends the current definition to the groovy process.
    groovy-send-region sends the current region to the groovy process.

    groovy-send-definition-and-go, groovy-send-region-and-go,
        switch to the groovy process buffer after sending their text.
For information on running multiple processes in multiple buffers, see
documentation for variable groovy-buffer.

Commands:
Return after the end of the process' output sends the text from the
    end of process to point.
Return before the end of the process' output copies the sexp ending at point
    to the end of the process' output, and sends it.
Delete converts tabs to spaces as it moves back.
Tab indents for groovy; with argument, shifts rest
    of expression rigidly with the current line.
C-M-q does Tab on each line starting within following expression.
Paragraphs are separated only by blank lines.  # start comments.
If you accidentally suspend your process, use \\[comint-continue-subjob]
to continue it." t nil)(autoload 'run-groovy "inf-groovy" "Run an inferior Groovy process, input and output via buffer *groovy*.
If there is a process already running in *groovy*, switch to that buffer.
With a prefix argument, prompt for the groovysh path and arguments
(see variables `groovysh' and `groovysh-args' for the defaults).

Runs the hook `inferior-groovy-mode-hook' (after the
`comint-mode-hook' is run).  Type \\[describe-mode] in the
process buffer for a list of commands.

(fn CMD)" t nil)(eval-after-load 'groovy-mode (lambda nil (add-hook 'groovy-mode-hook 'inf-groovy-keys)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "inf-groovy" '("groovy" "inf" "remove-in-string" "switch-to-groovy")))(with-eval-after-load 'lsp-java (require 'dap-java))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-java" '("dap-java-")))(autoload 'lsp-java-lens-mode "lsp-java" "Toggle run/debug overlays.

If called interactively, enable Lsp-Java-Lens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-java" '("lsp-java-")))(autoload 'lsp-java-boot-lens-mode "lsp-java-boot" "Toggle code-lens overlays.

If called interactively, enable Lsp-Java-Boot-Lens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-java-boot" '("lsp-java-boot-")))(autoload 'lsp-jt-lens-mode "lsp-jt" "Toggle code-lens overlays.

If called interactively, enable Lsp-Jt-Lens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'lsp-jt-browser "lsp-jt" nil t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-jt" '("lsp-jt-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-chrome" '("dap-chrome-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-codelldb" '("dap-codelldb-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-cpptools" '("dap-cpptools-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-edge" '("dap-edge-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-elixir" '("dap-elixir--populate-start-file-args")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-erlang" '("dap-erlang--populate-start-file-args")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-firefox" '("dap-firefox-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-gdb-lldb" '("dap-gdb-lldb-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-go" '("dap-go-")))(autoload 'dap-hydra "dap-hydra" "Run `dap-hydra/body'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-hydra" '("dap-hydra")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-launch" '("dap-launch-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-lldb" '("dap-lldb-")))(autoload 'dap-debug "dap-mode" "Run debug configuration DEBUG-ARGS.

If DEBUG-ARGS is not specified the configuration is generated
after selecting configuration template.

:dap-compilation specifies a shell command to be run using
`compilation-start' before starting the debug session. It could
be used to compile the project, spin up docker, ....

(fn DEBUG-ARGS)" t nil)(defvar dap-mode nil "Non-nil if Dap mode is enabled.
See the `dap-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-mode'.")(autoload 'dap-mode "dap-mode" "Global minor mode for DAP mode.

If called interactively, enable Dap mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(defvar dap-auto-configure-mode nil "Non-nil if Dap-Auto-Configure mode is enabled.
See the `dap-auto-configure-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-auto-configure-mode'.")(autoload 'dap-auto-configure-mode "dap-mode" "Auto configure dap minor mode.

If called interactively, enable Dap-Auto-Configure mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-mode" '("dap-")))(defvar dap-tooltip-mode nil "Non-nil if Dap-Tooltip mode is enabled.
See the `dap-tooltip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-tooltip-mode'.")(autoload 'dap-tooltip-mode "dap-mouse" "Toggle the display of GUD tooltips.

If called interactively, enable Dap-Tooltip mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-mouse" '("dap-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-netcore" '("dap-netcore-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-node" '("dap-node-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-overlays" '("dap-overlays-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-php" '("dap-php-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-pwsh" '("dap-pwsh-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-python" '("dap-python-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-ruby" '("dap-ruby-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-swi-prolog" '("dap-swi-prolog-")))(defvar dap-ui-mode nil "Non-nil if Dap-Ui mode is enabled.
See the `dap-ui-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-ui-mode'.")(autoload 'dap-ui-mode "dap-ui" "Displaying DAP visuals.

If called interactively, enable Dap-Ui mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'dap-ui-breakpoints-list "dap-ui" "List breakpoints." t nil)(defvar dap-ui-controls-mode nil "Non-nil if Dap-Ui-Controls mode is enabled.
See the `dap-ui-controls-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-ui-controls-mode'.")(autoload 'dap-ui-controls-mode "dap-ui" "Displaying DAP visuals.

If called interactively, enable Dap-Ui-Controls mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'dap-ui-sessions "dap-ui" "Show currently active sessions." t nil)(autoload 'dap-ui-locals "dap-ui" nil t nil)(autoload 'dap-ui-show-many-windows "dap-ui" "Show auto configured feature windows." t nil)(autoload 'dap-ui-hide-many-windows "dap-ui" "Hide all debug windows when sessions are dead." t nil)(autoload 'dap-ui-repl "dap-ui" "Start an adapter-specific REPL.
This could be used to evaluate JavaScript in a browser, to
evaluate python in the context of the debugee, ...." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-ui" '("dap-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-utils" '("dap-utils-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-variables" '("dap-variables-")))(autoload 'dapui-loaded-sources "dapui" nil t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dapui" '("dapui-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui" '("bui-define-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-button" '("bui")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-core" '("bui-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-entry" '("bui-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-history" '("bui-history")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-info" '("bui-info-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-list" '("bui-list-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-utils" '("bui-")))(autoload 'lsp-treemacs-symbols "lsp-treemacs" "Show symbols view." t nil)(autoload 'lsp-treemacs-java-deps-list "lsp-treemacs" "Display java dependencies." t nil)(autoload 'lsp-treemacs-java-deps-follow "lsp-treemacs" nil t nil)(defvar lsp-treemacs-sync-mode nil "Non-nil if Lsp-Treemacs-Sync mode is enabled.
See the `lsp-treemacs-sync-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-treemacs-sync-mode'.")(autoload 'lsp-treemacs-sync-mode "lsp-treemacs" "Global minor mode for synchronizing lsp-mode workspace folders and treemacs projects.

If called interactively, enable Lsp-Treemacs-Sync mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'lsp-treemacs-references "lsp-treemacs" "Show the references for the symbol at point.
With a prefix argument, select the new window and expand the tree of references automatically.

(fn ARG)" t nil)(autoload 'lsp-treemacs-implementations "lsp-treemacs" "Show the implementations for the symbol at point.
With a prefix argument, select the new window expand the tree of implementations automatically.

(fn ARG)" t nil)(autoload 'lsp-treemacs-call-hierarchy "lsp-treemacs" "Show the incoming call hierarchy for the symbol at point.
With a prefix argument, show the outgoing call hierarchy.

(fn OUTGOING)" t nil)(autoload 'lsp-treemacs-type-hierarchy "lsp-treemacs" "Show the type hierarchy for the symbol at point.
With prefix 0 show sub-types.
With prefix 1 show super-types.
With prefix 2 show both.

(fn DIRECTION)" t nil)(autoload 'lsp-treemacs-errors-list "lsp-treemacs" nil t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-treemacs" '("lsp-treemacs-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-treemacs-themes" '("lsp-treemacs-theme")))(autoload 'rjsx-mode "rjsx-mode" "Major mode for editing JSX files.

(fn)" t nil)(autoload 'rjsx-minor-mode "rjsx-mode" "Minor mode for parsing JSX syntax into an AST.

If called interactively, enable Rjsx minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'rjsx-comment-dwim "rjsx-mode" "RJSX implementation of `comment-dwim'. If called on a region,
this function delegates to `comment-or-uncomment-region'. If the
point is not in a JSX context, it delegates to the
`comment-dwim', otherwise it will comment the JSX AST node at
point using the apppriate comment delimiters.

For example: If point is on a JSX attribute or JSX expression, it
will comment the entire attribute using \"/* */\". , otherwise if
it's on a descendent JSX Element, it will use \"{/* */}\"
instead.

(fn ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rjsx-mode" '("rjsx-")))(autoload 'js2-imenu-extras-setup "js2-imenu-extras" nil nil nil)(autoload 'js2-imenu-extras-mode "js2-imenu-extras" "Toggle Imenu support for frameworks and structural patterns.

If called interactively, enable Js2-Imenu-Extras mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2-imenu-extras" '("js2-imenu-")))(autoload 'js2-highlight-unused-variables-mode "js2-mode" "Toggle highlight of unused variables.

If called interactively, enable Js2-Highlight-Unused-Variables
mode if ARG is positive, and disable it if ARG is zero or
negative.  If called from Lisp, also enable the mode if ARG is
omitted or nil, and toggle it if ARG is `toggle'; disable the
mode otherwise.

(fn &optional ARG)" t nil)(autoload 'js2-minor-mode "js2-mode" "Minor mode for running js2 as a background linter.
This allows you to use a different major mode for JavaScript editing,
such as `js-mode', while retaining the asynchronous error/warning
highlighting features of `js2-mode'.

If called interactively, enable Js2 minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'js2-mode "js2-mode" "Major mode for editing JavaScript code.

(fn)" t nil)(autoload 'js2-jsx-mode "js2-mode" "Major mode for editing JSX code in Emacs 26 and earlier.

To edit JSX code in Emacs 27, use `js-mode' as your major mode
with `js2-minor-mode' enabled.

To customize the indentation for this mode, set the SGML offset
variables (`sgml-basic-offset' et al) locally, like so:

  (defun set-jsx-indentation ()
    (setq-local sgml-basic-offset js2-basic-offset))
  (add-hook \\='js2-jsx-mode-hook #\\='set-jsx-indentation)

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2-mode" '("js2-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2-old-indent" '("js2-")))(put 'typescript-indent-level 'safe-local-variable #'integerp)(autoload 'typescript-mode "typescript-mode" "Major mode for editing typescript.

Key bindings:

\\{typescript-mode-map}

(fn)" t nil)(eval-after-load 'folding '(when (fboundp 'folding-add-to-marks-list) (folding-add-to-marks-list 'typescript-mode "// {{{" "// }}}")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "typescript-mode" '("typescript-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "typescript-mode-test-utilities" '("font-lock-test" "get-face-at" "test-with-")))(autoload 'js2-refactor-mode "js2-refactor" "Minor mode providing JavaScript refactorings.

If called interactively, enable Js2-Refactor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'js2r-add-keybindings-with-prefix "js2-refactor" "Add js2r keybindings using the prefix PREFIX.

(fn PREFIX)" nil nil)(autoload 'js2r-add-keybindings-with-modifier "js2-refactor" "Add js2r keybindings using the modifier MODIFIER.

(fn MODIFIER)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2-refactor" '("js2")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-conditionals" '("js2r-ternary-to-if")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-conveniences" '("js2r-" "move-line-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-formatting" '("js2r-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-functions" '("js2r-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-helpers" '("js2r--")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-iife" '("js2r-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-paredit" '("js2r-")))(autoload 'js2r-rename-var "js2r-vars" "Renames the variable on point and all occurrences in its lexical scope." t nil)(autoload 'js2r-extract-var "js2r-vars" nil t nil)(autoload 'js2r-extract-let "js2r-vars" nil t nil)(autoload 'js2r-extract-const "js2r-vars" nil t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-vars" '("current-line-contents" "js2r-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-wrapping" '("js2r-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-cycle-cursors" '("mc/")))(autoload 'mc/edit-lines "mc-edit-lines" "Add one cursor to each line of the active region.
Starts from mark and moves in straight down or up towards the
line point is on.

What is done with lines which are not long enough is governed by
`mc/edit-lines-empty-lines'.  The prefix argument ARG can be used
to override this.  If ARG is a symbol (when called from Lisp),
that symbol is used instead of `mc/edit-lines-empty-lines'.
Otherwise, if ARG negative, short lines will be ignored.  Any
other non-nil value will cause short lines to be padded.

(fn &optional ARG)" t nil)(autoload 'mc/edit-ends-of-lines "mc-edit-lines" "Add one cursor to the end of each line in the active region." t nil)(autoload 'mc/edit-beginnings-of-lines "mc-edit-lines" "Add one cursor to the beginning of each line in the active region." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-edit-lines" '("mc/edit-lines-empty-lines")))(autoload 'mc-hide-unmatched-lines-mode "mc-hide-unmatched-lines-mode" "Minor mode when enabled hides all lines where no cursors (and
also hum/lines-to-expand below and above) To make use of this
mode press \"C-'\" while multiple-cursor-mode is active. You can
still edit lines while you are in mc-hide-unmatched-lines
mode. To leave this mode press <return> or \"C-g\"

If called interactively, enable Mc-Hide-Unmatched-Lines mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-hide-unmatched-lines-mode" '("hum/")))(autoload 'mc/mark-next-like-this "mc-mark-more" "Find and mark the next part of the buffer matching the currently active region
If no region is active add a cursor on the next line
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

(fn ARG)" t nil)(autoload 'mc/mark-next-like-this-word "mc-mark-more" "Find and mark the next part of the buffer matching the currently active region
If no region is active, mark the word at the point and find the next match
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

(fn ARG)" t nil)(autoload 'mc/mark-next-word-like-this "mc-mark-more" "Find and mark the next word of the buffer matching the currently active region
The matching region must be a whole word to be a match
If no region is active add a cursor on the next line
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

(fn ARG)" t nil)(autoload 'mc/mark-next-symbol-like-this "mc-mark-more" "Find and mark the next symbol of the buffer matching the currently active region
The matching region must be a whole symbol to be a match
If no region is active add a cursor on the next line
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

(fn ARG)" t nil)(autoload 'mc/mark-previous-like-this "mc-mark-more" "Find and mark the previous part of the buffer matching the currently active region
If no region is active add a cursor on the previous line
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

(fn ARG)" t nil)(autoload 'mc/mark-previous-like-this-word "mc-mark-more" "Find and mark the previous part of the buffer matching the currently active region
If no region is active, mark the word at the point and find the previous match
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark previous.

(fn ARG)" t nil)(autoload 'mc/mark-previous-word-like-this "mc-mark-more" "Find and mark the previous part of the buffer matching the currently active region
The matching region must be a whole word to be a match
If no region is active add a cursor on the previous line
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

(fn ARG)" t nil)(autoload 'mc/mark-previous-symbol-like-this "mc-mark-more" "Find and mark the previous part of the buffer matching the currently active region
The matching region must be a whole symbol to be a match
If no region is active add a cursor on the previous line
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

(fn ARG)" t nil)(autoload 'mc/mark-next-lines "mc-mark-more" "

(fn ARG)" t nil)(autoload 'mc/mark-previous-lines "mc-mark-more" "

(fn ARG)" t nil)(autoload 'mc/unmark-next-like-this "mc-mark-more" "Deselect next part of the buffer matching the currently active region." t nil)(autoload 'mc/unmark-previous-like-this "mc-mark-more" "Deselect prev part of the buffer matching the currently active region." t nil)(autoload 'mc/skip-to-next-like-this "mc-mark-more" "Skip the current one and select the next part of the buffer matching the currently active region." t nil)(autoload 'mc/skip-to-previous-like-this "mc-mark-more" "Skip the current one and select the prev part of the buffer matching the currently active region." t nil)(autoload 'mc/mark-all-like-this "mc-mark-more" "Find and mark all the parts of the buffer matching the currently active region" t nil)(autoload 'mc/mark-all-words-like-this "mc-mark-more" nil t nil)(autoload 'mc/mark-all-symbols-like-this "mc-mark-more" nil t nil)(autoload 'mc/mark-all-in-region "mc-mark-more" "Find and mark all the parts in the region matching the given search

(fn BEG END &optional SEARCH)" t nil)(autoload 'mc/mark-all-in-region-regexp "mc-mark-more" "Find and mark all the parts in the region matching the given regexp.

(fn BEG END)" t nil)(autoload 'mc/mark-more-like-this-extended "mc-mark-more" "Like mark-more-like-this, but then lets you adjust with arrows key.
The adjustments work like this:

   <up>    Mark previous like this and set direction to 'up
   <down>  Mark next like this and set direction to 'down

If direction is 'up:

   <left>  Skip past the cursor furthest up
   <right> Remove the cursor furthest up

If direction is 'down:

   <left>  Remove the cursor furthest down
   <right> Skip past the cursor furthest down

The bindings for these commands can be changed. See `mc/mark-more-like-this-extended-keymap'." t nil)(autoload 'mc/mark-all-like-this-dwim "mc-mark-more" "Tries to guess what you want to mark all of.
Can be pressed multiple times to increase selection.

With prefix, it behaves the same as original `mc/mark-all-like-this'

(fn ARG)" t nil)(autoload 'mc/mark-all-dwim "mc-mark-more" "Tries even harder to guess what you want to mark all of.

If the region is active and spans multiple lines, it will behave
as if `mc/mark-all-in-region'. With the prefix ARG, it will call
`mc/edit-lines' instead.

If the region is inactive or on a single line, it will behave like
`mc/mark-all-like-this-dwim'.

(fn ARG)" t nil)(autoload 'mc/mark-all-like-this-in-defun "mc-mark-more" "Mark all like this in defun." t nil)(autoload 'mc/mark-all-words-like-this-in-defun "mc-mark-more" "Mark all words like this in defun." t nil)(autoload 'mc/mark-all-symbols-like-this-in-defun "mc-mark-more" "Mark all symbols like this in defun." t nil)(autoload 'mc/toggle-cursor-on-click "mc-mark-more" "Add a cursor where you click, or remove a fake cursor that is
already there.

(fn EVENT)" t nil)(defalias 'mc/add-cursor-on-click 'mc/toggle-cursor-on-click)(autoload 'mc/mark-sgml-tag-pair "mc-mark-more" "Mark the tag we're in and its pair for renaming." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-mark-more" '("mc--" "mc/")))(autoload 'mc/mark-pop "mc-mark-pop" "Add a cursor at the current point, pop off mark ring and jump
to the popped mark." t nil)(autoload 'mc/insert-numbers "mc-separate-operations" "Insert increasing numbers for each cursor, starting at
`mc/insert-numbers-default' or ARG.

(fn ARG)" t nil)(autoload 'mc/insert-letters "mc-separate-operations" "Insert increasing letters for each cursor, starting at 0 or ARG.
     Where letter[0]=a letter[2]=c letter[26]=aa

(fn ARG)" t nil)(autoload 'mc/reverse-regions "mc-separate-operations" nil t nil)(autoload 'mc/sort-regions "mc-separate-operations" nil t nil)(autoload 'mc/vertical-align "mc-separate-operations" "Aligns all cursors vertically with a given CHARACTER to the one with the
highest column number (the rightest).
Might not behave as intended if more than one cursors are on the same line.

(fn CHARACTER)" t nil)(autoload 'mc/vertical-align-with-space "mc-separate-operations" "Aligns all cursors with whitespace like `mc/vertical-align' does" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-separate-operations" '("mc--" "mc/insert-numbers-default")))(autoload 'multiple-cursors-mode "multiple-cursors-core" "Mode while multiple cursors are active.

If called interactively, enable Multiple-Cursors mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "multiple-cursors-core" '("activate-cursor-for-undo" "deactivate-cursor-after-undo" "multiple-cursors-mode" "unsupported-cmd")))(autoload 'set-rectangular-region-anchor "rectangular-region-mode" "Anchors the rectangular region at point.

Think of this one as `set-mark' except you're marking a rectangular region. It is
an exceedingly quick way of adding multiple cursors to multiple lines." t nil)(autoload 'rectangular-region-mode "rectangular-region-mode" "A mode for creating a rectangular region to edit

If called interactively, enable Rectangular-Region mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rectangular-region-mode" '("rectangular-region-mode" "rrm/")))(autoload 'npm-mode "npm-mode" "Minor mode for working with npm projects.

If called interactively, enable Npm mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'npm-global-mode 'globalized-minor-mode t)(defvar npm-global-mode nil "Non-nil if Npm-Global mode is enabled.
See the `npm-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `npm-global-mode'.")(autoload 'npm-global-mode "npm-mode" "Toggle Npm mode in all buffers.
With prefix ARG, enable Npm-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Npm mode is enabled in all buffers where
`npm-mode' would do it.
See `npm-mode' for more information on Npm mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "npm-mode" '("npm-")))(defvar add-node-modules-path-debug nil "Enable verbose output when non nil.")(defvar add-node-modules-max-depth 20 "Max depth to look for node_modules.")(autoload 'add-node-modules-path "add-node-modules-path" "Search the current buffer's parent directories for `node_modules/.bin`.
Traverse the directory structure up, until reaching the user's home directory,
 or hitting add-node-modules-max-depth.
Any path found is added to the `exec-path'." t nil)(autoload 'nodejs-repl-send-line "nodejs-repl" "Send the current line to the `nodejs-repl-process'" t nil)(autoload 'nodejs-repl-send-region "nodejs-repl" "Send the current region to the `nodejs-repl-process'

(fn START END)" t nil)(autoload 'nodejs-repl-send-buffer "nodejs-repl" "Send the current buffer to the `nodejs-repl-process'" t nil)(autoload 'nodejs-repl-load-file "nodejs-repl" "Load the file to the `nodejs-repl-process'

(fn FILE)" t nil)(autoload 'nodejs-repl-send-last-expression "nodejs-repl" "Send the expression before point to the `nodejs-repl-process'" t nil)(autoload 'nodejs-repl-switch-to-repl "nodejs-repl" "If there is a `nodejs-repl-process' running switch to it,
otherwise spawn one." t nil)(autoload 'nodejs-repl "nodejs-repl" "Run Node.js REPL." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nodejs-repl" '("nodejs-repl-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cache-table" '("cache-table-")))(autoload 'skewer-bower-refresh "skewer-bower" "Update the package listing and packages synchronously." t nil)(autoload 'skewer-bower-load "skewer-bower" "Dynamically load a library from bower into the current page.

(fn PACKAGE &optional VERSION)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-bower" '("skewer")))(autoload 'skewer-css-mode "skewer-css" "Minor mode for interactively loading new CSS rules.

If called interactively, enable Skewer-Css mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-css" '("skewer-css")))(autoload 'skewer-html-mode "skewer-html" "Minor mode for interactively loading new HTML.

If called interactively, enable Skewer-Html mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-html" '("skewer-html-")))(autoload 'list-skewer-clients "skewer-mode" "List the attached browsers in a buffer." t nil)(autoload 'skewer-mode "skewer-mode" "Minor mode for interacting with a browser.

If called interactively, enable Skewer mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'run-skewer "skewer-mode" "Attach a browser to Emacs for a skewer JavaScript REPL. Uses
`browse-url' to launch a browser.

With a prefix arugment (C-u), it will ask the filename of the
root document.  With two prefix arguments (C-u C-u), it will use
the contents of the current buffer as the root document.

(fn &optional ARG)" t nil)(autoload 'skewer-run-phantomjs "skewer-mode" "Connect an inferior PhantomJS process to Skewer, returning the process." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-mode" '("httpd/skewer/" "phantomjs-program-name" "skewer")))(autoload 'skewer-repl--response-hook "skewer-repl" "Catches all browser messages logging some to the REPL.

(fn RESPONSE)" nil nil)(autoload 'skewer-repl "skewer-repl" "Start a JavaScript REPL to be evaluated in the visiting browser." t nil)(eval-after-load 'skewer-mode '(progn (add-hook 'skewer-response-hook #'skewer-repl--response-hook) (add-hook 'skewer-repl-mode-hook #'skewer-repl-mode-compilation-shell-hook) (define-key skewer-mode-map (kbd "C-c C-z") #'skewer-repl)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-repl" '("company-skewer-repl" "skewer-")))(autoload 'skewer-setup "skewer-setup" "Fully integrate Skewer into js2-mode, css-mode, and html-mode buffers." nil nil)(autoload 'httpd-start "simple-httpd" "Start the web server process. If the server is already
running, this will restart the server. There is only one server
instance per Emacs instance." t nil)(autoload 'httpd-stop "simple-httpd" "Stop the web server if it is currently running, otherwise do nothing." t nil)(autoload 'httpd-running-p "simple-httpd" "Return non-nil if the simple-httpd server is running." nil nil)(autoload 'httpd-serve-directory "simple-httpd" "Start the web server with given `directory' as `httpd-root'.

(fn DIRECTORY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "simple-httpd" '("defservlet" "httpd" "with-httpd-buffer")))(autoload 'company-tide "tide" "

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'tide-format-before-save "tide" "Before save hook to format the buffer before each save." t nil)(autoload 'tide-format "tide" "Format the current region or buffer." t nil)(autoload 'tide-setup "tide" "Setup `tide-mode' in current buffer." t nil)(autoload 'tide-mode "tide" "Minor mode for Typescript Interactive Development Environment.

If called interactively, enable Tide mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

\\{tide-mode-map}

(fn &optional ARG)" t nil)(autoload 'tide-project-errors "tide" nil t nil)(autoload 'tide-unhighlight-identifiers "tide" "Remove highlights from previously highlighted identifier." nil nil)(autoload 'tide-hl-identifier "tide" "Highlight all instances of the identifier under point. Removes
highlights from previously highlighted identifier." t nil)(autoload 'tide-hl-identifier-mode "tide" "Highlight instances of the identifier at point after a short
timeout.

If called interactively, enable Tide-Hl-Identifier mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tide" '("tide-" "xref-tide-xref-backend")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tide-lv" '("tide-lv-")))(autoload 'xref-js2-xref-backend "xref-js2" "Xref-Js2 backend for Xref." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xref-js2" '("xref-js2-")))(autoload 'bib-cite-minor-mode "bib-cite" "Toggle bib-cite mode.
When bib-cite mode is enabled, citations, labels and refs are highlighted
when the mouse is over them.  Clicking on these highlights with [mouse-2]
runs `bib-find', and [mouse-3] runs `bib-display'.

(fn ARG)" t nil)(autoload 'turn-on-bib-cite "bib-cite" "Unconditionally turn on Bib Cite mode." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bib-cite" '("LaTeX-" "bib-" "create-alist-from-list" "member-cis" "psg-" "search-directory-tree")))(defalias 'ConTeXt-mode #'context-mode)(autoload 'context-mode "context" "Major mode in AUCTeX for editing ConTeXt files.

Special commands:
\\{ConTeXt-mode-map}

Entering `context-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of ConTeXt-mode-hook." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "context" '("ConTeXt-" "TeX-ConTeXt-sentinel" "context-guess-current-interface")))(autoload 'context-en-mode "context-en" "Major mode for editing files for ConTeXt using its english interface.

Special commands:
\\{ConTeXt-mode-map}

Entering `context-mode' calls the value of `text-mode-hook',
then the value of TeX-mode-hook, and then the value
of context-mode-hook." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "context-en" '("ConTeXt-")))(autoload 'context-nl-mode "context-nl" "Major mode for editing files for ConTeXt using its dutch interface.

Special commands:
\\{ConTeXt-mode-map}

Entering `context-mode' calls the value of `text-mode-hook',
then the value of TeX-mode-hook, and then the value
of context-mode-hook." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "context-nl" '("ConTeXt-")))(autoload 'font-latex-setup "font-latex" "Setup this buffer for LaTeX font-lock.  Usually called from a hook." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "font-latex" '("font-latex-")))(autoload 'BibTeX-auto-store "latex" "This function should be called from `bibtex-mode-hook'.
It will setup BibTeX to store keys in an auto file." nil nil)(autoload 'TeX-latex-mode "latex" "Major mode in AUCTeX for editing LaTeX files.
See info under AUCTeX for full documentation.

Special commands:
\\{LaTeX-mode-map}

Entering LaTeX mode calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `LaTeX-mode-hook'." t nil)(autoload 'docTeX-mode "latex" "Major mode in AUCTeX for editing .dtx files derived from `LaTeX-mode'.
Runs `LaTeX-mode', sets a few variables and
runs the hooks in `docTeX-mode-hook'.

(fn)" t nil)(defalias 'TeX-doctex-mode #'docTeX-mode)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "latex" '("Bib" "LaTeX-" "TeX-" "docTeX-" "latex-math-mode")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "latex-flymake" '("LaTeX-")))(autoload 'multi-prompt "multi-prompt" "Completing prompt for a list of strings.  
The first argument SEPARATOR should be the string (of length 1) to
separate the elements in the list.  The second argument UNIQUE should
be non-nil, if each element must be unique.  The remaining elements
are the arguments to `completing-read'.  See that.

(fn SEPARATOR UNIQUE PROMPT TABLE &optional MP-PREDICATE REQUIRE-MATCH INITIAL HISTORY)" nil nil)(autoload 'multi-prompt-key-value "multi-prompt" "Read multiple strings, with completion and key=value support.
PROMPT is a string to prompt with, usually ending with a colon
and a space.  TABLE is an alist.  The car of each element should
be a string representing a key and the optional cdr should be a
list with strings to be used as values for the key.

See the documentation for `completing-read' for details on the
other arguments: PREDICATE, REQUIRE-MATCH, INITIAL-INPUT, HIST,
DEF, and INHERIT-INPUT-METHOD.

The return value is the string as entered in the minibuffer.

(fn PROMPT TABLE &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "multi-prompt" '("multi-prompt-")))(autoload 'TeX-plain-tex-mode "plain-tex" "Major mode in AUCTeX for editing plain TeX files.
See info under AUCTeX for documentation.

Special commands:
\\{plain-TeX-mode-map}

Entering `plain-tex-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `plain-TeX-mode-hook'." t nil)(autoload 'ams-tex-mode "plain-tex" "Major mode in AUCTeX for editing AmS-TeX files.
See info under AUCTeX for documentation.

Special commands:
\\{AmSTeX-mode-map}

Entering `ams-tex-mode' calls the value of `text-mode-hook',
then the value of `TeX-mode-hook', and then the value
of `AmS-TeX-mode-hook'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "plain-tex" '("AmS" "plain-TeX-")))(autoload 'preview-install-styles "preview" "Installs the TeX style files into a permanent location.
This must be in the TeX search path.  If FORCE-OVERWRITE is greater
than 1, files will get overwritten without query, if it is less
than 1 or nil, the operation will fail.  The default of 1 for interactive
use will query.

Similarly FORCE-SAVE can be used for saving
`preview-TeX-style-dir' to record the fact that the uninstalled
files are no longer needed in the search path.

(fn DIR &optional FORCE-OVERWRITE FORCE-SAVE)" t nil)(autoload 'LaTeX-preview-setup "preview" "Hook function for embedding the preview package into AUCTeX.
This is called by `LaTeX-mode-hook' and changes AUCTeX variables
to add the preview functionality." nil nil)(autoload 'preview-report-bug "preview" "Report a bug in the preview-latex package." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "preview" '("TeX-" "desktop-buffer-preview" "preview-")))(autoload 'TeX-tex-mode "tex" "Major mode in AUCTeX for editing TeX or LaTeX files.
Tries to guess whether this file is for plain TeX or LaTeX.

The algorithm is as follows:

   1) if the file is empty or `TeX-force-default-mode' is not set to nil,
      `TeX-default-mode' is chosen
   2) If \\documentstyle or \\begin{, \\section{, \\part{ or \\chapter{ is
      found, `latex-mode' is selected.
   3) Otherwise, use `plain-tex-mode'" t nil)(autoload 'TeX-auto-generate "tex" "Generate style file for TEX and store it in AUTO.
If TEX is a directory, generate style files for all files in the directory.

(fn TEX AUTO)" t nil)(autoload 'TeX-auto-generate-global "tex" "Create global auto directory for global TeX macro definitions." t nil)(autoload 'TeX-submit-bug-report "tex" "Submit a bug report on AUCTeX via mail.

Don't hesitate to report any problems or inaccurate documentation.

If you don't have setup sending mail from Emacs, please copy the
output buffer into your mail program, as it gives us important
information about your AUCTeX version and AUCTeX configuration." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex" '("Bib" "ConTeXt-" "LaTeX-" "TeX-" "VirTeX-common-initialization" "docTeX-default-extension" "plain-TeX-auto-regexp-list" "tex-")))(autoload 'TeX-install-toolbar "tex-bar" "Install toolbar buttons for TeX mode." t nil)(autoload 'LaTeX-install-toolbar "tex-bar" "Install toolbar buttons for LaTeX mode." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-bar" '("TeX-bar-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-buf" '("LaTeX-" "TeX-")))(autoload 'TeX-fold-mode "tex-fold" "Minor mode for hiding and revealing macros and environments.

Called interactively, with no prefix argument, toggle the mode.
With universal prefix ARG (or if ARG is nil) turn mode on.
With zero or negative ARG turn mode off.

(fn &optional ARG)" t nil)(defalias 'tex-fold-mode #'TeX-fold-mode)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-fold" '("TeX-fold-")))(autoload 'tex-font-setup "tex-font" "Setup font lock support for TeX." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-font" '("tex-")))(defalias 'Texinfo-mode #'texinfo-mode)(autoload 'TeX-texinfo-mode "tex-info" "Major mode in AUCTeX for editing Texinfo files.

Special commands:
\\{Texinfo-mode-map}

Entering Texinfo mode calls the value of `text-mode-hook'  and then the
value of `Texinfo-mode-hook'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-info" '("Texinfo-" "texinfo-environment-regexp")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-ispell" '("TeX-ispell-")))(autoload 'japanese-plain-tex-mode "tex-jp" "Major mode in AUCTeX for editing Japanese plain TeX files.
Set `japanese-TeX-mode' to t, and enter `TeX-plain-tex-mode'." t nil)(autoload 'japanese-latex-mode "tex-jp" "Major mode in AUCTeX for editing Japanese LaTeX files.
Set `japanese-TeX-mode' to t, and enter `TeX-latex-mode'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-jp" '("TeX-" "japanese-")))(require 'tex-site)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-site" '("AUCTeX-" "TeX-" "preview-TeX-style-dir")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-style" '("LaTeX-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tex-wizard" '("TeX-wizard")))(autoload 'texmathp "texmathp" "Determine if point is inside (La)TeX math mode.
Returns t or nil.  Additional info is placed into `texmathp-why'.
The functions assumes that you have (almost) syntactically correct (La)TeX in
the buffer.
See the variable `texmathp-tex-commands' about which commands are checked." t nil)(autoload 'texmathp-match-switch "texmathp" "Search backward for any of the math switches.
Limit searched to BOUND.

(fn BOUND)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "texmathp" '("texmathp-")))(autoload 'toolbarx-install-toolbar "toolbar-x")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "toolbar-x" '("toolbarx-")))(autoload 'latex-preview-pane-enable "latex-preview-pane" "Enable `latex-preview-pane-mode' in `latex-mode'." nil nil)(autoload 'init-latex-preview-pane "latex-preview-pane" nil nil nil)(autoload 'latex-preview-update "latex-preview-pane" nil t nil)(autoload 'latex-preview-pane-update "latex-preview-pane" nil t nil)(autoload 'latex-preview-pane-update-p "latex-preview-pane" nil nil nil)(autoload 'latex-preview-pane-mode "latex-preview-pane" "Toggle Latex Preview Pane Mode.
     Interactively with no argument, this command toggles the mode.
     A positive prefix argument enables the mode, any other prefix
     argument disables it.  From Lisp, argument omitted or nil enables
     the mode, `toggle' toggles the state.
     
     When Latex Preview Pane mode is enabled, saving a latex file will cause 
     a PDF preview pane of your document to appear.

If called interactively, enable Latex-Preview-Pane mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "latex-preview-pane" '("latex-p" "lpp/" "pdf-latex-command" "preview-orientation" "shell-escape-mode")))(autoload 'evil-tex-mode "evil-tex" "evil toolbox for LaTeX editing. Provides many text objects
fully utilizing evil-surround, some useful movements, and keymaps
for quickly entering environments or cdlatex-like accents. And
useful toggles.

If called interactively, enable Evil-Tex mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

See URL `https://github.com/iyefrat/evil-tex' for the full feature
list.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-tex" '("evil-tex-")))(autoload 'company-auctex-macros "company-auctex" "company-auctex-macros backend

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-auctex-symbols "company-auctex" "company-auctex-symbols backend

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-auctex-environments "company-auctex" "company-auctex-environments backend

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-auctex-labels "company-auctex" "company-auctex-labels backend

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-auctex-bibs "company-auctex" "company-auctex-bibs backend

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-auctex-init "company-auctex" "Add backends provided by company-auctex to company-backends." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-auctex" '("car-or" "company-auctex-")))(autoload 'company-reftex-citations "company-reftex" "Company backend for LaTeX citations, powered by reftex.
For more information on COMMAND and ARG see `company-backends'.

(fn COMMAND &optional ARG &rest _)" t nil)(autoload 'company-reftex-labels "company-reftex" "Company backend for LaTeX labels, powered by reftex.
For more information on COMMAND and ARG see `company-backends'.

(fn COMMAND &optional ARG &rest _)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-reftex" '("company-reftex-")))(autoload 'company-latex-commands "company-math" "Company backend for latex commands.
COMMAND and ARG is as required by company backends.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-math-symbols-latex "company-math" "Company backend for LaTeX mathematical symbols.
COMMAND and ARG is as required by company backends.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-math-symbols-unicode "company-math" "Company backend for insertion of Unicode mathematical symbols.
COMMAND and ARG is as required by company backends.
See the unicode-math page [1] for a list of fonts that have a
good support for mathematical symbols. Unicode provides only a
limited range of sub(super)scripts; see the wikipedia page [2]
for details.

 [1] http://ftp.snt.utwente.nl/pub/software/tex/help/Catalogue/entries/unicode-math.html
 [2] https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-math" '("company-math-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "math-symbol-lists" '("math-symbol-list-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "msl-build" '("msl-")))(autoload 'markdown-toc-version "markdown-toc" "Markdown-toc version." t nil)(autoload 'markdown-toc-generate-toc "markdown-toc" "Generate a TOC for markdown file at current point.
Deletes any previous TOC.
If called interactively with prefix arg REPLACE-TOC-P, replaces previous TOC.

(fn &optional REPLACE-TOC-P)" t nil)(autoload 'markdown-toc-generate-or-refresh-toc "markdown-toc" "Generate a TOC for markdown file at current point or refreshes an already generated TOC." t nil)(autoload 'markdown-toc-refresh-toc "markdown-toc" "Refreshes an already generated TOC." t nil)(autoload 'markdown-toc-delete-toc "markdown-toc" "Deletes a previously generated TOC." t nil)(autoload 'markdown-toc-follow-link-at-point "markdown-toc" "On a given toc link, navigate to the current markdown header.
If the toc is misindented (according to markdown-toc-indentation-space`)
or if not on a toc link, this does nothing.
" t nil)(autoload 'markdown-toc-mode "markdown-toc" "Functionality for generating toc in markdown file.
With no argument, the mode is toggled on/off.
Non-nil argument turns mode on.
Nil argument turns mode off.

If called interactively, enable Markdown-Toc mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Commands:
\\{markdown-toc-mode-map}

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "markdown-toc" '("markdown-")))(autoload 'edit-indirect-region "edit-indirect" "Edit the region BEG..END in a separate buffer.
The region is copied, without text properties, to a separate
buffer, called edit-indirect buffer, and
`edit-indirect-guess-mode-function' is called to set the major
mode.
When done, exit with `edit-indirect-commit', which will remove the
original region and replace it with the edited version; or with
`edit-indirect-abort', which will drop the modifications.

This differs from `clone-indirect-buffer' with narrowing in that
the text properties are not shared, so the parent buffer major mode
and the edit-indirect buffer major mode will not be able to tread
on each other's toes by setting up potentially conflicting text
properties, which happens surprisingly often when the font-lock
mode is used.

Edit-indirect buffers use the `edit-indirect-mode-map' keymap.

If there's already an edit-indirect buffer for BEG..END, use that.
If there's already an edit-indirect buffer active overlapping any
portion of BEG..END, an `edit-indirect-overlapping' error is
signaled.

When DISPLAY-BUFFER is non-nil or when called interactively,
display the edit-indirect buffer in some window and select it.

In any case, return the edit-indirect buffer.

(fn BEG END &optional DISPLAY-BUFFER)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "edit-indirect" '("edit-indirect-")))(autoload 'evil-markdown-mode "evil-markdown" "Buffer local minor mode for evil-markdown

If called interactively, enable Evil-Markdown mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'evil-markdown-set-key-theme "evil-markdown" "Select what key THEMEs to enable.

(fn THEME)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-markdown" '("evil-markdown-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-csharp" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-eukleides" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-fomus" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-mathomatic" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-oz" '("org-babel-" "oz-send-string-expression")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-stata" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-tcl" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-vbnet" '("org-babel-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-bookmark" '("org-bookmark-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-elisp-symbol" '("org-elisp-symbol-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-git-link" '("org-git")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-mew" '("org-mew-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-vm" '("org-vm-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ol-wl" '("org-wl-")))(autoload 'org-annotate-file "org-annotate-file" "Visit `org-annotate-file-storage-file` and add a new annotation section.
The annotation is opened at the new section which will be referencing
the point in the current file." t nil)(autoload 'org-annotate-file-show-section "org-annotate-file" "Add or show annotation entry in STORAGE-FILE and return the buffer.
The annotation will link to ANNOTATED-BUFFER if specified,
  otherwise the current buffer is used.

(fn STORAGE-FILE &optional ANNOTATED-BUFFER)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-annotate-file" '("org-annotate-file-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-bibtex-extras" '("obe-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-checklist" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-choose" '("org-choose-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-collector" '("and-rest" "org-")))(autoload 'org-contacts "org-contacts" "Create agenda view for contacts matching NAME.

(fn NAME)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-contacts" '("erc-nicknames-list" "org-co")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-depend" '("org-depend-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-effectiveness" '("org-effectiveness-")))(autoload 'org-eldoc-load "org-eldoc" "Set up org-eldoc documentation function." t nil)(add-hook 'org-mode-hook #'org-eldoc-load)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-eldoc" '("org-eldoc-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-eval" '("org-eval-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-eval-light" '("org-eval-light-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-expiry" '("org-expiry-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-interactive-query" '("org-agenda-query-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-invoice" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-learn" '("calculate-new-optimal-factor" "determine-next-interval" "get-optimal-factor" "initial-" "inter-repetition-interval" "modify-" "org-" "set-optimal-factor")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-license" '("org-license-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-mac-iCal" '("omi-" "org-mac-iCal")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-mairix" '("org-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-panel" '("orgpan-")))(autoload 'org-registry-show "org-registry" "Show Org files where there are links pointing to the current
buffer.

(fn &optional VISIT)" t nil)(autoload 'org-registry-visit "org-registry" "If an Org file contains a link to the current location, visit
this file." t nil)(autoload 'org-registry-initialize "org-registry" "Initialize `org-registry-alist'.
If FROM-SCRATCH is non-nil or the registry does not exist yet,
create a new registry from scratch and eval it. If the registry
exists, eval `org-registry-file' and make it the new value for
`org-registry-alist'.

(fn &optional FROM-SCRATCH)" t nil)(autoload 'org-registry-insinuate "org-registry" "Call `org-registry-update' after saving in Org-mode.
Use with caution.  This could slow down things a bit." t nil)(autoload 'org-registry-update "org-registry" "Update the registry for the current Org file." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-registry" '("org-registry-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-screen" '("org-screen")))(autoload 'org-screenshot-take "org-screenshot" "Take a screenshot and insert link to it at point, if image
display is already on (see \\[org-toggle-inline-images])
screenshot will be displayed as an image

Screen area for the screenshot is selected with the mouse, left
click on a window screenshots that window, while left click and
drag selects a region. Pressing any key cancels the screen shot

With `C-u' universal argument waits one second after target is
selected before taking the screenshot. With double `C-u' wait two
seconds.

With triple `C-u' wait 3 seconds, and also rings the bell when
screenshot is done, any more `C-u' after that increases delay by
2 seconds

(fn &optional DELAY)" t nil)(autoload 'org-screenshot-rotate-prev "org-screenshot" "Rotate last screenshot with one of the previously taken
screenshots from the same directory. If DIR is negative, rotate
in the other direction

(fn DIR)" t nil)(autoload 'org-screenshot-rotate-next "org-screenshot" "Rotate last screenshot with one of the previously taken
screenshots from the same directory. If DIR is negative, rotate
in the other direction

(fn DIR)" t nil)(autoload 'org-screenshot-show-unused "org-screenshot" "Open A Dired buffer with unused screenshots marked" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-screenshot" '("org-screenshot-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-secretary" '("join" "org-sec-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-static-mathjax" '("org-static-mathjax-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-sudoku" '("org-sudoku-")))(autoload 'org-toc-show "org-toc" "Show the table of contents of the current Org-mode buffer.

(fn &optional DEPTH POSITION)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-toc" '("org-")))(autoload 'org-track-fetch-package "org-track" "Fetch Org package depending on `org-track-fetch-package-extension'.
If DIRECTORY is defined, unpack the package there, i.e. add the
subdirectory org-mode/ to DIRECTORY.

(fn &optional DIRECTORY)" t nil)(autoload 'org-track-compile-org "org-track" "Compile all *.el files that come with org-mode.
Generate the autoloads file `org-loaddefs.el'.

DIRECTORY is where the directory org-mode/ lives (i.e. the
          parent directory of your local repo.

(fn &optional DIRECTORY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-track" '("org-track-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-wikinodes" '("org-wikinodes-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "orgtbl-sqlinsert" '("orgtbl-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-bibtex" '("org-bibtex-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-confluence" '("org-confluence-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-deck" '("org-deck-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-extra" '("org-" "ox-extras")))(autoload 'org-freemind-export-to-freemind "ox-freemind" "Export current buffer to a Freemind Mindmap file.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"<body>\" and \"</body>\" tags.

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-freemind" '("org-freemind-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-groff" '("org-groff-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-s5" '("org-s5-")))(autoload 'org-taskjuggler-export "ox-taskjuggler" "Export current buffer to a TaskJuggler file.

The exporter looks for a tree with tag that matches
`org-taskjuggler-project-tag' and takes this as the tasks for
this project.  The first node of this tree defines the project
properties such as project name and project period.

If there is a tree with tag that matches
`org-taskjuggler-resource-tag' this tree is taken as resources
for the project.  If no resources are specified, a default
resource is created and allocated to the project.

Also the TaskJuggler project will be created with default reports
as defined in `org-taskjuggler-default-reports'.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY)" t nil)(autoload 'org-taskjuggler-export-and-process "ox-taskjuggler" "Export current buffer to a TaskJuggler file and process it.

The exporter looks for a tree with tag that matches
`org-taskjuggler-project-tag' and takes this as the tasks for
this project.  The first node of this tree defines the project
properties such as project name and project period.

If there is a tree with tag that matches
`org-taskjuggler-resource-tag' this tree is taken as resources
for the project.  If no resources are specified, a default
resource is created and allocated to the project.

Also the TaskJuggler project will be created with default reports
as defined in `org-taskjuggler-default-reports'.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Return a list of reports.

(fn &optional SUBTREEP VISIBLE-ONLY)" t nil)(autoload 'org-taskjuggler-export-process-and-open "ox-taskjuggler" "Export current buffer to a TaskJuggler file, process and open it.

Export and process the file using
`org-taskjuggler-export-and-process' and open the generated
reports with a browser.

If you are targeting TaskJuggler 2.4 (see
`org-taskjuggler-target-version') the processing and display of
the reports is done using the TaskJuggler GUI.

(fn &optional SUBTREEP VISIBLE-ONLY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-taskjuggler" '("org-taskjuggler-")))(autoload 'htmlize-buffer "htmlize" "Convert BUFFER to HTML, preserving colors and decorations.

The generated HTML is available in a new buffer, which is returned.
When invoked interactively, the new buffer is selected in the current
window.  The title of the generated document will be set to the buffer's
file name or, if that's not available, to the buffer's name.

Note that htmlize doesn't fontify your buffers, it only uses the
decorations that are already present.  If you don't set up font-lock or
something else to fontify your buffers, the resulting HTML will be
plain.  Likewise, if you don't like the choice of colors, fix the mode
that created them, or simply alter the faces it uses.

(fn &optional BUFFER)" t nil)(autoload 'htmlize-region "htmlize" "Convert the region to HTML, preserving colors and decorations.
See `htmlize-buffer' for details.

(fn BEG END)" t nil)(autoload 'htmlize-file "htmlize" "Load FILE, fontify it, convert it to HTML, and save the result.

Contents of FILE are inserted into a temporary buffer, whose major mode
is set with `normal-mode' as appropriate for the file type.  The buffer
is subsequently fontified with `font-lock' and converted to HTML.  Note
that, unlike `htmlize-buffer', this function explicitly turns on
font-lock.  If a form of highlighting other than font-lock is desired,
please use `htmlize-buffer' directly on buffers so highlighted.

Buffers currently visiting FILE are unaffected by this function.  The
function does not change current buffer or move the point.

If TARGET is specified and names a directory, the resulting file will be
saved there instead of to FILE's directory.  If TARGET is specified and
does not name a directory, it will be used as output file name.

(fn FILE &optional TARGET)" t nil)(autoload 'htmlize-many-files "htmlize" "Convert FILES to HTML and save the corresponding HTML versions.

FILES should be a list of file names to convert.  This function calls
`htmlize-file' on each file; see that function for details.  When
invoked interactively, you are prompted for a list of files to convert,
terminated with RET.

If TARGET-DIRECTORY is specified, the HTML files will be saved to that
directory.  Normally, each HTML file is saved to the directory of the
corresponding source file.

(fn FILES &optional TARGET-DIRECTORY)" t nil)(autoload 'htmlize-many-files-dired "htmlize" "HTMLize dired-marked files.

(fn ARG &optional TARGET-DIRECTORY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "htmlize" '("htmlize-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-yt" '("org-")))(autoload 'ox-clip-formatted-copy "ox-clip" "Export the selected region to HTML and copy it to the clipboard.
R1 and R2 define the selected region.

(fn R1 R2)" t nil)(autoload 'ox-clip-image-to-clipboard "ox-clip" "Copy the image file or latex fragment at point to the clipboard as an image.
SCALE is a numerical
prefix (default=`ox-clip-default-latex-scale') that determines
the size of the latex image. It has no effect on other kinds of
images. Currently only works on Linux.

(fn &optional SCALE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-clip" '("ox-clip-")))(autoload 'toc-org-enable "toc-org" "Enable toc-org in this buffer." nil nil)(autoload 'toc-org-mode "toc-org" "Toggle `toc-org' in this buffer.

If called interactively, enable Toc-Org mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "toc-org" '("toc-org-")))(autoload 'org-cliplink-retrieve-title "org-cliplink" "

(fn URL TITLE-CALLBACK)" nil nil)(autoload 'org-cliplink-insert-transformed-title "org-cliplink" "Takes the URL, asynchronously retrieves the title and applies
a custom TRANSFORMER which transforms the url and title and insert
the required text to the current buffer.

(fn URL TRANSFORMER)" nil nil)(autoload 'org-cliplink-retrieve-title-synchronously "org-cliplink" "

(fn URL)" nil nil)(autoload 'org-cliplink "org-cliplink" "Takes a URL from the clipboard and inserts an org-mode link
with the title of a page found by the URL into the current
buffer" t nil)(autoload 'org-cliplink-capture "org-cliplink" "org-cliplink version for org-capture templates.
Makes synchronous request. Returns the link instead of inserting
it to the current buffer. Doesn't support Basic Auth. Doesn't
support cURL transport." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-cliplink" '("org-cliplink-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-cliplink-string" '("org-cliplink-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-cliplink-transport" '("org-cliplink-")))(autoload 'evil-org-mode "evil-org" "Buffer local minor mode for evil-org

If called interactively, enable Evil-Org mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-org" '("evil-org-")))(autoload 'evil-org-agenda-mode "evil-org-agenda" "Buffer local minor mode for evil-org-agenda

If called interactively, enable Evil-Org-Agenda mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-org-agenda" '("evil-org-agenda-")))(autoload 'org-pdftools-open "org-pdftools" "Function to open org-pdftools LINK.

(fn LINK)" nil nil)(autoload 'org-pdftools-store-link "org-pdftools" "Store a link to a pdfview/pdfoccur buffer." nil nil)(autoload 'org-pdftools-export "org-pdftools" "Export the pdfview LINK with DESCRIPTION for FORMAT from Org files.

(fn LINK DESCRIPTION FORMAT)" nil nil)(autoload 'org-pdftools-setup-link "org-pdftools" "Set up pdf: links in org-mode.

(fn &optional PREFIX)" nil nil)(autoload 'org-pdftools-complete-link "org-pdftools" "Use the existing file name completion for file.
Links to get the file name, then ask the user for the page number
and append it. ARG is passed to `org-link-complete-file'.

(fn &optional ARG)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-pdftools" '("org-pdftools-")))(autoload 'org-noter "org-noter" "Start `org-noter' session.

There are two modes of operation. You may create the session from:
- The Org notes file
- The document to be annotated (PDF, EPUB, ...)

- Creating the session from notes file -----------------------------------------
This will open a session for taking your notes, with indirect
buffers to the document and the notes side by side. Your current
window configuration won't be changed, because this opens in a
new frame.

You only need to run this command inside a heading (which will
hold the notes for this document). If no document path property is found,
this command will ask you for the target file.

With a prefix universal argument ARG, only check for the property
in the current heading, don't inherit from parents.

With 2 prefix universal arguments ARG, ask for a new document,
even if the current heading annotates one.

With a prefix number ARG:
- Greater than 0: Open the document like `find-file'
-     Equal to 0: Create session with `org-noter-always-create-frame' toggled
-    Less than 0: Open the folder containing the document

- Creating the session from the document ---------------------------------------
This will try to find a notes file in any of the parent folders.
The names it will search for are defined in `org-noter-default-notes-file-names'.
It will also try to find a notes file with the same name as the
document, giving it the maximum priority.

When it doesn't find anything, it will interactively ask you what
you want it to do. The target notes file must be in a parent
folder (direct or otherwise) of the document.

You may pass a prefix ARG in order to make it let you choose the
notes file, even if it finds one.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-noter" '("org-noter-")))(autoload 'orgit-link-set-parameters "orgit" "

(fn TYPE &rest PARAMETERS)" nil nil)(with-eval-after-load 'magit (define-key magit-mode-map [remap org-store-link] 'orgit-store-link))(autoload 'orgit-store-link "orgit" "Like `org-store-link' but store links to all selected commits, if any.

(fn ARG)" t nil)(with-eval-after-load 'org (orgit-link-set-parameters "orgit" :store 'orgit-status-store :follow 'orgit-status-open :export 'orgit-status-export :complete 'orgit-status-complete-link))(autoload 'orgit-status-store "orgit" "Store a link to a Magit-Status mode buffer.
When the region selects one or more commits, then do nothing.
In that case `orgit-rev-store' stores one or more links instead." nil nil)(autoload 'orgit-status-open "orgit" "

(fn REPO)" nil nil)(autoload 'orgit-status-export "orgit" "

(fn PATH DESC FORMAT)" nil nil)(autoload 'orgit-status-complete-link "orgit" "

(fn &optional ARG)" nil nil)(with-eval-after-load 'org (orgit-link-set-parameters "orgit-log" :store 'orgit-log-store :follow 'orgit-log-open :export 'orgit-log-export :complete 'orgit-log-complete-link))(autoload 'orgit-log-store "orgit" "Store a link to a Magit-Log mode buffer.
When the region selects one or more commits, then do nothing.
In that case `orgit-rev-store' stores one or more links instead." nil nil)(autoload 'orgit-log-open "orgit" "

(fn PATH)" nil nil)(autoload 'orgit-log-export "orgit" "

(fn PATH DESC FORMAT)" nil nil)(autoload 'orgit-log-complete-link "orgit" "

(fn &optional ARG)" nil nil)(with-eval-after-load 'org (orgit-link-set-parameters "orgit-rev" :store 'orgit-rev-store :follow 'orgit-rev-open :export 'orgit-rev-export :complete 'orgit-rev-complete-link))(autoload 'orgit-rev-store "orgit" "Store a link to a Magit-Revision mode buffer.
With a prefix argument instead store the name of a tag or branch
that points at the revision, if any.

If `orgit-store-reference' is non-nil, then the meaning of the
prefix argument is reversed.

When the region selects one or more commits, e.g. in a log, then
store links to the Magit-Revision mode buffers for these commits." nil nil)(autoload 'orgit-rev-open "orgit" "

(fn PATH)" nil nil)(autoload 'orgit-rev-export "orgit" "

(fn PATH DESC FORMAT)" nil nil)(autoload 'orgit-rev-complete-link "orgit" "

(fn &optional ARG)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "orgit" '("orgit-")))(defalias 'org-babel-execute-src-block:async 'ob-async-org-babel-execute-src-block)(autoload 'ob-async-org-babel-execute-src-block "ob-async" "Like org-babel-execute-src-block, but run asynchronously.

Original docstring for org-babel-execute-src-block:

Execute the current source code block.  Insert the results of
execution into the buffer.  Source code execution and the
collection and formatting of results can be controlled through a
variety of header arguments.

With prefix argument ARG, force re-execution even if an existing
result cached in the buffer would otherwise have been returned.

Optionally supply a value for INFO in the form returned by
`org-babel-get-src-block-info'.

Optionally supply a value for PARAMS which will be merged with
the header arguments specified at the front of the source code
block.

(fn &optional ORIG-FUN ARG INFO PARAMS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-async" '("ob-async-")))(autoload 'psysh-doc-buffer "psysh" "Execute PsySH Doc `TARGET' and Return PsySH buffer `BUF'.

(fn TARGET &optional BUF)" nil nil)(autoload 'psysh-doc-mode "psysh" "Major mode for viewing PsySH Doc.

(fn)" t nil)(autoload 'psysh-doc-string "psysh" "Return string of PsySH Doc `TARGET'.

(fn TARGET)" nil nil)(autoload 'psysh-doc "psysh" "Display PsySH doc `TARGET'.

(fn TARGET)" t nil)(autoload 'psysh "psysh" "Run PsySH interactive shell." t nil)(autoload 'psysh-run "psysh" "Run PsySH interactive-shell in `BUFFER-NAME' and `PROCESS'.

(fn BUFFER-NAME PROCESS)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "psysh" '("psysh-")))(eieio-defclass-autoload 'php-runtime-execute 'nil "php-runtime" nil)(autoload 'php-runtime-expr "php-runtime" "Evalute and echo PHP expression `PHP-EXPR'.

Pass `INPUT-BUFFER' to PHP executable as STDIN.

(fn PHP-EXPR &optional INPUT-BUFFER)" nil nil)(autoload 'php-runtime-eval "php-runtime" "Evalute PHP code `CODE' without open tag, and return buffer.

Pass `INPUT-BUFFER' to PHP executable as STDIN.

(fn CODE &optional INPUT-BUFFER)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-runtime" '("php-runtime-")))(defvar php-extras-insert-previous-variable-key [(control c) (control $)] "Key sequence for `php-extras-insert-previous-variable'.")(defvar php-extras-auto-complete-insert-parenthesis t "Whether auto complete insert should add a pair of parenthesis.")(autoload 'php-extras-insert-previous-variable "php-extras" "Insert previously used variable from buffer.
With prefix argument search that number of times backwards for
variable. If prefix argument is negative search forward.

(fn ARG)" t nil)(autoload 'php-extras-eldoc-documentation-function "php-extras" "Get function arguments for core PHP function at point." nil nil)(add-hook 'php-mode-hook 'php-extras-eldoc-setup)(autoload 'php-extras-autocomplete-setup "php-extras" nil nil nil)(add-hook 'php-mode-hook #'php-extras-autocomplete-setup)(autoload 'php-extras-completion-at-point "php-extras" nil nil nil)(autoload 'php-extras-completion-setup "php-extras" nil nil nil)(add-hook 'php-mode-hook #'php-extras-completion-setup)(autoload 'php-extras-company "php-extras" "`company-mode' back-end using `php-extras-function-arguments'.

(fn COMMAND &optional CANDIDATE &rest IGNORE)" t nil)(autoload 'php-extras-company-setup "php-extras" nil nil nil)(eval-after-load 'company '(php-extras-company-setup))(eval-after-load 'php-mode `(let ((map php-mode-map) (key php-extras-insert-previous-variable-key)) (define-key map key 'php-extras-insert-previous-variable)))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-extras" '("ac-source-php-extras" "php-extras-")))(autoload 'php-extras-generate-eldoc "php-extras-gen-eldoc" "Regenerate PHP function argument hash table from php.net. This is slow!" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-extras-gen-eldoc" '("php-extras-")))(let ((loads (get 'php 'custom-loads))) (if (member '"php" loads) nil (put 'php 'custom-loads (cons '"php" loads))))(autoload 'php-mode-maybe "php" "Select PHP mode or other major mode." t nil)(autoload 'php-current-class "php" "Insert current class name if cursor in class context." t nil)(autoload 'php-current-namespace "php" "Insert current namespace if cursor in namespace context." t nil)(autoload 'php-copyit-fqsen "php" "Copy/kill class/method FQSEN." t nil)(autoload 'php-run-builtin-web-server "php" "Run PHP Built-in web server.

`ROUTER-OR-DIR': Path to router PHP script or Document root.
`HOSTNAME': Hostname or IP address of Built-in web server.
`PORT': Port number of Built-in web server.
`DOCUMENT-ROOT': Path to Document root.

When `DOCUMENT-ROOT' is NIL, the document root is obtained from `ROUTER-OR-DIR'.

(fn ROUTER-OR-DIR HOSTNAME PORT &optional DOCUMENT-ROOT)" t nil)(autoload 'php-find-system-php-ini-file "php" "Find php.ini FILE by `php --ini'.

(fn &optional FILE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php" '("php-")))(autoload 'php-align-setup "php-align" "Setup alignment configuration for PHP code." nil nil)(autoload 'php-align-mode "php-align" "Alignment lines for PHP script.

If called interactively, enable Php-Align mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-align" '("php-align-")))(let ((loads (get 'php-faces 'custom-loads))) (if (member '"php-face" loads) nil (put 'php-faces 'custom-loads (cons '"php-face" loads))))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-face" '("php-annotations-annotation-face")))(autoload 'php-local-manual-search "php-local-manual" "Search the local PHP documentation (i.e. in `php-manual-path') for
the word at point.  The function returns t if the requested documentation
exists, and nil otherwise.

With a prefix argument, prompt (with completion) for a word to search for.

(fn WORD)" t nil)(define-obsolete-function-alias 'php-search-local-documentation #'php-local-manual-search "2.0.0")(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-local-manual" '("php-local-manual-")))(let ((loads (get 'php-mode 'custom-loads))) (if (member '"php-mode" loads) nil (put 'php-mode 'custom-loads (cons '"php-mode" loads))))(define-obsolete-variable-alias 'php-available-project-root-files 'php-project-available-root-files "1.19.0")(autoload 'php-mode "php-mode" "Major mode for editing PHP code.

\\{php-mode-map}

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-mode" '("php-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-mode-debug" '("php-mode-debug")))(defvar-local php-project-root 'auto "Method of searching for the top level directory.

`auto' (default)
      Try to search file in order of `php-project-available-root-files'.

SYMBOL
      Key of `php-project-available-root-files'.

STRING
      A file/directory name of top level marker.
      If the string is an actual directory path, it is set as the absolute path
      of the root directory, not the marker.")(put 'php-project-root 'safe-local-variable #'(lambda (v) (or (stringp v) (assq v php-project-available-root-files))))(defvar-local php-project-etags-file nil)(put 'php-project-etags-file 'safe-local-variable #'(lambda (v) (or (functionp v) (eq v t) (php-project--eval-bootstrap-scripts v))))(defvar-local php-project-bootstrap-scripts nil "List of path to bootstrap php script file.

The ideal bootstrap file is silent, it only includes dependent files,
defines constants, and sets the class loaders.")(put 'php-project-bootstrap-scripts 'safe-local-variable #'php-project--eval-bootstrap-scripts)(defvar-local php-project-php-executable nil "Path to php executable file.")(put 'php-project-php-executable 'safe-local-variable #'(lambda (v) (and (stringp v) (file-executable-p v))))(defvar-local php-project-phan-executable nil "Path to phan executable file.")(put 'php-project-phan-executable 'safe-local-variable #'php-project--eval-bootstrap-scripts)(defvar-local php-project-coding-style nil "Symbol value of the coding style of the project that PHP major mode refers to.

Typically it is `pear', `drupal', `wordpress', `symfony2' and `psr2'.")(put 'php-project-coding-style 'safe-local-variable #'symbolp)(defvar-local php-project-align-lines t "If T, automatically turn on `php-align-mode' by `php-align-setup'.")(put 'php-project-align-lines 'safe-local-variable #'booleanp)(defvar-local php-project-php-file-as-template 'auto "
`auto' (default)
      Automatically switch to mode for template when HTML tag detected in file.

`t'
      Switch all PHP files in that directory to mode for HTML template.

`nil'
      Any .php  in that directory is just a PHP script.

((PATTERN . SYMBOL))
      Alist of file name pattern regular expressions and the above symbol pairs.
      PATTERN is regexp pattern.
")(put 'php-project-php-file-as-template 'safe-local-variable #'php-project--validate-php-file-as-template)(defvar-local php-project-repl nil "Function name or path to REPL (interactive shell) script.")(put 'php-project-repl 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))(defvar-local php-project-unit-test nil "Function name or path to unit test script.")(put 'php-project-unit-test 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))(defvar-local php-project-deploy nil "Function name or path to deploy script.")(put 'php-project-deploy 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))(defvar-local php-project-build nil "Function name or path to build script.")(put 'php-project-build 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))(defvar-local php-project-server-start nil "Function name or path to server-start script.")(put 'php-project-server-start 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))(autoload 'php-project-get-bootstrap-scripts "php-project" "Return list of bootstrap script." nil nil)(autoload 'php-project-get-root-dir "php-project" "Return path to current PHP project." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-project" '("php-project-")))(autoload 'php-refactor-mode "php-refactor-mode" "Minor mode to quickly and safely perform common refactorings.

If called interactively, enable Php-Refactor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-refactor-mode" '("php-refactor-")))(defvar-local phpunit-root-directory nil "Directory path to execute PHPUnit.")(put 'phpunit-root-directory 'safe-local-variable #'stringp)(defvar-local phpunit-args nil "Argument to pass to phpunit command.")(put 'phpunit-args 'safe-local-variable #'(lambda (v) (or (stringp v) (listp v))))(defvar-local phpunit-executable nil "PHPUnit command or path to executable file.")(put 'phpunit-executable 'safe-local-variable #'(lambda (v) (or (null v) (stringp v) (functionp v))))(autoload 'phpunit-set-dir-local-variable "phpunit" "Create project file `.dir-locals.el' and set `VARIABLE' for `phpunit.el'.

(fn VARIABLE)" t nil)(autoload 'phpunit-current-test "phpunit" "Launch PHPUnit on curent test." t nil)(autoload 'phpunit-current-class "phpunit" "Launch PHPUnit on current class." t nil)(autoload 'phpunit-current-project "phpunit" "Launch PHPUnit on current project." t nil)(autoload 'phpunit-group "phpunit" "Launch PHPUnit for group.

(fn USE-LAST-GROUP &optional GROUP)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "phpunit" '("php")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "phpunit-mode" '("phpunit-mode")))(autoload 'composer-get-config "composer" "Return config value by `NAME'.

(fn NAME)" nil nil)(autoload 'composer-get-bin-dir "composer" "Retrurn path to Composer bin directory." nil nil)(autoload 'composer-install "composer" "Execute `composer.phar install' command." t nil)(autoload 'composer-dump-autoload "composer" "Execute `composer.phar install' command." t nil)(autoload 'composer-require "composer" "Execute `composer.phar require (--dev)' command.  Add --dev option if `IS-DEV' is t.  Require `PACKAGE' is package name.

(fn IS-DEV &optional PACKAGE)" t nil)(autoload 'composer-update "composer" "Execute `composer.phar update' command." t nil)(autoload 'composer-find-json-file "composer" "Open composer.json of the project." t nil)(autoload 'composer-view-lock-file "composer" "Open composer.lock of the project." t nil)(autoload 'composer-run-vendor-bin-command "composer" "Run command `COMMAND' in `vendor/bin' of the composer project.

(fn COMMAND)" t nil)(autoload 'composer-run-script "composer" "Run script `SCRIPT` as defined in the composer.json.

(fn SCRIPT)" t nil)(autoload 'composer-self-update "composer" "Execute `composer.phar self-update' command." t nil)(autoload 'composer-setup-managed-phar "composer" "Setup `composer.phar'.  Force re-setup when `FORCE' option is non-NIL.

(fn &optional FORCE)" t nil)(autoload 'composer "composer" "Execute `composer.phar'.  Execute `global' sub command If GLOBAL is t.  Require SUB-COMMAND is composer sub command.  OPTION is optional commandline arguments.

(fn GLOBAL &optional SUB-COMMAND OPTION)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "composer" '("composer-")))(let ((loads (get 'phpactor 'custom-loads))) (if (member '"phpactor" loads) nil (put 'phpactor 'custom-loads (cons '"phpactor" loads))))(defvar phpactor-install-directory (eval-when-compile (expand-file-name (locate-user-emacs-file "phpactor/"))) "Directory for setup Phactor.  (default `~/.emacs.d/phpactor/').")(autoload 'phpactor-smart-jump-register "phpactor" "Register `smart-jump' for MODES.

(fn &optional MODES)" nil nil)(autoload 'phpactor-install-or-update "phpactor" "Install or update phpactor inside phpactor.el's folder." t nil)(autoload 'phpactor-open-rpc-documentation "phpactor" "Open the official documentation for COMMAND.

(fn COMMAND)" t nil)(autoload 'phpactor-copy-class "phpactor" "Execute Phpactor RPC copy_class command." t nil)(autoload 'phpactor-move-class "phpactor" "Execute Phpactor RPC move_class command." t nil)(autoload 'phpactor-offset-info "phpactor" "Execute Phpactor RPC offset_info command." t nil)(autoload 'phpactor-transform "phpactor" "Execute Phpactor RPC transform command." t nil)(autoload 'phpactor-context-menu "phpactor" "Execute Phpactor RPC context_menu command." t nil)(autoload 'phpactor-navigate "phpactor" "Execute Phpactor RPC navigate command." t nil)(autoload 'phpactor-extension-list "phpactor" "Execute Phpactor RPC extension_list command." t nil)(autoload 'phpactor-extension-remove "phpactor" "Execute Phpactor RPC extension_remove command." t nil)(autoload 'phpactor-extension-install "phpactor" "Execute Phpactor RPC extension_install command." t nil)(autoload 'phpactor-echo "phpactor" "Execute Phpactor RPC echo command, say `MESSAGE'.

(fn MESSAGE)" t nil)(autoload 'phpactor-status "phpactor" "Execute Phpactor RPC status command, and pop to buffer." t nil)(autoload 'phpactor-goto-definition "phpactor" "Execute Phpactor RPC goto_definition command." t nil)(autoload 'phpactor-import-class "phpactor" "Execute Phpactor RPC import_class command for class NAME.

If called interactively, treat current symbol under cursor as NAME.
If any region is active, it takes precedence over symbol at point.

(fn &optional NAME)" t nil)(autoload 'phpactor-complete-constructor "phpactor" "Execute Phpactor RPC transform command to complete_constructor." t nil)(autoload 'phpactor-rename-variable "phpactor" "Execute Phpactor RPC action to rename variable in SCOPE.

(fn &optional SCOPE)" t nil)(autoload 'phpactor-rename-variable-local "phpactor" "Execute Phpactor RPC action to rename variable locally." t nil)(autoload 'phpactor-rename-variable-file "phpactor" "Execute Phpactor RPC action to rename variable in whole file." t nil)(autoload 'phpactor-fix-namespace "phpactor" "Execute Phpactor RPC transform command to fix namespace." t nil)(autoload 'phpactor-implement-contracts "phpactor" "Execute Phpactor RPC transform command to implement contracts." t nil)(autoload 'phpactor-find-references "phpactor" "Execute Phpactor RPC references action to find references." t nil)(autoload 'phpactor-replace-references "phpactor" "Execute Phpactor RPC references action command to replace references." t nil)(autoload 'phpactor-file-information "phpactor" "Execute Phpactor RPC file_info command to gather file informations." t nil)(autoload 'phpactor-insert-namespace "phpactor" "Find namespace for current file." t nil)(autoload 'phpactor-generate-accessors "phpactor" "Execute Phpactor RPC generate_accessor action." t nil)(autoload 'phpactor-generate-method "phpactor" "Execute Phpactor RPC generate_method action." t nil)(autoload 'phpactor-add-missing-assignments "phpactor" "Execute Phpactor RPC add_missing_assignments action." t nil)(autoload 'phpactor-create-new-class "phpactor" "Execute Phpactor RPC class_new action." t nil)(autoload 'phpactor-inflect-class "phpactor" "Execute Phpactor RPC class_inflect action." t nil)(autoload 'phpactor-extract-constant "phpactor" "Execute Phpactor RPC extract_constant action." t nil)(autoload 'phpactor-hover "phpactor" "Execute Phpactor RPC hover action." t nil)(autoload 'phpactor-extract-method "phpactor" "Execute Phpactor RPC extract_method action." t nil)(autoload 'phpactor-extract-expression "phpactor" "Execute Phpactor RPC extract_expression action." t nil)(autoload 'phpactor-change-visibility "phpactor" "Execute Phpactor RPC change_visibility action." t nil)(autoload 'phpactor-override-method "phpactor" "Execute Phpactor RPC override_method action." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "phpactor" '("phpactor-")))(autoload 'company-phpactor "company-phpactor" "`company-mode' completion backend for Phpactor.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-phpactor" '("company-phpactor-")))(autoload 'pip-requirements-auto-complete-setup "pip-requirements" "Setup Auto-Complete for Pip Requirements.

See URL `https://github.com/auto-complete/auto-complete' for
information about Auto Complete." nil nil)(autoload 'pip-requirements-mode "pip-requirements" "Major mode for editing pip requirements files.

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pip-requirements" '("pip-")))(autoload 'anaconda-mode "anaconda-mode" "Code navigation, documentation lookup and completion for Python.

If called interactively, enable Anaconda mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\\{anaconda-mode-map}

(fn &optional ARG)" t nil)(autoload 'anaconda-eldoc-mode "anaconda-mode" "Toggle echo area display of Python objects at point.

If called interactively, enable Anaconda-Eldoc mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "anaconda-mode" '("anaconda-" "turn-o")))(autoload 'pythonic-activate "pythonic" "Activate python VIRTUALENV.

(fn VIRTUALENV)" t nil)(autoload 'pythonic-deactivate "pythonic" "Deactivate python virtual environment." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pythonic" '("pythonic-")))(autoload 'company-anaconda "company-anaconda" "Anaconda backend for company-mode.
See `company-backends' for more info about COMMAND and ARG.

(fn COMMAND &optional ARG &rest ARGS)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-anaconda" '("company-anaconda-")))(autoload 'pipenv-mode "pipenv" "Minor mode for Pipenv.

If called interactively, enable Pipenv mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pipenv" '("pipenv-")))(autoload 'pyvenv-activate "pyvenv" "Activate the virtual environment in DIRECTORY.

(fn DIRECTORY)" t nil)(autoload 'pyvenv-deactivate "pyvenv" "Deactivate any current virtual environment." t nil)(autoload 'pyvenv-workon "pyvenv" "Activate a virtual environment from $WORKON_HOME.

If the virtual environment NAME is already active, this function
does not try to reactivate the environment.

(fn NAME)" t nil)(defvar pyvenv-mode nil "Non-nil if Pyvenv mode is enabled.
See the `pyvenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-mode'.")(autoload 'pyvenv-mode "pyvenv" "Global minor mode for pyvenv.

If called interactively, enable Pyvenv mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Will show the current virtualenv in the mode line, and respect a
`pyvenv-workon' setting in files.

(fn &optional ARG)" t nil)(defvar pyvenv-tracking-mode nil "Non-nil if Pyvenv-Tracking mode is enabled.
See the `pyvenv-tracking-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-tracking-mode'.")(autoload 'pyvenv-tracking-mode "pyvenv" "Global minor mode to track the current virtualenv.

If called interactively, enable Pyvenv-Tracking mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When this mode is active, pyvenv will activate a buffer-specific
virtualenv whenever the user switches to a buffer with a
buffer-local `pyvenv-workon' or `pyvenv-activate' variable.

(fn &optional ARG)" t nil)(autoload 'pyvenv-restart-python "pyvenv" "Restart Python inferior processes." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyvenv" '("pyvenv-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nose" '("inner-testable" "nose" "outer-testable" "run-nose")))(autoload 'python-pytest-dispatch "python-pytest" nil t)(autoload 'python-pytest "python-pytest" "Run pytest with ARGS.

With a prefix argument, allow editing.

(fn &optional ARGS)" t nil)(autoload 'python-pytest-file "python-pytest" "Run pytest on FILE, using ARGS.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE &optional ARGS)" t nil)(autoload 'python-pytest-file-dwim "python-pytest" "Run pytest on FILE, intelligently finding associated test modules.

When run interactively, this tries to work sensibly using
the current file.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE &optional ARGS)" t nil)(autoload 'python-pytest-files "python-pytest" "Run pytest on FILES, using ARGS.

When run interactively, this allows for interactive file selection.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILES &optional ARGS)" t nil)(autoload 'python-pytest-directories "python-pytest" "Run pytest on DIRECTORIES, using ARGS.

When run interactively, this allows for interactive directory selection.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn DIRECTORIES &optional ARGS)" t nil)(autoload 'python-pytest-function "python-pytest" "Run pytest on FILE with FUNC (or class).

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE FUNC ARGS)" t nil)(autoload 'python-pytest-function-dwim "python-pytest" "Run pytest on FILE with FUNC (or class).

When run interactively, this tries to work sensibly using
the current file and function around point.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE FUNC ARGS)" t nil)(autoload 'python-pytest-last-failed "python-pytest" "Run pytest, only executing previous test failures.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn &optional ARGS)" t nil)(autoload 'python-pytest-repeat "python-pytest" "Run pytest with the same argument as the most recent invocation.

With a prefix ARG, allow editing." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-pytest" '("python-pytest-")))(autoload 'pyimport-insert-missing "pyimport" "Try to insert an import for the symbol at point.
If called with a prefix, choose which import to use.

This is a simple heuristic: we just look for imports in all open Python buffers.

(fn PREFIX)" t nil)(autoload 'pyimport-remove-unused "pyimport" "Remove unused imports in the current Python buffer." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyimport" '("pyimport-")))(autoload 'shut-up "shut-up" "Evaluate BODY with silenced output.

While BODY is evaluated, all output is redirected to a buffer,
unless `shut-up-ignore' is non-nil.  This affects:

- `message'
- All functions using `standard-output' (e.g. `print', `princ', etc.)

Inside BODY, the buffer is bound to the lexical variable
`shut-up-sink'.  Additionally provide a lexical function
`shut-up-current-output', which returns the current contents of
`shut-up-sink' when called with no arguments.

Changes to the variable `shut-up-ignore' inside BODY does not
have any affect.

(fn &rest BODY)" nil t)(function-put 'shut-up 'lisp-indent-function '0)(autoload 'shut-up-silence-emacs "shut-up" "Silence Emacs.

Change Emacs settings to reduce the output.

WARNING: This function has GLOBAL SIDE-EFFECTS.  You should only
call this function in `noninteractive' sessions." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "shut-up" '("inhibit-message" "shut-up-")))(autoload 'py-isort-region "py-isort" "Uses the \"isort\" tool to reformat the current region." t nil)(autoload 'py-isort-buffer "py-isort" "Uses the \"isort\" tool to reformat the current buffer." t nil)(autoload 'py-isort-before-save "py-isort" nil t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "py-isort" '("py-isort-")))(autoload 'rustic-mode "rustic" "Major mode for Rust code.

\\{rustic-mode-map}

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic" '("rustic-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-babel" '("cargo-toml-dependencies" "crate-dependencies" "org-babel-execute:rust" "rustic-")))(autoload 'rustic-cargo-clippy-run "rustic-cargo" "Run `cargo clippy' with optional ARGS.

(fn &optional ARGS)" t nil)(autoload 'rustic-cargo-clippy "rustic-cargo" "Run 'cargo clippy'.

If ARG is not nil, use value as argument and store it in `rustic-clippy-arguments'.
When calling this function from `rustic-popup-mode', always use the value of
`rustic-clippy-arguments'.

(fn &optional ARG)" t nil)(autoload 'rustic-cargo-clippy-rerun "rustic-cargo" "Run 'cargo clippy' with `rustic-clippy-arguments'." t nil)(autoload 'rustic-cargo-test-run "rustic-cargo" "Start compilation process for 'cargo test' with optional TEST-ARGS.

(fn &optional TEST-ARGS)" t nil)(autoload 'rustic-cargo-test "rustic-cargo" "Run 'cargo test'.

If ARG is not nil, use value as argument and store it in `rustic-test-arguments'.
When calling this function from `rustic-popup-mode', always use the value of
`rustic-test-arguments'.

(fn &optional ARG)" t nil)(autoload 'rustic-cargo-test-rerun "rustic-cargo" "Run 'cargo test' with `rustic-test-arguments'." t nil)(autoload 'rustic-cargo-current-test "rustic-cargo" "Run 'cargo test' for the test near point." t nil)(autoload 'rustic-cargo-outdated "rustic-cargo" "Use 'cargo outdated' to list outdated packages in `tabulated-list-mode'.
Execute process in PATH.

(fn &optional PATH)" t nil)(autoload 'rustic-cargo-reload-outdated "rustic-cargo" "Update list of outdated packages." t nil)(autoload 'rustic-cargo-mark-upgrade "rustic-cargo" "Mark an upgradable package." t nil)(autoload 'rustic-cargo-mark-all-upgrades "rustic-cargo" "Mark all upgradable packages in the Package Menu." t nil)(autoload 'rustic-cargo-menu-mark-unmark "rustic-cargo" "Clear any marks on a package." t nil)(autoload 'rustic-cargo-upgrade-execute "rustic-cargo" "Perform marked menu actions." t nil)(autoload 'rustic-cargo-new "rustic-cargo" "Run 'cargo new' to start a new package in the path specified by PROJECT-PATH.
If BIN is not nil, create a binary application, otherwise a library.

(fn PROJECT-PATH &optional BIN)" t nil)(autoload 'rustic-cargo-init "rustic-cargo" "Run 'cargo init' to initialize a directory in the path specified by PROJECT-PATH.
If BIN is not nil, create a binary application, otherwise a library.

(fn PROJECT-PATH &optional BIN)" t nil)(autoload 'rustic-cargo-build "rustic-cargo" "Run 'cargo build' for the current project." t nil)(autoload 'rustic-run-shell-command "rustic-cargo" "Run an arbitrary shell command for the current project.
Example: use it to provide an environment variable to your application like this `env MYVAR=1 cargo run' so that it can read it at the runtime.
As a byproduct, you can run any shell command in your project like `pwd'

(fn &optional ARG)" t nil)(autoload 'rustic-cargo-run "rustic-cargo" "Run 'cargo run' for the current project.
If running with prefix command `C-u', read whole command from minibuffer.

(fn &optional ARG)" t nil)(autoload 'rustic-cargo-clean "rustic-cargo" "Run 'cargo clean' for the current project." t nil)(autoload 'rustic-cargo-check "rustic-cargo" "Run 'cargo check' for the current project." t nil)(autoload 'rustic-cargo-bench "rustic-cargo" "Run 'cargo bench' for the current project." t nil)(autoload 'rustic-cargo-build-doc "rustic-cargo" "Build the documentation for the current project." t nil)(autoload 'rustic-cargo-doc "rustic-cargo" "Open the documentation for the current project in a browser.
The documentation is built if necessary." t nil)(autoload 'rustic-cargo-add "rustic-cargo" "Add crate to Cargo.toml using 'cargo add'.
If running with prefix command `C-u', read whole command from minibuffer.

(fn &optional ARG)" t nil)(autoload 'rustic-cargo-rm "rustic-cargo" "Remove crate from Cargo.toml using 'cargo rm'.
If running with prefix command `C-u', read whole command from minibuffer.

(fn &optional ARG)" t nil)(autoload 'rustic-cargo-upgrade "rustic-cargo" "Upgrade dependencies as specified in the local manifest file using 'cargo upgrade'.
If running with prefix command `C-u', read whole command from minibuffer.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-cargo" '("rustic-")))(autoload 'rustic-compile "rustic-compile" "Compile rust project.

If `compilation-read-command' is non-nil or if called with prefix
argument ARG then read the command in the minibuffer.  Otherwise
use `rustic-compile-command'.

In either store the used command in `compilation-arguments'.

(fn &optional ARG)" t nil)(autoload 'rustic-recompile "rustic-compile" "Re-compile the program using `compilation-arguments'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-compile" '("rust")))(autoload 'rustic-doc-dumb-search "rustic-doc" "Search all projects and std for SEARCH-TERM.
Use this when `rustic-doc-search' does not find what you're looking for.
Add `universal-argument' to only search level 1 headers.
See `rustic-doc-search' for more information.

(fn SEARCH-TERM)" t nil)(autoload 'rustic-doc-search "rustic-doc" "Search the rust documentation for SEARCH-TERM.
Only searches in headers (structs, functions, traits, enums, etc)
to limit the number of results.
To limit search results to only level 1 headers, add `universal-argument'
Level 1 headers are things like struct or enum names.
if ROOT is non-nil the search is performed from the root dir.
This function tries to be smart and limits the search results
as much as possible. If it ends up being so smart that
it doesn't manage to find what you're looking for, try `rustic-doc-dumb-search'.

(fn SEARCH-TERM &optional ROOT)" t nil)(autoload 'rustic-doc-convert-current-package "rustic-doc" "Convert the documentation for a project and its dependencies." t nil)(autoload 'rustic-doc-setup "rustic-doc" "Setup or update rustic-doc filter and convert script. Convert std." t nil)(autoload 'rustic-doc-mode "rustic-doc" "Convert rust html docs to .org, and browse the converted docs.

If called interactively, enable Rustic-Doc mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-doc" '("rustic-doc-")))(autoload 'rustic-flycheck-setup "rustic-flycheck" "Setup Rust in Flycheck.

If the current file is part of a Cargo project, configure
Flycheck according to the Cargo project layout." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-flycheck" '("rustic-flycheck-")))(autoload 'rustic-indent-line "rustic-interaction" nil t nil)(autoload 'rustic-promote-module-into-dir "rustic-interaction" "Promote the module file visited by the current buffer into its own directory.

For example, if the current buffer is visiting the file `foo.rs',
then this function creates the directory `foo' and renames the
file to `foo/mod.rs'.  The current buffer will be updated to
visit the new file." t nil)(autoload 'rustic-open-dependency-file "rustic-interaction" "Open the 'Cargo.toml' file at the project root if the current buffer is
visiting a project." t nil)(autoload 'rustic-beginning-of-defun "rustic-interaction" "Move backward to the beginning of the current defun.

With ARG, move backward multiple defuns.  Negative ARG means
move forward.

This is written mainly to be used as `beginning-of-defun-function' for Rust.
Don't move to the beginning of the line. `beginning-of-defun',
which calls this, does that afterwards.

(fn &optional ARG REGEX)" t nil)(autoload 'rustic-end-of-defun "rustic-interaction" "Move forward to the next end of defun.

With argument, do it that many times.
Negative argument -N means move back to Nth preceding end of defun.

Assume that this is called after beginning-of-defun. So point is
at the beginning of the defun body.

This is written mainly to be used as `end-of-defun-function' for Rust." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-interaction" '("rustic-")))(autoload 'rustic-analyzer-macro-expand "rustic-lsp" "Default method for displaying macro expansion results.

(fn RESULT)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-lsp" '("rustic-")))(autoload 'rustic-playpen "rustic-playpen" "Create a shareable URL for the contents of the current region,
src-block or buffer on the Rust playpen.

(fn BEGIN END)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-playpen" '("rustic-")))(autoload 'rustic-popup "rustic-popup" "Setup popup.
If directory is not in a rust project call `read-directory-name'." t nil)(autoload 'rustic-popup-invoke-popup-action "rustic-popup" "Execute commands which are listed in `rustic-popup-commands'.

(fn EVENT)" t nil)(autoload 'rustic-popup-default-action "rustic-popup" "Change backtrace and `compilation-arguments' when executed on
corresponding line." t nil)(autoload 'rustic-popup-cargo-command-help "rustic-popup" "Display help buffer for cargo command at point." t nil)(autoload 'rustic-popup-kill-help-buffer "rustic-popup" "Kill popup help buffer and switch to popup buffer." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-popup" '("rustic-popup-")))(autoload 'rustic-racer-describe "rustic-racer" "Show a *Racer Help* buffer for the function or type at point." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-racer" '("racer-src-button" "rustic-racer-")))(autoload 'rustic-rustfix "rustic-rustfix" "Run 'cargo fix'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-rustfix" '("rustic-rustfix-")))(autoload 'rustic-cargo-fmt "rustic-rustfmt" "Use rustfmt via cargo." t nil)(autoload 'rustic-format-region "rustic-rustfmt" "Format the current active region using rustfmt.

This operation requires a nightly version of rustfmt.

(fn BEGIN END)" t nil)(autoload 'rustic-format-buffer "rustic-rustfmt" "Format the current buffer using rustfmt.

Provide optional argument NO-STDIN for `rustic-before-save-hook' since there
were issues when using stdin for formatting." t nil)(autoload 'rustic-format-file "rustic-rustfmt" "Unlike `rustic-format-buffer' format file directly and revert the buffer.

(fn &optional FILE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rustic-rustfmt" '("rustic-")))(autoload 'xterm-color-filter-strip "xterm-color" "Translate ANSI color sequences in STRING into text properties.
Return new STRING with text properties applied.

In order to get maximum performance, this function strips text properties
if they are present in STRING.

(fn STRING)" nil nil)(autoload 'xterm-color-filter "xterm-color" "Translate ANSI color sequences in STRING into text properties.
Return new STRING with text properties applied.

This function checks if `xterm-color-preserve-properties' is non-nil
and only calls `xterm-color-filter-strip' on substrings that do not
have text properties applied (passing through the rest unmodified).
Preserving properties in this fashion is not very robust as there may
be situations where text properties are applied on ANSI data, which
will desync the state machine.

Preserving properties works ok with and is really meant for eshell.

This can be inserted into `comint-preoutput-filter-functions'.

(fn STRING)" nil nil)(autoload 'xterm-color-256 "xterm-color" "

(fn COLOR)" nil nil)(autoload 'xterm-color-colorize-buffer "xterm-color" "Apply `xterm-color-filter' to current buffer, and replace its contents.
Colors are applied using 'face, unless font-lock-mode is active, in
which case 'font-lock-face is used. Operation with font-lock mode active
is not recommended.

If USE-OVERLAYS is non-nil, colors are applied to the buffer using overlays
instead of text properties. A C-u prefix arg causes overlays to be used.

(fn &optional USE-OVERLAYS)" t nil)(autoload 'xterm-color-clear-cache "xterm-color" "Clear xterm color face attribute cache.
You may want to call this if you change `xterm-color-names' or
`xterm-color-names-bright' at runtime and you want to see the changes
take place in a pre-existing buffer that has had xterm-color initialized.

Since the cache is buffer-local and created on-demand when needed, this has no
effect when called from a buffer that does not have a cache." t nil)(autoload 'xterm-color-test "xterm-color" "Create, display and render a new buffer containing ANSI control sequences." t nil)(autoload 'xterm-color-test-raw "xterm-color" "Create and display a new buffer containing ANSI SGR control sequences.
ANSI sequences are not processed. One can use a different Emacs package,
such as ansi-color.el to do so. This is really meant to be used for easy
comparisons/benchmarks with libraries that offer similar functionality." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xterm-color" '("+xterm-color--table-256+" "xterm-color-")))(autoload 'racer-find-definition "racer" "Run the racer find-definition command and process the results." t nil)(autoload 'racer-find-definition-other-window "racer" "Run the racer find-definition command and process the results." t nil)(autoload 'racer-find-definition-other-frame "racer" "Run the racer find-definition command and process the results." t nil)(autoload 'racer-mode "racer" "Minor mode for racer.

If called interactively, enable Racer mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racer" '("racer-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-cargo" '("rust-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-compile" '("cargo-compilation-regexps" "rustc-")))(autoload 'rust-mode "rust-mode" "Major mode for Rust code.

\\{rust-mode-map}

(fn)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-mode" '("rust-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-playpen" '("rust-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-rustfmt" '("rust-")))(autoload 'rust-dbg-wrap-or-unwrap "rust-utils" "Either remove or add the dbg! macro." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rust-utils" '("rust-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pos-tip" '("pos-tip-")))(autoload 'company-shell-rebuild-cache "company-shell" "Builds the cache of all completions found on the $PATH and all fish functions." t nil)(autoload 'company-fish-shell "company-shell" "Company backend for fish shell functions.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-shell "company-shell" "Company mode backend for binaries found on the $PATH.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-shell-env "company-shell" "Company backend for environment variables.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-shell" '("company-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "calfw" '("cfw:")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "calfw-org" '("cfw:o")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "calfw-cal" '("cfw:")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "calfw-ical" '("cfw:")))(autoload 'org-gcal-sync "org-gcal" "Import events from calendars.
Export the ones to the calendar if unless
SKIP-EXPORT.  Set SILENT to non-nil to inhibit notifications.

(fn &optional SKIP-EXPORT SILENT)" t nil)(autoload 'org-gcal-fetch "org-gcal" "Fetch event data from google calendar." t nil)(autoload 'org-gcal-sync-buffer "org-gcal" "Sync entries with Calendar events in currently-visible portion of buffer.

Updates events on the server unless SKIP-EXPORT is set. In this case, events
modified on the server will overwrite entries in the buffer.
Set SILENT to non-nil to inhibit notifications.
Set FILTER-DATE to only update events scheduled for later than
‘org-gcal-up-days' and earlier than ‘org-gcal-down-days'.
Set FILTER-MAANGED to only update events with ‘org-gcal-managed-property’ set
to “org”.

(fn &optional SKIP-EXPORT SILENT FILTER-DATE FILTER-MANAGED)" t nil)(autoload 'org-gcal-fetch-buffer "org-gcal" "Fetch changes to events in the currently-visible portion of the buffer

Unlike ‘org-gcal-sync-buffer’, this will not push any changes to Google
Calendar. For SILENT and FILTER-DATE see ‘org-gcal-sync-buffer’.

(fn &optional SILENT FILTER-DATE)" t nil)(autoload 'org-gcal-toggle-debug "org-gcal" "Toggle debugging flags for ‘org-gcal'." t nil)(autoload 'org-gcal-post-at-point "org-gcal" "Post entry at point to current calendar.

This overwrites the event on the server with the data from the entry, except if
the ‘org-gcal-etag-property’ is present and is out of sync with the server, in
which case the entry is overwritten with data from the server instead.

If SKIP-IMPORT is not nil, don’t overwrite the entry with data from the server.
If SKIP-EXPORT is not nil, don’t overwrite the event on the server.
For valid values of EXISTING-MODE see
‘org-gcal-managed-post-at-point-update-existing'.

(fn &optional SKIP-IMPORT SKIP-EXPORT EXISTING-MODE)" t nil)(autoload 'org-gcal-delete-at-point "org-gcal" "Delete entry at point to current calendar." t nil)(autoload 'org-gcal-sync-tokens-clear "org-gcal" "Clear all Calendar API sync tokens.

  Use this to force retrieving all events in ‘org-gcal-sync’ or
  ‘org-gcal-fetch’." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-gcal" '("org-gcal-")))(autoload 'org-generic-id-get "org-generic-id" "Get the ID-PROP property of the entry at point-or-marker POM.
If POM is nil, refer to the entry at point.
If the entry does not have an ID, the function returns nil.
In any case, the ID of the entry is returned.

(fn &optional ID-PROP POM)" nil nil)(autoload 'org-generic-id-find "org-generic-id" "Return the location of the entry with property ID-PROP, value ID.
The return value is a cons cell (file-name . position), or nil
if there is no entry with that ID.
With optional argument MARKERP, return the position as a new marker.

Normally, if an entry with ID is not found, this function will run
‘org-generic-id-update-id-locations' in order to pick up any updates to the
files, and then search again, before concluding an ID can’t be found. If
CACHED is passed, that function will not be run.

Normally the ID will be searched for in the current buffer before updating ID
locations. This behavior can be disabled with NO-FALLBACK.

(fn ID-PROP ID &optional MARKERP CACHED NO-FALLBACK)" nil nil)(autoload 'org-generic-id-update-id-locations "org-generic-id" "Scan relevant files for IDs.
Store the relation between files and corresponding IDs.
This will scan all agenda files, all associated archives, and all
files currently mentioned in `org-generic-id-locations'.
When FILES is given, scan also these files.

(fn ID-PROP &optional FILES SILENT)" t nil)(autoload 'org-generic-id-locations-load "org-generic-id" "Read the data from `org-generic-id-locations-file'." nil nil)(autoload 'org-generic-id-add-location "org-generic-id" "Add the ID with location FILE to the database of ID locations.

(fn ID-PROP ID FILE)" nil nil)(autoload 'org-generic-id-find-id-file "org-generic-id" "Query the id database for the file in which this ID is located.

If NO-FALLBACK is set, don’t fall back to current buffer if not found in
‘org-generic-id-locations’.

(fn ID-PROP ID &optional NO-FALLBACK)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-generic-id" '("org-generic-id-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "request-deferred" '("request-deferred")))(autoload 'alert-add-rule "alert" "Programmatically add an alert configuration rule.

Normally, users should custoimze `alert-user-configuration'.
This facility is for module writers and users that need to do
things the Lisp way.

Here is a rule the author currently uses with ERC, so that the
fringe gets colored whenever people chat on BitlBee:

(alert-add-rule :status   \\='(buried visible idle)
                :severity \\='(moderate high urgent)
                :mode     \\='erc-mode
                :predicate
                #\\='(lambda (info)
                    (string-match (concat \"\\\\`[^&].*@BitlBee\\\\\\='\")
                                  (erc-format-target-and/or-network)))
                :persistent
                #\\='(lambda (info)
                    ;; If the buffer is buried, or the user has been
                    ;; idle for `alert-reveal-idle-time' seconds,
                    ;; make this alert persistent.  Normally, alerts
                    ;; become persistent after
                    ;; `alert-persist-idle-time' seconds.
                    (memq (plist-get info :status) \\='(buried idle)))
                :style \\='fringe
                :continue t)

(fn &key SEVERITY STATUS MODE CATEGORY TITLE MESSAGE PREDICATE ICON (STYLE alert-default-style) PERSISTENT CONTINUE NEVER-PERSIST APPEND)" nil nil)(autoload 'alert "alert" "Alert the user that something has happened.
MESSAGE is what the user will see.  You may also use keyword
arguments to specify additional details.  Here is a full example:

(alert \"This is a message\"
       :severity \\='high          ;; The default severity is `normal'
       :title \"Title\"           ;; An optional title
       :category \\='example       ;; A symbol to identify the message
       :mode \\='text-mode         ;; Normally determined automatically
       :buffer (current-buffer) ;; This is the default
       :data nil                ;; Unused by alert.el itself
       :persistent nil          ;; Force the alert to be persistent;
                                ;; it is best not to use this
       :never-persist nil       ;; Force this alert to never persist
       :id \\='my-id)              ;; Used to replace previous message of
                                ;; the same id in styles that support it
       :style \\='fringe)          ;; Force a given style to be used;
                                ;; this is only for debugging!

If no :title is given, the buffer-name of :buffer is used.  If
:buffer is nil, it is the current buffer at the point of call.

:data is an opaque value which modules can pass through to their
own styles if they wish.

Here are some more typical examples of usage:

  ;; This is the most basic form usage
  (alert \"This is an alert\")

  ;; You can adjust the severity for more important messages
  (alert \"This is an alert\" :severity \\='high)

  ;; Or decrease it for purely informative ones
  (alert \"This is an alert\" :severity \\='trivial)

  ;; Alerts can have optional titles.  Otherwise, the title is the
  ;; buffer-name of the (current-buffer) where the alert originated.
  (alert \"This is an alert\" :title \"My Alert\")

  ;; Further, alerts can have categories.  This allows users to
  ;; selectively filter on them.
  (alert \"This is an alert\" :title \"My Alert\"
         :category \\='some-category-or-other)

(fn MESSAGE &key (SEVERITY \\='normal) TITLE ICON CATEGORY BUFFER MODE DATA STYLE PERSISTENT NEVER-PERSIST ID)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "alert" '("alert-" "x-urgen")))(autoload 'gntp-notify "gntp" "Send notification NAME with TITLE, TEXT, PRIORITY and ICON to SERVER:PORT.
PORT defaults to `gntp-server-port'

(fn NAME TITLE TEXT SERVER &optional PORT PRIORITY ICON)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gntp" '("gntp-")))(autoload 'log4e-mode "log4e" "Major mode for browsing a buffer made by log4e.

\\<log4e-mode-map>
\\{log4e-mode-map}

(fn)" t nil)(autoload 'log4e:insert-start-log-quickly "log4e" "Insert logging statment for trace level log at start of current function/macro." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "log4e" '("log4e")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "persist" '("persist-")))(autoload 'drag-stuff-up "drag-stuff" "Drag stuff ARG lines up.

(fn ARG)" t nil)(autoload 'drag-stuff-down "drag-stuff" "Drag stuff ARG lines down.

(fn ARG)" t nil)(autoload 'drag-stuff-right "drag-stuff" "Drag stuff ARG lines to the right.

(fn ARG)" t nil)(autoload 'drag-stuff-left "drag-stuff" "Drag stuff ARG lines to the left.

(fn ARG)" t nil)(autoload 'drag-stuff-mode "drag-stuff" "Drag stuff around.

If called interactively, enable Drag-Stuff mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'turn-on-drag-stuff-mode "drag-stuff" "Turn on `drag-stuff-mode'." t nil)(autoload 'turn-off-drag-stuff-mode "drag-stuff" "Turn off `drag-stuff-mode'." t nil)(put 'drag-stuff-global-mode 'globalized-minor-mode t)(defvar drag-stuff-global-mode nil "Non-nil if Drag-Stuff-Global mode is enabled.
See the `drag-stuff-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `drag-stuff-global-mode'.")(autoload 'drag-stuff-global-mode "drag-stuff" "Toggle Drag-Stuff mode in all buffers.
With prefix ARG, enable Drag-Stuff-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Drag-Stuff mode is enabled in all buffers where
`turn-on-drag-stuff-mode' would do it.
See `drag-stuff-mode' for more information on Drag-Stuff mode.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "drag-stuff" '("drag-stuff-")))(autoload 'link-hint-define-type "link-hint" "Add a new type of link called NAME to link-hint.el.
PROPERTIES should be property value pairs to add to the symbol plist of
link-hint-NAME.

(fn NAME &rest PROPERTIES)" nil nil)(function-put 'link-hint-define-type 'lisp-indent-function 'defun)(autoload 'link-hint-open-link "link-hint" "Use avy to open a visible link." t nil)(autoload 'link-hint-copy-link "link-hint" "Copy a visible link of a supported type to the kill ring with avy.
`select-enable-clipboard' and `select-enable-primary' can be set to non-nil
values to copy the link to the clipboard and/or primary as well." t nil)(autoload 'link-hint-open-multiple-links "link-hint" "Use avy to open multiple visible links at once." t nil)(autoload 'link-hint-copy-multiple-links "link-hint" "Use avy to copy multiple visible links at once to the kill ring." t nil)(autoload 'link-hint-open-all-links "link-hint" "Open all visible links." t nil)(autoload 'link-hint-copy-all-links "link-hint" "Copy all visible links." t nil)(autoload 'link-hint-open-link-at-point "link-hint" "Open the link with the highest priority at the point." t nil)(autoload 'link-hint-copy-link-at-point "link-hint" "Copy the link with the highest priority at the point." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "link-hint" '("link-hint-")))(put 'org-superstar-leading-bullet 'safe-local-variable #'char-or-string-p)(autoload 'org-superstar-toggle-lightweight-lists "org-superstar" "Toggle syntax checking for plain list items.

Disabling syntax checking will cause Org Superstar to display
lines looking like plain lists (for example in code) like plain
lists.  However, this may cause significant speedup for org files
containing several hundred list items." t nil)(autoload 'org-superstar-mode "org-superstar" "Use UTF8 bullets for headlines and plain lists.

If called interactively, enable Org-Superstar mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-superstar" '("org-superstar-")))(autoload 'olivetti-mode "olivetti" "Olivetti provides a nice writing environment.
Window margins are set to relative widths to accomodate a text
body width set with `olivetti-body-width'.

If called interactively, enable Olivetti mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "olivetti" '("olivetti-")))(autoload 'evil-better-visual-line-next-line "evil-better-visual-line")(autoload 'evil-better-visual-line-previous-line "evil-better-visual-line")(autoload 'evil-better-visual-line-on "evil-better-visual-line" "Quickly bind `evil-better-visual-line-previous-line' and `evil-better-visual-line-previous-line' to j and k." t nil)(autoload 'org-variable-pitch-minor-mode "org-variable-pitch" "Set up the buffer to be partially in variable pitch.
Keeps some elements in fixed pitch in order to keep layout.

If called interactively, enable Org-Variable-Pitch minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'org-variable-pitch-setup "org-variable-pitch" "Set up ‘org-variable-pitch-minor-mode’.

This function is a helper to set up OVP.  It syncs
‘org-variable-pitch-fixed-face’ with ‘default’ face, and adds a
hook to ‘org-mode-hook’.  Ideally, you’d want to run this
function somewhere after you set up ‘default’ face.

A nice place to call this function is from within
‘after-init-hook’:

    (add-hook 'after-init-hook #'org-variable-pitch-setup)

Alternatively, you might want to manually set up the attributes
of ‘org-variable-pitch-fixed-face’, in which case you should
calling avoid this function, add ‘org-variable-pitch-minor-mode’
to ‘org-mode-hook’ manually, and set up the face however you
please." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-variable-pitch" '("org-variable-pitch-")))(autoload 'mixed-pitch-mode "mixed-pitch" "Change the default face of the current buffer to a variable pitch, while keeping some faces fixed pitch.

If called interactively, enable Mixed-Pitch mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

See the variable `mixed-pitch-fixed-pitch-faces' for a list of
which faces remain fixed pitch. The height and pitch of faces is
inherited from `variable-pitch' and `default'.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mixed-pitch" '("mixed-pitch-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam" '("org-roam-")))(autoload 'org-roam-capture- "org-roam-capture" "Main entry point of `org-roam-capture' module.
GOTO and KEYS correspond to `org-capture' arguments.
INFO is a plist for filling up Org-roam's capture templates.
NODE is an `org-roam-node' construct containing information about the node.
PROPS is a plist containing additional Org-roam properties for each template.
TEMPLATES is a list of org-roam templates.

(fn &key GOTO KEYS NODE INFO PROPS TEMPLATES)" nil nil)(autoload 'org-roam-capture "org-roam-capture" "Launches an `org-capture' process for a new or existing node.
This uses the templates defined at `org-roam-capture-templates'.
Arguments GOTO and KEYS see `org-capture'.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)
The INFO, if provided, is passed along to the underlying `org-roam-capture-'.

(fn &optional GOTO KEYS &key FILTER-FN TEMPLATES INFO)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-capture" '("org-roam-capture-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-compat" '("org-roam--")))(autoload 'org-roam-dailies-capture-today "org-roam-dailies" "Create an entry in the daily-note for today.
When GOTO is non-nil, go the note without creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional GOTO KEYS)" t nil)(autoload 'org-roam-dailies-goto-today "org-roam-dailies" "Find the daily-note for today, creating it if necessary.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional KEYS)" t nil)(autoload 'org-roam-dailies-capture-tomorrow "org-roam-dailies" "Create an entry in the daily-note for tomorrow.

With numeric argument N, use the daily-note N days in the future.

With a `C-u' prefix or when GOTO is non-nil, go the note without
creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional GOTO KEYS)" t nil)(autoload 'org-roam-dailies-goto-tomorrow "org-roam-dailies" "Find the daily-note for tomorrow, creating it if necessary.

With numeric argument N, use the daily-note N days in the
future.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional KEYS)" t nil)(autoload 'org-roam-dailies-capture-yesterday "org-roam-dailies" "Create an entry in the daily-note for yesteday.

With numeric argument N, use the daily-note N days in the past.

When GOTO is non-nil, go the note without creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional GOTO KEYS)" t nil)(autoload 'org-roam-dailies-goto-yesterday "org-roam-dailies" "Find the daily-note for yesterday, creating it if necessary.

With numeric argument N, use the daily-note N days in the
future.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional KEYS)" t nil)(autoload 'org-roam-dailies-capture-date "org-roam-dailies" "Create an entry in the daily-note for a date using the calendar.
Prefer past dates, unless PREFER-FUTURE is non-nil.
With a `C-u' prefix or when GOTO is non-nil, go the note without
creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional GOTO PREFER-FUTURE KEYS)" t nil)(autoload 'org-roam-dailies-goto-date "org-roam-dailies" "Find the daily-note for a date using the calendar, creating it if necessary.
Prefer past dates, unless PREFER-FUTURE is non-nil.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional PREFER-FUTURE KEYS)" t nil)(autoload 'org-roam-dailies-find-directory "org-roam-dailies" "Find and open `org-roam-dailies-directory'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-dailies" '("org-roam-dailies-")))(autoload 'org-roam-db-sync "org-roam-db" "Synchronize the cache state with the current Org files on-disk.
If FORCE, force a rebuild of the cache from scratch.

(fn &optional FORCE)" t nil)(defvar org-roam-db-autosync-mode nil "Non-nil if Org-Roam-Db-Autosync mode is enabled.
See the `org-roam-db-autosync-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-roam-db-autosync-mode'.")(autoload 'org-roam-db-autosync-mode "org-roam-db" "Global minor mode to keep your Org-roam session automatically synchronized.
Through the session this will continue to setup your
buffers (that are Org-roam file visiting), keep track of the
related changes, maintain cache consistency and incrementally
update the currently active database.

If called interactively, enable Org-Roam-Db-Autosync mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

If you need to manually trigger resync of the currently active
database, see `org-roam-db-sync' command.

(fn &optional ARG)" t nil)(autoload 'org-roam-db-autosync-enable "org-roam-db" "Activate `org-roam-db-autosync-mode'." nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-db" '("emacsql-constraint" "org-roam-d")))(autoload 'org-roam-graph "org-roam-graph" "Build and possibly display a graph for NODE.
ARG may be any of the following values:
  - nil       show the graph.
  - `\\[universal-argument]'     show the graph for NODE.
  - `\\[universal-argument]' N   show the graph for NODE limiting nodes to N steps.

(fn &optional ARG NODE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-graph" '("org-roam-")))(autoload 'org-roam-update-org-id-locations "org-roam-id" "Scan Org-roam files to update `org-id' related state.
This is like `org-id-update-id-locations', but will automatically
use the currently bound `org-directory' and `org-roam-directory'
along with DIRECTORIES (if any), where the lookup for files in
these directories will be always recursive.

Note: Org-roam doesn't have hard dependency on
`org-id-locations-file' to lookup IDs for nodes that are stored
in the database, but it still tries to properly integrates with
`org-id'. This allows the user to cross-reference IDs outside of
the current `org-roam-directory', and also link with \"id:\"
links to headings/files within the current `org-roam-directory'
that are excluded from identification in Org-roam as
`org-roam-node's, e.g. with \"ROAM_EXCLUDE\" property.

(fn &rest DIRECTORIES)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-id" '("org-roam-id-")))(autoload 'org-roam-migrate-wizard "org-roam-migrate" "Migrate all notes from to be compatible with Org-roam v2.
1. Convert all notes from v1 format to v2.
2. Rebuild the cache.
3. Replace all file links with ID links." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-migrate" '("org-roam-migrate-")))(autoload 'org-roam-buffer-display-dedicated "org-roam-mode" "Launch NODE dedicated Org-roam buffer.
Unlike the persistent `org-roam-buffer', the contents of this
buffer won't be automatically changed and will be held in place.

In interactive calls prompt to select NODE, unless called with
`universal-argument', in which case NODE will be set to
`org-roam-node-at-point'.

(fn NODE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-mode" '("org-roam-")))(autoload 'org-roam-node-find "org-roam-node" "Find and open an Org-roam node by its title or alias.
INITIAL-INPUT is the initial input for the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
If OTHER-WINDOW, visit the NODE in another window.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)

(fn &optional OTHER-WINDOW INITIAL-INPUT FILTER-FN &key TEMPLATES)" t nil)(autoload 'org-roam-node-random "org-roam-node" "Find and open a random Org-roam node.
With prefix argument OTHER-WINDOW, visit the node in another
window instead.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.

(fn &optional OTHER-WINDOW FILTER-FN)" t nil)(autoload 'org-roam-node-insert "org-roam-node" "Find an Org-roam node and insert (where the point is) an \"id:\" link to it.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)
The INFO, if provided, is passed to the underlying `org-roam-capture-'.

(fn &optional FILTER-FN &key TEMPLATES INFO)" t nil)(autoload 'org-roam-refile "org-roam-node" "Refile node at point to an Org-roam node.
If region is active, then use it instead of the node at point." t nil)(autoload 'org-roam-extract-subtree "org-roam-node" "Convert current subtree at point to a node, and extract it into a new file." t nil)(autoload 'org-roam-ref-find "org-roam-node" "Find and open an Org-roam node that's dedicated to a specific ref.
INITIAL-INPUT is the initial input to the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.

(fn &optional INITIAL-INPUT FILTER-FN)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-node" '("org-roam-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-overlay" '("org-roam-overlay-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-protocol" '("org-roam-")))(autoload 'org-roam-version "org-roam-utils" "Return `org-roam' version.
Interactively, or when MESSAGE is non-nil, show in the echo area.

(fn &optional MESSAGE)" t nil)(autoload 'org-roam-diagnostics "org-roam-utils" "Collect and print info for `org-roam' issues." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-utils" '("org-roam-")))(defvar org-roam-ui-mode nil "Non-nil if Org-Roam-Ui mode is enabled.
See the `org-roam-ui-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-roam-ui-mode'.")(autoload 'org-roam-ui-mode "org-roam-ui" "Enable org-roam-ui.
This serves the web-build and API over HTTP.

If called interactively, enable Org-Roam-Ui mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'org-roam-ui-open "org-roam-ui" "Ensure `org-roam-ui' is running, then open the `org-roam-ui' webpage." t nil)(autoload 'org-roam-ui-node-zoom "org-roam-ui" "Move the view of the graph to current node.
or optionally a node of your choosing.
Optionally takes three arguments:
The ID of the node you want to travel to.
The SPEED in ms it takes to make the transition.
The PADDING around the nodes in the viewport.

(fn &optional ID SPEED PADDING)" t nil)(autoload 'org-roam-ui-node-local "org-roam-ui" "Open the local graph view of the current node.
Optionally with ID (string), SPEED (number, ms) and PADDING (number, px).

(fn &optional ID SPEED PADDING)" t nil)(autoload 'org-roam-ui-sync-theme "org-roam-ui" "Sync your current Emacs theme with org-roam-ui." t nil)(defvar org-roam-ui-follow-mode nil "Non-nil if Org-Roam-Ui-Follow mode is enabled.
See the `org-roam-ui-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-roam-ui-follow-mode'.")(autoload 'org-roam-ui-follow-mode "org-roam-ui" "Set whether ORUI should follow your every move in Emacs.

If called interactively, enable Org-Roam-Ui-Follow mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-ui" '("img/:file" "node/:id" "org-roam-ui-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "websocket" '("websocket-")))(autoload 'orb-anystyle "orb-anystyle" "Run anystyle COMMAND with `shell-command'.
ARGS is a plist with the following recognized keys:

Anystyle CLI options
==========
1) EXEC :exec      => string (valid executable)
- default value can be set through `orb-anystyle-executable'

2) COMMAND :command   => symbol or string
- valid values: find parse help check license train

3) Global options can be passed with the following keys.

FMODEL    :finder-model => string (valid file path)
PMODEL    :parser-model => string (valid file path)
PDFINFO   :pdfinfo      => string (valid executable)
PDFTOTEXT :pdftotext    => string (valid executable)
ADAPTER   :adapter      => anything
STDOUT    :stdout       => boolean
HELP      :help         => boolean
VERBOSE   :verbose      => boolean
VERSION   :version      => boolean
OVERWRITE :overwrite    => boolean
FORMAT    :format       => string, symbol or list of unquoted symbols

- FORMAT must be one or more output formats accepted by anystyle commands:
  parse => bib csl json ref txt xml
  find  => bib csl json ref txt ttx xml
- string must be space- or comma-separated, additional spaces are
  ignored

Default values for some of these options can be set globally via
the following variables: `orb-anystyle-finder-model',
`orb-anystyle-parser-model', `orb-anystyle-pdfinfo-executable',
`orb-anystyle-pdftotext-executable'.

4) Command options can be passed with the following keys:

CROP   :crop         => integer or cons cell of integers
LAYOUT :layout       => boolean
SOLO   :solo         => boolean

- Command options are ignored for commands other than find
- anystyle help -c flag is not supported

Default values for these options can be set globally via the
following variables: `orb-anystyle-find-crop',
`orb-anystyle-find-layout', `orb-anystyle-find-solo'.

5) INPUT  :input   => string (file path)

6) OUTPUT :output  => string (file path)

`shell-command'-related options
==========

7) BUFFER :buffer  => buffer-or-name

- `shell-command''s OUTPUT-BUFFER
- can be a cons cell (OUTPUT-BUFFER . ERROR-BUFFER)
- when nil, defaults to `orb-anystyle-default-buffer'

anystyle CLI command synopsis:
anystyle [global options] command [command options] [arguments...].

Homepage: https://anystyle.io
Github: https://github.com/inukshuk/anystyle-cli
Courtesy of its authors.

(fn COMMAND &key (EXEC orb-anystyle-executable) VERBOSE HELP VERSION ADAPTER ((:finder-model FMODEL) orb-anystyle-finder-model) ((:parser-model PMODEL) orb-anystyle-parser-model) (PDFINFO orb-anystyle-pdfinfo-executable) (PDFTOTEXT orb-anystyle-pdftotext-executable) FORMAT STDOUT OVERWRITE (CROP orb-anystyle-find-crop) (SOLO orb-anystyle-find-solo) (LAYOUT orb-anystyle-find-layout) INPUT OUTPUT (BUFFER orb-anystyle-default-buffer))" nil nil)(function-put 'orb-anystyle 'lisp-indent-function '1)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "orb-anystyle" '("orb-anystyle-")))(autoload 'orb-get-attached-file "orb-core" "Look up files associated with a BibTeX entry identified by CITEKEY.
Files are searched for using `bibtex-completion-find-pdf',
meaning that Mendeley, Zotero and plain file paths are all
supported, and variables `bibtex-completion-pdf-field' and
`bibtex-completion-library-path' are respected.  Additionally,
the BibTeX entry is searched for BibDesk-specific file fields
`Bdsk-File-N'.

If `orb-attached-file-extensions' is non-nil, return only file paths
matching the respective extensions.

If `orb-abbreviate-file-name' is non-nil, force an abbreviated
file name.

Depending on the value of `orb-use-bibdesk-attachments', the
BibDesk-specific file fields `Bdsk-File-N' may or may not be used
for the lookup.

If multiple files have been found, the user will be prompted to
select one.

(fn CITEKEY)" nil nil)(autoload 'orb-open-attached-file "orb-core" "Open a file associated with CITEKEY.
CITEKEY must be a list for compatibility with `bibtex-completion'
functions, which also expect a list.

This is a modified and simplified version of `bibtex-completion-open-pdf',
which uses `orb-get-bibdesk-filenames' under the hood and is therefore
compatible with BibDesk.  The file is opened with the function set in
`bibtex-completion-pdf-open-function'.

The intended primary use is with `orb-note-actions'.

(fn CITEKEY)" nil nil)(autoload 'orb-autokey-generate-key "orb-core" "Generate citation key from ENTRY according to `orb-autokey-format'.
Return a string.  If optional CONTROL-STRING is non-nil, use it
instead of `orb-autokey-format'.

(fn ENTRY &optional CONTROL-STRING)" nil nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "orb-core" '("orb-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "orb-helm" '("helm-source-orb-insert" "orb-helm-insert")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "orb-ivy" '("orb-i")))(autoload 'orb-pdf-scrapper-run "orb-pdf-scrapper" "Run Orb PDF Scrapper interactive process.
KEY is note's citation key.

(fn KEY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "orb-pdf-scrapper" '("orb-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "orb-utils" '("orb-")))(autoload 'orb-edit-note "org-roam-bibtex" "Open an Org-roam note associated with the CITEKEY or create a new one.

This function allows to use Org-roam as a backend for managing
bibliography notes.  It relies on `bibtex-completion' to get
retrieve bibliographic information from a BibTeX file.

Implementation details and features:

1. This function first tries to find the note file associated
with the citation key CITEKEY.  A citation key is an Org-roam
'ref' set with the '#+ROAM_KEY:' in-buffer keyword or
':ROAM_REFS:' headline property.  Three types of Org-roam 'ref's
are recognized by ORB: Org-ref v2 'cite:citekey' and Org-ref v3
'cite:&citekey' links, and Org-cite '[cite:@citekey]' citations.

2. If the Org-roam reference was found, the function calls
`org-roam-node-find' passing to it the title associated with the
CITEKEY as retrieved by `bibtex-completion-get-entry'.  The
prompt presented by `org-roam-node-find' will thus be
pre-populated with the record title.

3. Optionally, when `orb-preformat-templates' is non-nil, any
prompt wildcards in `orb-templates' or
`org-roam-capture-templates', associated with the bibtex record
fields as specified in `orb-preformat-templates', will be
preformatted.  Both `org-capture-templates' (%^{}) and
`org-roam-capture-templates' (`s-format', ${}) prompt syntaxes
are supported.

See `orb-preformat-keywords' for more details on how
to properly specify prompts for replacement.

Please pay attention when using this feature that by setting
title for preformatting, it will be impossible to change it in
the `org-roam-node-find' interactive prompt since all the
template expansions will have taken place by then.  All the title
wildcards will be replace with the BibTeX field value.

4. Optionally, if you are using Projectile and Persp-mode and
have a dedicated workspace to work with your Org-roam collection,
you may want to set the perspective name and project path in
`orb-persp-project' and `orb-switch-persp' to t.  In this case,
the perspective will be switched to the Org-roam notes project
before calling any Org-roam functions.

If optional argument ENTRY is non-nil, use it to fetch the
bibliographic information.

(fn CITEKEY)" nil nil)(autoload 'orb-edit-citation-note "org-roam-bibtex" "Edit a note for current Org-cite citation or reference.
If the note does not exist, create a new one.

When used from LISP, if optional ELEMENT is non-nil, use it
instead of the element at point.  ELEMENT should be the Org-cite
citation or reference element.  Providing it allows for quicker
computation.

(fn &optional ELEMENT)" t nil)(autoload 'orb-insert-link "org-roam-bibtex" "Insert a link to an Org-roam bibliography note.
If the note does not exist yet, it will be created using
`orb-edit-note' function.

\\<universal-argument-map>\\<org-roam-bibtex-mode-map> The
customization option `orb-insert-link-description' determines
what will be used as the link's description.  It is possible to
override the default value of the variable with a numerical
prefix ARG:

`C-1' \\[orb-insert-link] will force `title'
`C-2' \\[orb-insert-link] will force `citekey'

`C-0' \\[orb-insert-link] will force `citation-org-ref-2'
`C-9' \\[orb-insert-link] will force `citation-org-ref-3'
`C-8' \\[orb-insert-link] will force `citation-org-cite'

If a region of text is active (selected) when calling `orb-insert-link',
the text in the region will be replaced with the link and the
text string will be used as the link's description — similar to
`org-roam-node-insert'.

Normally, the case of the link description will be preserved.  It
is possible to force lowercase by supplying either one or three
universal arguments `\\[universal-argument]'.

Finally, `bibtex-completion-cache' will be re-populated if either
two or three universal arguments `\\[universal-argument]' are supplied.

The customization option `orb-insert-interface' allows to set the
completion interface backend for the candidates list.

(fn &optional ARG)" t nil)(autoload 'orb-note-actions "org-roam-bibtex" "Run an interactive prompt to offer note-related actions.
The prompt interface can be set in `orb-note-actions-interface'.
In addition to default actions, which are not supposed to be
modified, there is a number of prefined extra actions
`orb-note-actions-extra' that can be customized.  Additionally,
user actions can be set in `orb-note-actions-user'." t nil)(autoload 'orb-org-ref-edit-note "org-roam-bibtex" "Open an Org-roam note associated with the CITEKEY or create a new one.
Set `org-ref-notes-function' to this function if your
bibliography notes are managed by Org-roam and you want some
extra integration between the two packages.

This is a wrapper function around `orb-edit-note' intended for
use with Org-ref.

NOTE: This function is no longer needed for Org-ref v3.

(fn CITEKEY)" nil nil)(autoload 'orb-citar-edit-note "org-roam-bibtex" "Open an Org-roam note associated with the CITEKEY or create a new one.
This is a wrapper function around `orb-edit-note' meant to be used with
`citar-file-open-note-function'.
Argument ENTRY is ignored.

(fn CITEKEY ENTRY)" nil nil)(autoload 'orb-bibtex-completion-edit-note "org-roam-bibtex" "Open or create an Org-roam note.

This is a wrapper function around `orb-edit-note' meant to be
used with `bibtex-completion-edit-notes-function'.

Only the first KEY of the list KEYS will actually be used.  KEY
must be a string.

(fn KEYS)" nil nil)(defvar org-roam-bibtex-mode nil "Non-nil if Org-Roam-Bibtex mode is enabled.
See the `org-roam-bibtex-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-roam-bibtex-mode'.")(autoload 'org-roam-bibtex-mode "org-roam-bibtex" "Sets an appropriate function for editing bibliography notes.
Supports Org-ref, Helm-bibtex/Ivy-bibtex, and Citar.

When called interactively, toggle `org-roam-bibtex-mode'. with
prefix ARG, enable `org-roam-bibtex-mode' if ARG is positive,
otherwise disable it.

When called from Lisp, enable `org-roam-bibtex-mode' if ARG is
omitted, nil, or positive.  If ARG is `toggle', toggle
`org-roam-bibtex-mode'.  Otherwise, behave as if called
interactively.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-roam-bibtex" '("orb-" "org-roam-bibtex-mode-map")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "contrib" '("org-ref-")))(autoload 'doi-utils-async-download-pdf "doi-utils" "Download the PDF for bibtex entry at point asynchronously.
It is not fully async, only the download is. Fully async is
harder because you need to run `doi-utils-get-pdf-url' async
too. " t nil)(autoload 'doi-utils-get-bibtex-entry-pdf "doi-utils" "Download pdf for entry at point if the pdf does not already exist locally.
The entry must have a doi. The pdf will be saved, by the name
%s.pdf where %s is the bibtex label. Files will not be
overwritten. The pdf will be checked to make sure it is a pdf,
and not some html failure page. You must have permission to
access the pdf. We open the pdf at the end if
`doi-utils-open-pdf-after-download' is non-nil.

With one prefix ARG, directly get the pdf from a file (through
`read-file-name') instead of looking up a DOI. With a double
prefix ARG, directly get the pdf from an open buffer (through
`read-buffer-to-switch') instead. These two alternative methods
work even if the entry has no DOI, and the pdf file is not
checked.

(fn &optional ARG)" t nil)(autoload 'doi-utils-add-bibtex-entry-from-doi "doi-utils" "Add DOI entry to end of a file in the current directory.
Pick the file ending with .bib or in .  If you have an active region that
starts like a DOI, that will be the initial prompt.  If no region
is selected and the first entry of the ‘kill-ring’ starts like a
DOI, then that is the intial prompt.  Otherwise, you have to type
or paste in a DOI.
Argument BIBFILE the bibliography to use.

(fn DOI &optional BIBFILE)" t nil)(autoload 'doi-utils-doi-to-org-bibtex "doi-utils" "Convert a DOI to an ‘org-bibtex’ form and insert it at point.

(fn DOI)" t nil)(autoload 'bibtex-set-field "doi-utils" "Set FIELD to VALUE in bibtex file.  create field if it does not exist.
Optional argument NODELIM see `bibtex-make-field'.

(fn FIELD VALUE &optional NODELIM)" t nil)(autoload 'doi-utils-update-bibtex-entry-from-doi "doi-utils" "Update fields in a bibtex entry from the DOI.
Every field will be updated, so previous change will be lost.

(fn DOI)" t nil)(autoload 'doi-utils-update-field "doi-utils" "Update the field at point in the bibtex entry.
Data is retrieved from the doi in the entry." t nil)(autoload 'doi-utils-wos "doi-utils" "Open Web of Science entry for DOI.

(fn DOI)" t nil)(autoload 'doi-utils-wos-citing "doi-utils" "Open Web of Science citing articles entry for DOI.
May be empty if none are found.

(fn DOI)" t nil)(autoload 'doi-utils-wos-related "doi-utils" "Open Web of Science related articles page for DOI.

(fn DOI)" t nil)(autoload 'doi-utils-ads "doi-utils" "Open ADS entry for DOI

(fn DOI)" t nil)(autoload 'doi-utils-open "doi-utils" "Open DOI in browser.

(fn DOI)" t nil)(autoload 'doi-utils-open-bibtex "doi-utils" "Search through variable `bibtex-completion-bibliography' for DOI.

(fn DOI)" t nil)(autoload 'doi-utils-crossref "doi-utils" "Search DOI in CrossRef.

(fn DOI)" t nil)(autoload 'doi-utils-google-scholar "doi-utils" "Google scholar the DOI.

(fn DOI)" t nil)(autoload 'doi-utils-pubmed "doi-utils" "Search Pubmed for the DOI.

(fn DOI)" t nil)(autoload 'doi-utils-crossref-citation-query "doi-utils" "Query Crossref with the title of the bibtex entry at point.
Get a list of possible matches. Choose one with completion." t nil)(autoload 'doi-utils-debug "doi-utils" "Generate an org-buffer showing data about DOI.

(fn DOI)" t nil)(autoload 'doi-utils-add-entry-from-crossref-query "doi-utils" "Search Crossref with QUERY and use completion to select an entry to add to BIBTEX-FILE.

(fn QUERY BIBTEX-FILE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "doi-utils" '("*doi-utils-" "agu-pdf-url" "aip-pdf-url" "aps-pdf-url" "asme-biomechanical-pdf-url" "copernicus-" "crossref-add-bibtex-entry" "doi-" "ecs" "generic-full-pdf-url" "ieee" "iop-pdf-url" "jneurosci-pdf-url" "jstor-pdf-url" "linkinghub-elsevier-pdf-url" "nature-pdf-url" "osa-pdf-url" "pnas-pdf-url" "rsc-pdf-url" "sage-pdf-url" "science-" "siam-pdf-url" "springer-" "tandfonline-pdf-url" "wiley-pdf-url")))(autoload 'nist-webbook-formula "nist-webbook" "Search NIST webbook for FORMULA.

(fn FORMULA)" t nil)(autoload 'nist-webbook-name "nist-webbook" "Search NIST webbook for NAME.

(fn NAME)" t nil)(autoload 'arxiv-add-bibtex-entry "org-ref-arxiv" "Add bibtex entry for ARXIV-NUMBER to BIBFILE.

(fn ARXIV-NUMBER BIBFILE)" t nil)(autoload 'arxiv-get-pdf "org-ref-arxiv" "Retrieve a pdf for ARXIV-NUMBER and save it to PDF.

(fn ARXIV-NUMBER PDF)" t nil)(autoload 'arxiv-get-pdf-add-bibtex-entry "org-ref-arxiv" "Add bibtex entry for ARXIV-NUMBER to BIBFILE.
Remove troublesome chars from the bibtex key, retrieve a pdf
for ARXIV-NUMBER and save it to PDFDIR with the same name of the
key.

(fn ARXIV-NUMBER BIBFILE PDFDIR)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-arxiv" '("arxiv-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-bibliography-links" '("org-ref-")))(autoload 'org-ref-bibtex-generate-longtitles "org-ref-bibtex" "Generate longtitles.bib which are @string definitions.
The full journal names are in `org-ref-bibtex-journal-abbreviations'." t nil)(autoload 'org-ref-bibtex-generate-shorttitles "org-ref-bibtex" "Generate shorttitles.bib which are @string definitions.
The abbreviated journal names in `org-ref-bibtex-journal-abbreviations'." t nil)(autoload 'org-ref-stringify-journal-name "org-ref-bibtex" "Replace journal name in a bibtex entry with a string.
The strings are defined in
`org-ref-bibtex-journal-abbreviations'.  The optional arguments KEY,
START and END allow you to use this with `bibtex-map-entries'

(fn &optional KEY START END)" t nil)(autoload 'org-ref-set-journal-string "org-ref-bibtex" "Set a bibtex journal name to the string that represents FULL-JOURNAL-NAME.
This is defined in `org-ref-bibtex-journal-abbreviations'.

(fn FULL-JOURNAL-NAME)" t nil)(autoload 'org-ref-replace-nonascii "org-ref-bibtex" "Replace non-ascii characters with LaTeX representations in a
bibtex entry." t nil)(autoload 'org-ref-title-case "org-ref-bibtex" "Convert a bibtex entry title and booktitle to title-case.
Convert only if the entry type is a member of the list
`org-ref-title-case-types'. The arguments KEY, START and END are
optional, and are only there so you can use this function with
`bibtex-map-entries' to change all the title entries in articles and
books.

(fn &optional KEY START END)" t nil)(autoload 'org-ref-title-case-article "org-ref-bibtex" "Convert a bibtex entry article or book title to title-case.
The arguments KEY, START and END are optional, and are only there
so you can use this function with `bibtex-map-entries' to change
all the title entries in articles and books.

(fn &optional KEY START END)" t nil)(autoload 'org-ref-sentence-case-article "org-ref-bibtex" "Convert a bibtex entry article title to sentence-case.
The arguments KEY, START and END are optional, and are only there
so you can use this function with `bibtex-map-entries' to change
all the title entries in articles.

(fn &optional KEY START END)" t nil)(autoload 'org-ref-bibtex-next-entry "org-ref-bibtex" "Jump to the beginning of the next bibtex entry.
N is a prefix argument.  If it is numeric, jump that many entries
forward.  Negative numbers do nothing.

(fn &optional N)" t nil)(autoload 'org-ref-bibtex-previous-entry "org-ref-bibtex" "Jump to beginning of the previous bibtex entry.
N is a prefix argument.  If it is numeric, jump that many entries back.

(fn &optional N)" t nil)(autoload 'org-ref-bibtex-visible-entry "org-ref-bibtex" "Jump to visible entry." t nil)(autoload 'org-ref-bibtex-visible-field "org-ref-bibtex" "Jump to visible field." t nil)(autoload 'org-ref-bibtex-format-url-if-doi "org-ref-bibtex" "Hook function to format url to follow the current DOI conventions." t nil)(autoload 'org-ref-bibtex-wos "org-ref-bibtex" "Open bibtex entry in Web Of Science if there is a DOI." t nil)(autoload 'org-ref-bibtex-wos-citing "org-ref-bibtex" "Open citing articles for bibtex entry in Web Of Science if
there is a DOI." t nil)(autoload 'org-ref-bibtex-wos-related "org-ref-bibtex" "Open related articles for bibtex entry in Web Of Science if
there is a DOI." t nil)(autoload 'org-ref-bibtex-crossref "org-ref-bibtex" "Open the bibtex entry in Crossref by its doi." t nil)(autoload 'org-ref-bibtex-google-scholar "org-ref-bibtex" "Open the bibtex entry at point in google-scholar by its doi." t nil)(autoload 'org-ref-bibtex-pubmed "org-ref-bibtex" "Open the bibtex entry at point in Pubmed by its doi." t nil)(autoload 'org-ref-bibtex-pdf "org-ref-bibtex" "Open the pdf for the bibtex entry at point.
Thin wrapper to get `org-ref-bibtex' to open pdf, because it
calls functions with a DOI argument.

(fn &optional _)" t nil)(autoload 'org-ref-bibtex-assoc-pdf-with-entry "org-ref-bibtex" "Prompt for pdf associated with entry at point and rename it.
Check whether a pdf already exists in `bibtex-completion-library' with the
name '[bibtexkey].pdf'. If the file does not exist, rename it to
'[bibtexkey].pdf' using
`org-ref-bibtex-assoc-pdf-with-entry-move-function' and place it in
a directory. Optional PREFIX argument toggles between
`rename-file' and `copy-file'.

(fn &optional PREFIX)" t nil)(autoload 'org-ref-email-bibtex-entry "org-ref-bibtex" "Email current bibtex entry at point and pdf if it exists." t nil)(autoload 'org-ref-set-bibtex-keywords "org-ref-bibtex" "Add KEYWORDS to a bibtex entry.
If KEYWORDS is a list, it is converted to a comma-separated
string.  The KEYWORDS are added to the beginning of the
field.  Otherwise KEYWORDS should be a string of comma-separate
keywords.  Optional argument ARG prefix arg to replace keywords.

(fn KEYWORDS &optional ARG)" t nil)(autoload 'org-ref-extract-bibtex-blocks "org-ref-bibtex" "Extract all bibtex blocks in buffer to BIBFILE.
If BIBFILE exists, append, unless you use a prefix arg (C-u), which
will clobber the file.

(fn BIBFILE)" t nil)(autoload 'org-ref-open-bibtex-pdf "org-ref-bibtex" "Open pdf for a bibtex entry, if it exists." t nil)(autoload 'org-ref-open-bibtex-notes "org-ref-bibtex" "From a bibtex entry, open the notes if they exist." t nil)(autoload 'org-ref-open-in-browser "org-ref-bibtex" "Open the bibtex entry at point in a browser using the url field or doi field." t nil)(autoload 'org-ref-build-full-bibliography "org-ref-bibtex" "Build pdf of all bibtex entries, and open it." t nil)(autoload 'org-ref-sort-bibtex-entry "org-ref-bibtex" "Sort fields of entry in standard order." t nil)(autoload 'org-ref-downcase-bibtex-entry "org-ref-bibtex" "Downcase the entry type and fields." t nil)(autoload 'org-ref-clean-bibtex-entry "org-ref-bibtex" "Clean and replace the key in a bibtex entry.
See functions in `org-ref-clean-bibtex-entry-hook'." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-bibtex" '("orcb-" "org-ref-")))(autoload 'org-ref-delete-citation-at-point "org-ref-citation-links" "Delete the citation or reference at point." t nil)(autoload 'org-ref-replace-citation-at-point "org-ref-citation-links" "Replace the citation at point." t nil)(autoload 'org-ref-edit-pre-post-notes "org-ref-citation-links" "Edit the pre/post notes at point.

if you are not on a key, or with optional prefix
arg COMMON, edit the common prefixes instead.

(fn &optional COMMON)" t nil)(autoload 'org-ref-change-cite-type "org-ref-citation-links" "Change the cite type of citation link at point." t nil)(autoload 'org-ref-sort-citation-link "org-ref-citation-links" "Replace link at point with sorted link by year." t nil)(autoload 'org-ref-next-key "org-ref-citation-links" "Move cursor to the next cite key when on a cite link.
Otherwise run `right-word'. If the cursor moves off the link,
move to the beginning of the next cite link after this one." t nil)(autoload 'org-ref-previous-key "org-ref-citation-links" "Move cursor to the previous cite key when on a cite link.
Otherwise run `left-word'. If the cursor moves off the link,
move to the beginning of the previous cite link after this one." t nil)(autoload 'org-ref-jump-to-visible-key "org-ref-citation-links" "Jump to a visible key with avy." t nil)(autoload 'org-ref-insert-cite-link "org-ref-citation-links" "Insert a cite link with completion.
Optional prefix arg SET-TYPE to choose the cite type.

(fn &optional SET-TYPE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-citation-links" '("org-ref-")))(autoload 'org-ref-insert-link "org-ref-core" "Insert an org-ref link.
If no prefix ARG insert a cite.
If one prefix ARG insert a ref.
If two prefix ARGs insert a label.

This is a generic function. Specific backends might
provide their own version.

(fn ARG)" t nil)(autoload 'org-ref-help "org-ref-core" "Open the `org-ref' manual." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-core" '("org-ref-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-export" '("org-ref")))(autoload 'org-ref-add-glossary-entry "org-ref-glossary" "Insert a new glossary entry.
LABEL is how you refer to it with links.
NAME is the name of the entry to be defined.
DESCRIPTION is the definition of the entry.
Entry gets added after the last #+latex_header line.

This is not a preferred way to add entries. It is preferred to
manually add them to the glossary table.

(fn LABEL NAME DESCRIPTION)" t nil)(autoload 'org-ref-add-acronym-entry "org-ref-glossary" "Add an acronym entry with LABEL.
  ABBRV is the abbreviated form.
  FULL is the expanded acronym.

This is not the preferred way to add acronyms, you should add
them manually to the acroynms table.

(fn LABEL ABBRV FULL)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-glossary" '("or-" "org-ref-")))(autoload 'org-ref-cite-insert-helm "org-ref-helm" "Search BibTeX entries.

With a prefix ARG, the cache is invalidated and the bibliography
reread.

If LOCAL-BIB is non-nil, display that the BibTeX entries are read
from the local bibliography.  This is set internally by
`helm-bibtex-with-local-bibliography'.

If INPUT is non-nil and a string, that value is going to be used
as a predefined search term.  Can be used to define functions for
frequent searches (e.g. your own publications).

(fn &optional ARG LOCAL-BIB INPUT)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-helm" '("org-ref-helm-source-")))(autoload 'org-ref-isbn-clean-bibtex-entry "org-ref-isbn" "Clean a bibtex entry inserted via `isbn-to-bibtex'.
See functions in `org-ref-isbn-clean-bibtex-entry-hook'." t nil)(autoload 'isbn-to-bibtex-lead "org-ref-isbn" "Search lead.to for ISBN bibtex entry.
You have to copy the entry if it is on the page to your bibtex
file.

(fn ISBN)" t nil)(autoload 'isbn-to-bibtex "org-ref-isbn" "Get bibtex entry for ISBN and insert it into BIBFILE.
Nothing happens if an entry with the generated key already exists
in the file. Data comes from worldcat.

(fn ISBN BIBFILE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-isbn" '("org-ref-isbn-" "oricb-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-ivy" '("org-ref-")))(autoload 'org-ref-insert-label-link "org-ref-label-link" "Insert a new label with completion.
The completion helps ensure you use a unique label." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-latex" '("org-ref-")))(autoload 'org-ref-list-of-figures "org-ref-misc-links" "Generate buffer with list of figures in them.
ARG does nothing.
Ignore figures in COMMENTED sections.

(fn &optional ARG)" t nil)(autoload 'org-ref-list-of-tables "org-ref-misc-links" "Generate a buffer with a list of tables.
ARG does nothing.

(fn &optional ARG)" t nil)(autoload 'org-ref-index "org-ref-misc-links" "Open an *index* buffer with links to index entries.
PATH is required for the org-link, but it does nothing here.

(fn &optional PATH)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-misc-links" '("org-ref-idxproc")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-natbib-bbl-citeproc" '("org-")))(autoload 'org-ref-pdf-to-bibtex "org-ref-pdf" "Add pdf of current buffer to bib file and save pdf. The pdf
should be open in Emacs using the `pdf-tools' package." t nil)(autoload 'org-ref-pdf-debug-pdf "org-ref-pdf" "Try to debug getting a doi from a pdf.
Opens a buffer with the pdf converted to text, and `occur' on the
variable `org-ref-pdf-doi-regex'.

(fn PDF-FILE)" t nil)(autoload 'org-ref-pdf-crossref-lookup "org-ref-pdf" "Lookup highlighted text in PDFView in CrossRef." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-pdf" '("org-ref-" "pdftotext-executable")))(autoload 'pubmed-insert-bibtex-from-pmid "org-ref-pubmed" "Insert a bibtex entry at point derived from PMID.
You must clean the entry after insertion.

(fn PMID)" t nil)(autoload 'pubmed "org-ref-pubmed" "Open http://www.ncbi.nlm.nih.gov/pubmed in a browser." t nil)(autoload 'pubmed-advanced "org-ref-pubmed" "Open http://www.ncbi.nlm.nih.gov/pubmed/advanced in a browser." t nil)(autoload 'pubmed-simple-search "org-ref-pubmed" "Open QUERY in Pubmed in a browser.

(fn QUERY)" t nil)(autoload 'pubmed-clinical "org-ref-pubmed" "Open http://www.ncbi.nlm.nih.gov/pubmed/clinical in a browser." t nil)(autoload 'pubmed-clinical-search "org-ref-pubmed" "Open QUERY in pubmed-clinical.

(fn QUERY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-pubmed" '("pubmed-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-ref-links" '("org-ref-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-refproc" '("org-ref-")))(autoload 'scifinder "org-ref-scifinder" "Open https://scifinder.cas.org/scifinder/view/scifinder/scifinderExplore.jsf in a browser." t nil)(autoload 'scopus-related-by-keyword-url "org-ref-scopus" "Return a Scopus url to articles related by keyword for DOI.

(fn DOI)" t nil)(autoload 'scopus-related-by-author-url "org-ref-scopus" "Return a Scopus url to articles related by author for DOI.

(fn DOI)" t nil)(autoload 'scopus-related-by-references-url "org-ref-scopus" "Return a Scopus url to articles related by references for DOI.

(fn DOI)" t nil)(autoload 'scopus-open-eid "org-ref-scopus" "Open article with EID in browser.

(fn EID)" t nil)(autoload 'scopus-basic-search "org-ref-scopus" "Open QUERY as a basic title-abstract-keyword search at scopus.com.

(fn QUERY)" t nil)(autoload 'scopus-advanced-search "org-ref-scopus" "Open QUERY as an advanced search at scopus.com.

(fn QUERY)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-scopus" '("*hydra-eid*" "*scopus-api-key*" "scopus")))(autoload 'org-ref-url-debug-url "org-ref-url-utils" "Open a buffer to URL with all doi patterns highlighted.

(fn URL)" t nil)(autoload 'org-ref-url-html-to-bibtex "org-ref-url-utils" "Convert URL to a bibtex or biblatex entry in BIBFILE.
If URL is the first in the kill ring, use it. Otherwise, prompt for
one in the minibuffer.

(fn BIBFILE &optional URL)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-url-utils" '("org-ref-")))(autoload 'org-ref-version "org-ref-utils" "Provide a version string for org-ref.
Copies the string to the clipboard." t nil)(autoload 'org-ref-debug "org-ref-utils" "Print some debug information to a buffer." t nil)(autoload 'org-ref-open-pdf-at-point "org-ref-utils" "Open the pdf for bibtex key under point if it exists." t nil)(autoload 'org-ref-open-url-at-point "org-ref-utils" "Open the url for bibtex key under point." t nil)(autoload 'org-ref-open-notes-at-point "org-ref-utils" "Open the notes for bibtex key under point in a cite link in a buffer.
Can also be called with THEKEY in a program.

(fn &optional THEKEY)" t nil)(autoload 'org-ref-open-citation-at-point "org-ref-utils" "Open bibtex file to key at point." t nil)(autoload 'org-ref-copy-entry-as-summary "org-ref-utils" "Copy the bibtex entry for the citation at point as a summary." t nil)(autoload 'org-ref-ads-at-point "org-ref-utils" "Open the doi in ADS for bibtex key under point." t nil)(autoload 'org-ref-wos-at-point "org-ref-utils" "Open the doi in wos for bibtex key under point." t nil)(autoload 'org-ref-wos-citing-at-point "org-ref-utils" "Open the doi in wos citing articles for bibtex key under point." t nil)(autoload 'org-ref-wos-related-at-point "org-ref-utils" "Open the doi in wos related articles for bibtex key under point." t nil)(autoload 'org-ref-google-scholar-at-point "org-ref-utils" "Search google scholar for bibtex key under point using the title." t nil)(autoload 'org-ref-biblio-at-point "org-ref-utils" "Do a biblio search for bibtex key under point using the title." t nil)(autoload 'org-ref-pubmed-at-point "org-ref-utils" "Open the doi in pubmed for bibtex key under point." t nil)(autoload 'org-ref-crossref-at-point "org-ref-utils" "Open the doi in crossref for bibtex key under point." t nil)(autoload 'org-ref-email-at-point "org-ref-utils" "Email the citation(s) at point." t nil)(autoload 'org-ref-find-non-ascii-characters "org-ref-utils" "Find non-ascii characters in the buffer.  Useful for cleaning up bibtex files." t nil)(autoload 'org-ref-extract-bibtex-to-file "org-ref-utils" "Extract all bibtex entries for citations buffer to BIBFILE.
If BIBFILE exists, append, unless you use a prefix arg (C-u),
which will CLOBBER the file.

(fn BIBFILE &optional CLOBBER)" t nil)(autoload 'org-ref-extract-bibtex-entries "org-ref-utils" "Extract the bibtex entries in the current buffer into a bibtex src block." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-utils" '("ords" "org-ref")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-worldcat" '("worldcat-query-all")))(autoload 'wos-search "org-ref-wos" "Open the word at point or selection in Web of Science as a topic query." t nil)(autoload 'wos "org-ref-wos" "Open Web of Science search page in a browser." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-wos" '("*wos-" "wos-")))(autoload 'ris2bib "x2bib" "Convert RISFILE to bibtex and insert at point.
Without a prefix arg, stderr is diverted.
If VERBOSE is non-nil show command output.
If the region is active, assume it is a ris entry
and convert it to bib format in place.

(fn RISFILE &optional VERBOSE)" t nil)(autoload 'medxml2bib "x2bib" "Convert MEDFILE (in Pubmed xml) to bibtex and insert at point.
Without a prefix arg, stderr is diverted.
Display output if VERBOSE is non-nil.

(fn MEDFILE &optional VERBOSE)" t nil)(autoload 'clean-entries "x2bib" "Map over bibtex entries and clean them." t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-noter-pdftools" '("org-noter-pdftools-")))(defvar org-super-agenda-mode nil "Non-nil if Org-Super-Agenda mode is enabled.
See the `org-super-agenda-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-super-agenda-mode'.")(autoload 'org-super-agenda-mode "org-super-agenda" "Global minor mode to group items in Org agenda views according to `org-super-agenda-groups'.
With prefix argument ARG, turn on if positive, otherwise off.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-super-agenda" '("org-super-agenda-")))(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ts" '("ts-" "ts<" "ts=" "ts>")))(autoload 'org-pandoc-export-to-asciidoc "ox-pandoc" "Export to asciidoc.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-asciidoc-and-open "ox-pandoc" "Export to asciidoc and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-asciidoc "ox-pandoc" "Export as asciidoc.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-beamer "ox-pandoc" "Export to beamer.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-beamer-and-open "ox-pandoc" "Export to beamer and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-beamer "ox-pandoc" "Export as beamer.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-beamer-pdf "ox-pandoc" "Export to beamer-pdf.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-beamer-pdf-and-open "ox-pandoc" "Export to beamer-pdf and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-commonmark "ox-pandoc" "Export to commonmark.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-commonmark-and-open "ox-pandoc" "Export to commonmark and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-commonmark "ox-pandoc" "Export as commonmark.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-context "ox-pandoc" "Export to context.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-context-and-open "ox-pandoc" "Export to context and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-context "ox-pandoc" "Export as context.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-context-pdf "ox-pandoc" "Export to context-pdf.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-context-pdf-and-open "ox-pandoc" "Export to context-pdf and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-docbook4 "ox-pandoc" "Export to docbook4.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-docbook4-and-open "ox-pandoc" "Export to docbook4 and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-docbook4 "ox-pandoc" "Export as docbook4.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-docbook5 "ox-pandoc" "Export to docbook5.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-docbook5-and-open "ox-pandoc" "Export to docbook5 and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-docbook5 "ox-pandoc" "Export as docbook5.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-docx "ox-pandoc" "Export to docx.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-docx-and-open "ox-pandoc" "Export to docx and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-dokuwiki "ox-pandoc" "Export to dokuwiki.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-dokuwiki-and-open "ox-pandoc" "Export to dokuwiki and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-dokuwiki "ox-pandoc" "Export as dokuwiki.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-dzslides "ox-pandoc" "Export to dzslides.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-dzslides-and-open "ox-pandoc" "Export to dzslides and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-dzslides "ox-pandoc" "Export as dzslides.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-epub2 "ox-pandoc" "Export to epub2.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-epub2-and-open "ox-pandoc" "Export to epub2 and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-epub3 "ox-pandoc" "Export to epub3.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-epub3-and-open "ox-pandoc" "Export to epub3 and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-fb2 "ox-pandoc" "Export to fb2.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-fb2-and-open "ox-pandoc" "Export to fb2 and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-fb2 "ox-pandoc" "Export as fb2.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-gfm "ox-pandoc" "Export to gfm.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-gfm-and-open "ox-pandoc" "Export to gfm and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-gfm "ox-pandoc" "Export as gfm.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-haddock "ox-pandoc" "Export to haddock.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-haddock-and-open "ox-pandoc" "Export to haddock and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-haddock "ox-pandoc" "Export as haddock.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-html4 "ox-pandoc" "Export to html4.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-html4-and-open "ox-pandoc" "Export to html4 and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-html4 "ox-pandoc" "Export as html4.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-html5 "ox-pandoc" "Export to html5.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-html5-and-open "ox-pandoc" "Export to html5 and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-html5 "ox-pandoc" "Export as html5.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-html5-pdf "ox-pandoc" "Export to html5-pdf.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-html5-pdf-and-open "ox-pandoc" "Export to html5-pdf and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-icml "ox-pandoc" "Export to icml.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-icml-and-open "ox-pandoc" "Export to icml and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-icml "ox-pandoc" "Export as icml.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-jats "ox-pandoc" "Export to jats.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-jats-and-open "ox-pandoc" "Export to jats and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-jats "ox-pandoc" "Export as jats.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-json "ox-pandoc" "Export to json.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-json-and-open "ox-pandoc" "Export to json and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-json "ox-pandoc" "Export as json.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-latex "ox-pandoc" "Export to latex.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-latex-and-open "ox-pandoc" "Export to latex and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-latex "ox-pandoc" "Export as latex.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-latex-pdf "ox-pandoc" "Export to latex-pdf.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-latex-pdf-and-open "ox-pandoc" "Export to latex-pdf and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-man "ox-pandoc" "Export to man.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-man-and-open "ox-pandoc" "Export to man and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-man "ox-pandoc" "Export as man.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-markdown "ox-pandoc" "Export to markdown.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-markdown-and-open "ox-pandoc" "Export to markdown and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-markdown "ox-pandoc" "Export as markdown.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-markdown_mmd "ox-pandoc" "Export to markdown_mmd.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-markdown_mmd-and-open "ox-pandoc" "Export to markdown_mmd and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-markdown_mmd "ox-pandoc" "Export as markdown_mmd.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-markdown_phpextra "ox-pandoc" "Export to markdown_phpextra.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-markdown_phpextra-and-open "ox-pandoc" "Export to markdown_phpextra and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-markdown_phpextra "ox-pandoc" "Export as markdown_phpextra.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-markdown_strict "ox-pandoc" "Export to markdown_strict.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-markdown_strict-and-open "ox-pandoc" "Export to markdown_strict and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-markdown_strict "ox-pandoc" "Export as markdown_strict.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-mediawiki "ox-pandoc" "Export to mediawiki.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-mediawiki-and-open "ox-pandoc" "Export to mediawiki and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-mediawiki "ox-pandoc" "Export as mediawiki.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-ms "ox-pandoc" "Export to ms.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-ms-and-open "ox-pandoc" "Export to ms and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-ms "ox-pandoc" "Export as ms.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-ms-pdf "ox-pandoc" "Export to ms-pdf.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-ms-pdf-and-open "ox-pandoc" "Export to ms-pdf and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-muse "ox-pandoc" "Export to muse.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-muse-and-open "ox-pandoc" "Export to muse and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-muse "ox-pandoc" "Export as muse.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-native "ox-pandoc" "Export to native.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-native-and-open "ox-pandoc" "Export to native and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-native "ox-pandoc" "Export as native.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-odt "ox-pandoc" "Export to odt.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-odt-and-open "ox-pandoc" "Export to odt and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-opendocument "ox-pandoc" "Export to opendocument.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-opendocument-and-open "ox-pandoc" "Export to opendocument and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-opendocument "ox-pandoc" "Export as opendocument.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-opml "ox-pandoc" "Export to opml.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-opml-and-open "ox-pandoc" "Export to opml and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-opml "ox-pandoc" "Export as opml.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-org "ox-pandoc" "Export to org.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-org-and-open "ox-pandoc" "Export to org and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-org "ox-pandoc" "Export as org.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-plain "ox-pandoc" "Export to plain.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-plain-and-open "ox-pandoc" "Export to plain and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-plain "ox-pandoc" "Export as plain.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-pptx "ox-pandoc" "Export to pptx.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-pptx-and-open "ox-pandoc" "Export to pptx and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-revealjs "ox-pandoc" "Export to revealjs.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-revealjs-and-open "ox-pandoc" "Export to revealjs and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-revealjs "ox-pandoc" "Export as revealjs.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-rst "ox-pandoc" "Export to rst.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-rst-and-open "ox-pandoc" "Export to rst and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-rst "ox-pandoc" "Export as rst.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-rtf "ox-pandoc" "Export to rtf.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-rtf-and-open "ox-pandoc" "Export to rtf and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-rtf "ox-pandoc" "Export as rtf.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-s5 "ox-pandoc" "Export to s5.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-s5-and-open "ox-pandoc" "Export to s5 and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-s5 "ox-pandoc" "Export as s5.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-slideous "ox-pandoc" "Export to slideous.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-slideous-and-open "ox-pandoc" "Export to slideous and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-slideous "ox-pandoc" "Export as slideous.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-slidy "ox-pandoc" "Export to slidy.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-slidy-and-open "ox-pandoc" "Export to slidy and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-slidy "ox-pandoc" "Export as slidy.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-tei "ox-pandoc" "Export to tei.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-tei-and-open "ox-pandoc" "Export to tei and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-tei "ox-pandoc" "Export as tei.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-texinfo "ox-pandoc" "Export to texinfo.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-texinfo-and-open "ox-pandoc" "Export to texinfo and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-texinfo "ox-pandoc" "Export as texinfo.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-textile "ox-pandoc" "Export to textile.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-textile-and-open "ox-pandoc" "Export to textile and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-textile "ox-pandoc" "Export as textile.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-zimwiki "ox-pandoc" "Export to zimwiki.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-to-zimwiki-and-open "ox-pandoc" "Export to zimwiki and open.

(fn &optional A S V B E)" t nil)(autoload 'org-pandoc-export-as-zimwiki "ox-pandoc" "Export as zimwiki.

(fn &optional A S V B E)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ox-pandoc" '("org-pandoc-")))(autoload 'org-autolist-mode "org-autolist" "Enables improved list management in `org-mode'.

If called interactively, enable Org-Autolist mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-autolist" '("org-autolist-")))(autoload 'org-ref-prettify-mode "org-ref-prettify" "Toggle Org Ref Prettify mode.

If called interactively, enable Org-Ref-Prettify mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{org-ref-prettify-mode-map}

(fn &optional ARG)" t nil)(autoload 'org-ref-prettify-edit-link-at-point "org-ref-prettify" "Edit the current citation link in the minibuffer.
WHERE means where the point should be put in the minibuffer.  If
it is nil, try to be smart about its placement; otherwise, it can
be one of: `type', `beg', or `end'.

(fn &optional WHERE)" t nil)(autoload 'org-ref-prettify-edit-link-at-mouse "org-ref-prettify" "Edit the citation link at mouse position in the minibuffer.
This should be bound to a mouse click EVENT type.
See `org-ref-prettify-edit-link-at-point' for the meaning of WHERE.

(fn EVENT &optional WHERE)" t nil)(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "org-ref-prettify" '("org-ref-prettify-")))
{"pandoc-api-version":[1,22],"meta":{"author":{"t":"MetaInlines","c":[{"t":"Str","c":"Jaden"},{"t":"Space"},{"t":"Str","c":"CH"}]},"title":{"t":"MetaInlines","c":[]}},"blocks":[{"t":"RawBlock","c":["org","#+property: header-args :tangle yes"]},{"t":"Header","c":[1,["global-utilities-and-packages",[],[]],[{"t":"Str","c":"Global"},{"t":"Space"},{"t":"Str","c":"utilities"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"packages"}]]},{"t":"Header","c":[2,["helm",[],[]],[{"t":"Str","c":"Helm"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package helm\n  :demand t\n  :bind (\"M-x\" . helm-M-x)\n  (\"C-x C-f\" . helm-find-files)\n  :config\n  (helm-mode 1))\n"]},{"t":"Header","c":[2,["visual-line-mode",[],[]],[{"t":"Str","c":"Visual-line-mode"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package visual-line-mode\n    :ensure nil\n    :init\n    (global-visual-line-mode t)\n    :hook ((org-mode . visual-line-mode)\n           (prog-mode . visual-line-mode)))\n"]},{"t":"Header","c":[2,["evil-mode",[],[]],[{"t":"Str","c":"Evil-mode"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package evil\n:demand t\n:init\n(evil-mode t))\n"]},{"t":"Header","c":[2,["evil-org-mode",[],[]],[{"t":"Str","c":"Evil-org-mode"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package evil-org\n :ensure t\n :after org\n :hook (org-mode . evil-org-mode)\n :config\n (require 'evil-org-agenda)\n (evil-org-agenda-set-keys))\n"]},{"t":"Header","c":[1,["use-package-configuration",[],[]],[{"t":"Str","c":"Use-package"},{"t":"Space"},{"t":"Str","c":"configuration"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(require 'use-package)\n(setq use-package-always-ensure t)\n"]},{"t":"Header","c":[1,["themes-startup-and-ricing",[],[]],[{"t":"Str","c":"Themes,"},{"t":"Space"},{"t":"Str","c":"startup,"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"ricing"}]]},{"t":"Header","c":[2,["page-break-lines-stuff",[],[]],[{"t":"Str","c":"Page-break-lines"},{"t":"Space"},{"t":"Str","c":"stuff"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package page-break-lines\n  :ensure t)\n"]},{"t":"Header","c":[2,["load-theme",[],[]],[{"t":"Str","c":"Load"},{"t":"Space"},{"t":"Str","c":"theme"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(load-theme 'doom-gruvbox t)\n"]},{"t":"Header","c":[2,["centaur-tabs",[],[]],[{"t":"Str","c":"Centaur-tabs"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package centaur-tabs\n  :ensure t\n  :demand t\n  :config\n  (centaur-tabs-mode t)\n  (setq centaur-tabs-style \"slant\"\n        centaur-tabs-set-bar nil\n        centaur-tabs-set-icons t\n        centaur-tabs-gray-out-icons 'buffer\n        centaur-tabs-height 26\n        centaur-tabs-set-modified-marker t\n        centaur-tabs-modifier-marker \"*\")\n  (centaur-tabs-headline-match)\n  (centaur-tabs-mode t)\n  :bind\n  (\"C-<prior>\" . centaur-tabs-backward)\n  (\"C-<next>\" . centaur-tabs-forward))\n"]},{"t":"Header","c":[2,["powerline",[],[]],[{"t":"Str","c":"Powerline"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package spaceline-config\n:ensure nil\n:demand t\n:init\n(setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))\n(use-package powerline\n:demand t\n:init\n;(powerline-evil-center-color-theme)\n(spaceline-spacemacs-theme))\n"]},{"t":"CodeBlock","c":[["",["elisp"],[["tangle","no"]]],"(use-package powerline-evil\n  :ensure t\n  :demand t\n  :config\n  (setq powerline-default-separator 'contour)\n  (setq powerline-height 100)\n  (setq powerline-display-hud t))\n(powerline-evil-center-color-theme)\n"]},{"t":"Header","c":[2,["dashboard",[],[]],[{"t":"Str","c":"Dashboard"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package dashboard\n  :ensure t\n  :config\n  (setq dashboard-banner-logo-title \"Welcome back, Jaden\"\n        dashboard-startup-banner 'logo\n        dashboard-center-content t\n        dashboard-set-init-info t\n        dashboard-set-file-icons t\n        dashboard-set-heading-icons t\n        dashboard-set-navigator t\n        )\n  (dashboard-setup-startup-hook))\n(setq initial-buffer-choice (lambda () (get-buffer \"*dashboard*\")))\n"]},{"t":"Header","c":[2,["ligatures",[],[]],[{"t":"Str","c":"Ligatures"}]]},{"t":"CodeBlock","c":[["",["elisp"],[["tangle","yes"]]],"(add-to-list 'load-path \"~/.emacs.d/lisp/\")\n\n(require 'ligature)\n;; Enable the www ligature in every possible major mode\n(ligature-set-ligatures 't '(\"www\"))\n\n;; Enable ligatures in programming modes                                                           \n(ligature-set-ligatures 'prog-mode '(\"www\" \"**\" \"***\" \"**/\" \"*>\" \"*/\" \"\\\\\\\\\" \"\\\\\\\\\\\\\" \"{-\" \"::\"\n                                     \":::\" \":=\" \"!!\" \"!=\" \"!==\" \"-}\" \"----\" \"-->\" \"->\" \"->>\"\n                                     \"-<\" \"-<<\" \"-~\" \"#{\" \"#[\" \"##\" \"###\" \"####\" \"#(\" \"#?\" \"#_\"\n                                     \"#_(\" \".-\" \".=\" \"..\" \"..<\" \"...\" \"?=\" \"??\" \";;\" \"/*\" \"/**\"\n                                     \"/=\" \"/==\" \"/>\" \"//\" \"///\" \"&&\" \"||\" \"||=\" \"|=\" \"|>\" \"^=\" \"$>\"\n                                     \"++\" \"+++\" \"+>\" \"=:=\" \"==\" \"===\" \"==>\" \"=>\" \"=>>\" \"<=\"\n                                     \"<*>\" \"<|\" \"<|>\" \"<$\" \"<$>\" \"<!--\" \"<-\" \"<--\" \"<->\" \"<+\"\n                                     \"<+>\" \"<=\" \"<==\" \">=\" \">==\" \"<=>\" \"<=<\" \"<>\" \"<<\" \"<<-\" \"<<=\" \"<<<\"\n                                     \"<~\" \"<~~\" \"</\" \"</>\" \"~@\" \"~-\" \"~>\" \"~~\" \"~~>\" \"%%\"))\n\n(global-ligature-mode 't)\n"]},{"t":"Header","c":[2,["show-tabs",[],[]],[{"t":"Str","c":"Show"},{"t":"Space"},{"t":"Str","c":"tabs"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package highlight-indent-guides\n:hook\n(prog-mode . highlight-indent-guides-mode))\n"]},{"t":"Header","c":[2,["tildes-on-empty-lines",[],[]],[{"t":"Str","c":"Tildes"},{"t":"Space"},{"t":"Str","c":"on"},{"t":"Space"},{"t":"Str","c":"empty"},{"t":"Space"},{"t":"Str","c":"lines"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(setq-default indicate-empty-lines t)\n(define-fringe-bitmap 'tilde [0 0 0 113 219 142 0 0] nil nil 'center)\n(setcdr (assq 'empty-line fringe-indicator-alist) 'tilde)\n(set-fringe-bitmap-face 'tilde 'font-lock-function-name-face)\n"]},{"t":"Header","c":[1,["programming-mode-settings",[],[]],[{"t":"Str","c":"Programming"},{"t":"Space"},{"t":"Str","c":"mode"},{"t":"Space"},{"t":"Str","c":"settings"}]]},{"t":"Header","c":[2,["eglot-for-ide-like-experience",[],[]],[{"t":"Str","c":"Eglot"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"IDE"},{"t":"Space"},{"t":"Str","c":"like"},{"t":"Space"},{"t":"Str","c":"experience"},{"t":"Space"},{"t":"Span","c":[["",["tag"],[["tag-name","disabled"]]],[{"t":"SmallCaps","c":[{"t":"Str","c":"disabled"}]}]]}]]},{"t":"CodeBlock","c":[["",["elisp"],[["tangle","no"]]],"(use-package eglot\n  :ensure t\n  :hook\n  (python-mode . eglot-ensure)\n  (c-mode . eglot-ensure)\n  :config\n  (setq eglot-ignored-server-capabilities (quote (:documentHighlightProvider))))\n"]},{"t":"Header","c":[2,["lsp",[],[]],[{"t":"Str","c":"LSP"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package lsp-mode\n  :ensure t\n  :init\n  (setq lsp-keymap-prefix \"C-c l\")\n  :commands lsp lsp-deferred\n  :hook ((lsp-after-open . lsp-enable-imenu)\n         (lsp-after-open . lsp-toggle-symbol-highlight)\n         (lsp-mode . lsp-enable-which-key-integration)\n         (lsp-after-open . (lambda ()\n                             (setq-local company-minimum-prefix-length 1\n                                         company-idle-delay 0.0) ;; default is 0.2\n                             )))\n  :bind (:map lsp-mode-map\n              (\"C-c l t\" . lsp-describe-thing-at-point)\n              (\"C-c l d\" . lsp-ui-doc-show))\n  :config\n  (setq lsp-prefer-flymake nil)\n  (setq lsp-auto-guess-root t ; Detect project root\n        lsp-keep-workspace-alive nil ; Auto-kill LSP server\n        lsp-prefer-capf t\n        lsp-enable-indentation nil\n        lsp-enable-symbol-highlighting nil\n        lsp-enable-on-type-formatting nil)\n  :hook ((c-mode . lsp)\n         (python-mode . lsp)))\n\n;; lsp-ui: This contains all the higher level UI modules of lsp-mode, like flycheck support and code lenses.\n;; https://github.com/emacs-lsp/lsp-ui\n(use-package lsp-ui\n  :ensure t\n  :config\n  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)\n  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)\n  (setq lsp-ui-sideline-enable nil\n        lsp-ui-sideline-update-mode 'line\n        lsp-ui-sideline-show-code-actions t\n        lsp-ui-sideline-show-hover t\n        lsp-ui-doc-enable t\n        lsp-ui-doc-delay 1.0\n        lsp-ui-doc-position 'bottom\n        lsp-ui-doc-alignment 'frame\n        lsp-ui-doc-include-signature t\n        lsp-ui-doc-use-childframe t\n        lsp-ui-doc-include-signature t\n        lsp-eldoc-enable-hover nil ; Disable eldoc displays in minibuffer\n        lsp-ui-doc-position 'at-point\n        lsp-ui-imenu-enable t\n        lsp-ui-sideline-ignore-duplicate t)\n  :hook ((python-mode . lsp-ui-mode)\n         (c-mode . lsp-ui-mode)))\n\n  ;; debugger adapter protocol support for emacs\n  ;; https://github.com/emacs-lsp/dap-mode/\n  (use-package dap-mode\n    :ensure t\n    :defer 4\n    :config\n    ;; call dap-hydra when going to the next breakpoint\n    (add-hook 'dap-stopped-hook\n              (lambda (arg) (call-interactively #'dap-hydra)))\n    (add-hook 'dap-mode-hook #'dap-ui-mode) ; use a hook so users can remove it\n    (dap-mode 1))\n"]},{"t":"CodeBlock","c":[["",["elisp"],[["tangle","no"]]],"(use-package lsp-mode\n  :init\n  (setq lsp-keymap-prefix \"C-c l\")\n  :config\n  (setq lsp-auto-guess-root t\n        lsp-keep-workspace-alive nil\n        lsp-prefer-capf t\n        lsp-enable-indentation nil)\n  :hook ((python-mode . lsp)\n         (c-mode . lsp))\n  :commands lsp)\n\n(use-package lsp-ui \n  :config\n  (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)\n  (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)\n  (setq lsp-ui-sideline-enable nil\n        lsp-ui-sideline-update-mode 'line\n        lsp-ui-sideline-show-code-actions t\n        lsp-ui-sideline-show-hover t\n        lsp-ui-doc-enable nil\n        lsp-ui-doc-include-signature t\n        lsp-eldoc-enable-hover nil ; Disable eldoc displays in minibuffer\n        lsp-ui-doc-position 'at-point\n        lsp-ui-imenu-enable t\n        lsp-ui-sideline-ignore-duplicate t)\n  :commands lsp-ui-mode)\n\n(use-package helm-lsp :commands helm-lsp-workspace-symbol)\n"]},{"t":"CodeBlock","c":[["",["elisp"],[["tangle","no"]]],"(use-package lsp-ui\n  :config (setq lsp-ui-sideline-show-hover t\n                lsp-ui-sideline-delay 0.5\n                lsp-ui-sideline-show-diagnostics t\n                lsp-ui-sideline-show-code-actions t\n\n                lsp-enable-links nil\n                    lsp-document-highlight-delay nil\n\n\n                lsp-ui-doc-delay 2.5\n                lsp-ui-doc-position 'bottom\n                lsp-ui-doc-alignment 'frame\n                lsp-ui-doc-header nil\n                lsp-ui-doc-include-signature t\n                lsp-ui-doc-use-childframe t)\n  :hook ((prog-mode . lsp)\n         (prog-mode . lsp-ui-mode)\n         (prog-mode . lsp--cur-workspace-check)))\n(add-hook 'lsp-on-idle-hook #'lsp--document-highlight nil t)\n"]},{"t":"Header","c":[2,["company-for-autocompletion",[],[]],[{"t":"Str","c":"Company"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"autocompletion"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package company\n  :ensure t\n  :hook\n  (prog-mode . company-mode))\n"]},{"t":"Header","c":[2,["linum-mode",[],[]],[{"t":"Str","c":"Linum-mode"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package linum-mode\n:ensure nil\n:hook\n(prog-mode . linum-mode))\n"]},{"t":"Header","c":[2,["hl-line-mode",[],[]],[{"t":"Str","c":"hl-line"},{"t":"Space"},{"t":"Str","c":"mode"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(add-hook 'prog-mode-hook 'hl-line-mode)\n"]},{"t":"Header","c":[1,["org-mode-settings",[],[]],[{"t":"Str","c":"Org-mode"},{"t":"Space"},{"t":"Str","c":"settings"},{"t":"Space"},{"t":"Span","c":[["",["tag"],[["tag-name","emacs"]]],[{"t":"SmallCaps","c":[{"t":"Str","c":"emacs"}]}]]},{"t":"Str","c":" "},{"t":"Span","c":[["",["tag"],[["tag-name","personal"]]],[{"t":"SmallCaps","c":[{"t":"Str","c":"personal"}]}]]}]]},{"t":"Header","c":[2,["org-mode",[],[]],[{"t":"Str","c":"Org-mode"}]]},{"t":"CodeBlock","c":[["",["commonlisp"],[["org-language","emacs-lisp"]]],"(use-package org\n  :config\n  (setq org-columns-default-format \"%50ITEM %TODO %3PRIORITY %6Effort{:} %6CLOCKSUM(Clock) %TAGS \"\n        ))\n"]},{"t":"Header","c":[2,["org-todo-keywords-and-stuff",[],[]],[{"t":"Str","c":"Org-todo"},{"t":"Space"},{"t":"Str","c":"keywords"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"stuff"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(setq org-todo-keywords\n   '((sequence \"TODO\" \"NEXT\" \"STARTED\" \"ET\" \"POSTPONED\" \"SOMEDAY\" \"DONE\")))\n"]},{"t":"Header","c":[2,["org-capture",[],[]],[{"t":"Str","c":"Org-capture"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(global-set-key (kbd \"C-c c\") 'org-capture)\n(setq org-capture-templates\n      '((\"n\" \"Quick note\" entry\n         (file+headline \"~/Documents/personal.org\" \"Quick Notes\")\n         \"* %^{Headline}\n  ENTERED: %U\n\" :prepend t)\n        (\"a\" \"Test/Assessment/Quiz \" entry\n         (file \"~/org/todo.org\")\n         \"* %^{Test Name} :school:%^{Tags}:\n  DEADLINE: %^{Deadline}t ENTERED: %U\" :prepend t :time-prompt t)\n        (\"P\" \"Project TODO\" entry\n         (file \"~/org/todo.org\")\n         \"* TODO %^{Project name} [/] :project:%^{Tags}:\n   SCHEDULED: %^{Scheduled}t DEADLINE: %^{Deadline}t ENTERED: %U\" :prepend t :time-prompt t)\n        (\"e\" \"Email TODO\" entry\n         (file \"~/org/todo.org\")\n         \"* TODO %^{Task} :email:%^{Tags}:\n  DEADLINE: %^{Deadline}t ENTERED: %U\" :prepend t :time-prompt t)\n        (\"m\" \"Meeting entry\" entry\n         (file \"~/org/todo.org\")\n         \"* %^{prompt} :meeting:%^{tags}:\n  DEADLINE: %^{Deadline}T ENTERED: %U\" :prepend t :time-prompt t)\n        (\"h\" \"Homework entry\" entry\n         (file \"~/org/todo.org\")\n         \"* TODO %^{prompt}    :school:homework:\n  SCHEDULED: %^{Scheduled}t DEADLINE: %^{Deadline}t ENTERED %U\n  :PROPERTIES:\n  :EFFORT: %^{Effort}\n  :END:\" :prepend t :time-prompt t)))\n"]},{"t":"Header","c":[2,["org-agenda",[],[]],[{"t":"Str","c":"Org-agenda"}]]},{"t":"Header","c":[3,["org-agenda-1",[],[]],[{"t":"Str","c":"Org-agenda"}]]},{"t":"Para","c":[{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"agenda"},{"t":"Space"},{"t":"Str","c":"files"},{"t":"Space"},{"t":"Str","c":"are"},{"t":"Space"},{"t":"Str","c":"maintained"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"customize-variable,"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"are"},{"t":"Space"},{"t":"Str","c":"not"},{"t":"Space"},{"t":"Str","c":"defined"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"managed"},{"t":"Space"},{"t":"Str","c":"here."}]},{"t":"CodeBlock","c":[["",["elisp"],[]],"  (use-package org-agenda\n:ensure nil\n      :bind (\"C-c a\" . org-agenda)\n      :config\n      (setq org-agenda-columns-add-appointments-to-effort-sum t\n            org-agenda-entry-text-maxlines 20\n            org-agenda-include-diary t\n            org-agenda-prefix-format\n            '((agenda . \" %i %-12:c%?-8t% s %-6e\")\n              (todo . \" %i %-12:c %-6e \")\n              (tags . \" %i %-12:c %-6e\"))\n            org-agenda-skip-scheduled-if-deadline-is-shown t\n            org-agenda-skip-scheduled-if-done t\n            org-agenda-span 'day)\n      (setq org-agenda-custom-commands\n            '((\"g\" \"Good agenda\"\n               ((agenda \"\"\n                        ((org-agenda-overriding-header \"Agenda and Tonight's Homework\")\n                         (org-super-agenda-groups\n                          '((:time-grid t)\n                            (:name \"OVERDUE\" :discard\n                                   (:todo \"SOMEDAY\")\n                                   :deadline past :order 1)\n                            (:name \"Today's Schedule\" :time-grid t :order 2)\n                            (:name \"Meetings\" :tag \"meeting\" :order 2)\n                            (:name \"Tests and Quizzes\" :tag\n                                   (\"test\" \"quiz\" \"assessment\" \"conference\")\n                                   :order 3)\n                            (:name \"Ongoing Futuredue Homework\" :and\n                                   (:tag \"school\" :tag \"homework\" :deadline future :scheduled today)\n                                   :and\n                                   (:tag \"school\" :tag \"project\" :deadline future :scheduled past)\n                                   :order 4)\n                            (:name \"Tonight's Homework\" :and\n                                   (:tag \"school\" :tag \"homework\" :deadline today)\n                                   :and\n                                   (:tag \"school\" :tag \"project\" :deadline today)\n                                   :and\n                                   (:tag \"school\" :tag \"homework\" :scheduled today)\n                                   :order 5)\n                            (:name \"Upcoming Homework\" :and\n                                   (:tag \"school\" :tag \"homework\" :deadline future)\n                                   :and\n                                   (:tag \"school\" :children t :deadline future)\n                                   :order 6)\n                            (:name \"Emails\" :tag \"email\" :order 7)))))\n                (alltodo \"\"\n                         ((org-agenda-overriding-header \"PROJECTS\")\n                          (org-super-agenda-groups\n                           '((:auto-parent t)\n                             (:discard\n                              (:anything))))))\n                (alltodo \"\"\n                         ((org-agenda-overriding-header \"Other\")\n                          (org-super-agenda-groups\n                           '((:name \"Bucket List\" :and\n                                    (:todo \"SOMEDAY\" :tag \"PERSONAL\")\n                                    :order 1)\n                             (:name \"Someday Maybe\" :todo \"SOMEDAY\" :order 10)\n                             (:name \"Everything Else\" :anything t :order 20))))))\n               nil nil)\n              (\"n\" \"Agenda and all TODOs\"\n               ((agenda \"\" nil)\n                (alltodo \"\" nil))\n               nil))))\n"]},{"t":"Header","c":[3,["org-mobile",[],[]],[{"t":"Str","c":"Org-mobile"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(setq org-mobile-directory \"~/Dropbox/Apps/MobileOrg\")\n"]},{"t":"Header","c":[3,["org-super-agenda",[],[]],[{"t":"Str","c":"Org-super-agenda"}]]},{"t":"CodeBlock","c":[["",["commonlisp"],[["org-language","emacs-lisp"]]],"(use-package org-super-agenda\n  :ensure t\n  :hook\n  (org-agenda-before-finalize . org-super-agenda-mode))\n"]},{"t":"Header","c":[2,["org-noter-stuff",[],[]],[{"t":"Str","c":"Org-noter"},{"t":"Space"},{"t":"Str","c":"stuff"}]]},{"t":"Header","c":[3,["a-bunch-of-requires-that-idk-why-they-make-it-work",[],[]],[{"t":"Str","c":"A"},{"t":"Space"},{"t":"Str","c":"bunch"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"requires"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"IDK"},{"t":"Space"},{"t":"Str","c":"why"},{"t":"Space"},{"t":"Str","c":"they"},{"t":"Space"},{"t":"Str","c":"make"},{"t":"Space"},{"t":"Str","c":"it"},{"t":"Space"},{"t":"Str","c":"work"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(require 'org-noter-pdftools)\n(require 'org-pdftools)\n(require 'pdf-history)\n(require 'pdf-links)\n(require 'pdf-sync)\n(require 'pdf-outline)\n"]},{"t":"Header","c":[3,["pdf-tools",[],[]],[{"t":"Str","c":"Pdf-tools"}]]},{"t":"CodeBlock","c":[["",["commonlisp"],[["org-language","emacs-lisp"]]],"(use-package pdf-tools\n  :ensure t\n  :pin manual\n  :config\n  ;;initialize\n  (pdf-tools-install)\n  ;; use normal isearch\n  (define-key pdf-view-mode-map (kbd \"C-s\") 'isearch-forward))\n"]},{"t":"OrderedList","c":[[1,{"t":"DefaultStyle"},{"t":"DefaultDelim"}],[[{"t":"Para","c":[{"t":"Span","c":[["",["done","DONE"],[]],[{"t":"Str","c":"DONE"}]]},{"t":"Space"},{"t":"Str","c":"fix"},{"t":"Space"},{"t":"Str","c":"pdf-tools"},{"t":"Space"},{"t":"Str","c":"(pdf-tools-install)"}]}]]]},{"t":"Header","c":[3,["org-noter",[],[]],[{"t":"Str","c":"Org-noter"}]]},{"t":"CodeBlock","c":[["",["commonlisp"],[["org-language","emacs-lisp"]]],"(use-package org-noter\n  :ensure t\n  :config\n  (require 'org-noter-pdftools))\n"]},{"t":"Header","c":[2,["org-indent-mode",[],[]],[{"t":"Str","c":"Org-indent-mode"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(add-hook 'org-mode-hook 'org-indent-mode)\n"]},{"t":"Header","c":[2,["stop-org-mode-from-automatically-indenting-shit",[],[]],[{"t":"Str","c":"Stop"},{"t":"Space"},{"t":"Str","c":"org-mode"},{"t":"Space"},{"t":"Str","c":"from"},{"t":"Space"},{"t":"Str","c":"automatically"},{"t":"Space"},{"t":"Str","c":"indenting"},{"t":"Space"},{"t":"Str","c":"shit"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(add-hook 'electric-indent-functions\n    (lambda (x) (when (eq 'org-mode major-mode) 'no-indent)))\n"]},{"t":"Header","c":[2,["org-variable-pitch",[],[]],[{"t":"Str","c":"Org-variable-pitch"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package org-variable-pitch\n:config\n(setq org-variable-pitch-fixed-faces '(org-block\n                                       org-block-begin-line\n                                       org-block-end-line\n                                       org-code\n                                       org-document-info-keyword\n                                       org-done\n                                       org-formula\n                                       org-indent\n                                       org-meta-line\n                                       org-special-keyword\n                                       org-table\n                                       org-todo\n                                       org-verbatim\n                                       org-date\n                                       org-drawer\n                                       org-link\n                                       link\n                                       centaur-tabs-default\n                                       org-property-value\n                                       org-level-1\n                                       org-level-2\n                                       org-level-3\n                                       org-level-4\n                                       org-level-5\n                                       org-level-6\n                                       org-level-7\n                                       org-level-8\n                                       org-hide\n                                       org-target\n                                       org-done))\n:hook ((org-mode) . org-variable-pitch-minor-mode))\n"]},{"t":"Header","c":[2,["misc-hacks-org-mode-hacks",[],[]],[{"t":"Str","c":"Misc"},{"t":"Space"},{"t":"Str","c":"hacks"},{"t":"Space"},{"t":"Str","c":"org-mode"},{"t":"Space"},{"t":"Str","c":"hacks"}]]},{"t":"Header","c":[3,["plain-list---to-utf-8-bullet",[],[]],[{"t":"Str","c":"Plain"},{"t":"Space"},{"t":"Str","c":"list"},{"t":"Space"},{"t":"Str","c":"\"-\""},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"utf-8"},{"t":"Space"},{"t":"Str","c":"bullet"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(font-lock-add-keywords 'org-mode\n                        '((\"^\\s*\\\\([-]\\\\) \"\n                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) \"•\"))))))\n"]},{"t":"Header","c":[2,["notifications-and-reminders",[],[]],[{"t":"Str","c":"Notifications"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"reminders"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(setq appt-display-interval 3\n      appt-message-warning-time 15\n      org-show-notification-handler \"notify-send\")\n\n(require 'notifications)\n\n(defcustom appt-notification-bus :session\n  \"D-bus bus to use for notification.\"\n  :group 'appt-notification\n  :type '(choice (const :tag \"Session bus\" :session) string))\n(defun appt-display (min-to-appt new-time msg)\n  \"Send notification.\"\n  (notifications-notify :bus appt-notification-bus\n                        :title (format \"Appointment in %s minutes\" min-to-appt)\n                        :body (format \"%s\" msg)\n                        :replaces-id nil\n                        :app-icon nil\n                        :timeout 5000\n                        :desktop-entry \"emacs\"))\n(setq appt-disp-window-function 'appt-display)\n"]},{"t":"Header","c":[2,["sagemath",[],[]],[{"t":"Str","c":"SageMath"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],";; sagemath\n(require 'ob-sagemath)\n(require 'sage-shell-mode)\n(sage-shell:define-alias)\n;;Ob-sagemath supports only evaluating with a session.\n(setq org-babel-default-header-args:sage '((:session . t)\n                                           (:results . \"output\")))\n\n;; Do not confirm before evaluation\n(setq org-confirm-babel-evaluate nil)\n\n;; Do not evaluate code blocks when exporting.\n(setq org-export-babel-evaluate nil)\n\n;; Show images when opening a file.\n(setq org-startup-with-inline-images t)\n\n;; Show images after evaluating code blocks.\n(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)\n"]},{"t":"Header","c":[2,["ox-pandoc",[],[]],[{"t":"Str","c":"Ox-pandoc"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(use-package ox-pandoc)\n"]},{"t":"Header","c":[1,["custom-functions",[],[]],[{"t":"Str","c":"Custom"},{"t":"Space"},{"t":"Str","c":"functions"}]]},{"t":"Header","c":[2,["screenshot",[],[]],[{"t":"Str","c":"Screenshot"}]]},{"t":"CodeBlock","c":[["",["elisp"],[]],"(defun my-org-screenshot ()\n  \"Take a screenshot into a time stamped unique-named file in the same directory as the org-buffer and insert a link to this file.\"\n  (interactive)\n  (setq filename\n        (concat\n         (make-temp-name\n          (concat (buffer-file-name)\n                  \"_\"\n                  (format-time-string \"%Y-%m-%d_%H%M%S_\")) ) \".png\"))\n  (call-process \"import\" nil nil nil filename)\n  (insert (concat \"[[\" filename \"]]\"))\n  (org-display-inline-images))\n(global-set-key (kbd \"C-c i S\") 'my-org-screenshot)\n"]}]}